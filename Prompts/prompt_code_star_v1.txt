Below are three examples that demonstrate the desired style:

<EXAMPLE 1>
<Premises>
Peter Parker is either a superhero or a civilian.
The Hulk is a destroyer.
The Hulk wakes up when he is angry.
If the Hulk wakes up, then he will break a bridge.
Thor is a god.
Thor will break a bridge when he is happy.
A god is not a destroyer.
Peter Parker wears a uniform when he is a superhero.
Peter Parker is not a civilian if a destroyer is breaking a bridge.
If Thor is happy, the Hulk is angry.
</Premises>
<Conclusion>
If Thor is happy, then Peter Parker wears a uniform.
</Conclusion>
<PYTHON>
class Hulk:
    def __init__(self, angry=None):
        self.angry = angry  # can be True, False, or None

    @property
    def is_destroyer(self) -> bool:
        return True  # Premise: The Hulk is a destroyer.

    @property
    def wakes_up(self):
        # Premise: The Hulk wakes up when he is angry.
        if self.angry is None:
            return None
        return self.angry

    @property
    def breaks_bridge(self):
        # Premise: If the Hulk wakes up, then he will break a bridge.
        if self.wakes_up is None:
            return None
        return self.wakes_up

class Thor:
    def __init__(self, happy=None):
        self.happy = happy  # can be True, False, or None

    @property
    def is_god(self) -> bool:
        return True  # Premise: Thor is a god.

    @property
    def is_destroyer(self) -> bool:
        # Premise: A god is not a destroyer.
        return False

    @property
    def breaks_bridge(self):
        # Premise: Thor will break a bridge when he is happy.
        if self.happy is None:
            return None
        return self.happy

class PeterParker:
    def __init__(self, is_superhero=None):
        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown

    @property
    def is_civilian(self):
        # Premise: Peter Parker is either a superhero or a civilian.
        if self.is_superhero is None:
            return None
        return not self.is_superhero

    @property
    def wears_uniform(self):
        # Premise: Peter Parker wears a uniform when he is a superhero.
        if self.is_superhero is None:
            return None
        return self.is_superhero

def apply_premises(thor, hulk, peter) -> bool:
    changed = False

    # Premise 10: If Thor is happy, then the Hulk is angry.
    if thor.happy is True and hulk.angry is not True:
        hulk.angry = True
        changed = True

    # Premise 4 is encoded in Hulk.breaks_bridge.
    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,
    # meaning he must be a superhero.
    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:
        peter.is_superhero = True
        changed = True

    return changed

def run_inference(thor, hulk, peter):
    while apply_premises(thor, hulk, peter):
        pass

def check_conclusion(thor, hulk, peter) -> str:
    run_inference(thor, hulk, peter)
    if thor.happy is True:
        if peter.wears_uniform is True:
            return "True"
        elif peter.wears_uniform is False:
            return "False"
        else:
            return "Uncertain"
    else:
        # If Thor is not happy, the implication is vacuously true.
        return "True"

def func():
    # Initial conditions:
    # Peter Parker is either a superhero or a civilian.
    # Here we assume initially he is a civilian (is_superhero = False).
    # The Hulk's anger is initially unknown (set to False for determinism).
    thor = Thor(happy=True)               # Premise: Thor is happy.
    hulk = Hulk(angry=False)             # Initial state; will be updated by inference.
    peter = PeterParker(is_superhero=False)  # Initially a civilian.
    return check_conclusion(thor, hulk, peter)

result = func()
print("Conclusion: If Thor is happy, then Peter Parker wears a uniform?", result)


</PYTHON>
</EXAMPLE 1>

<EXAMPLE 2>
<Premises>
All philosophers reason.
Some sophists reason.
All who can reason can distinguish truth from falsehood.
Nobody who can distinguish truth from falsehood is morally perfect.
The theistic God is morally perfect.
The theistic God is a sophist.
</Premises>
<Conclusion>
The theistic God is a sophist and a philosopher.
</Conclusion>
<PYTHON>
class TheisticGod:
    def __init__(
        self,
        is_philosopher=None,
        is_sophist=None,
        can_reason=None,
        can_distinguish=None,
        is_morally_perfect=None
    ):
        self.is_philosopher = is_philosopher
        self.is_sophist = is_sophist
        self.can_reason = can_reason
        self.can_distinguish = can_distinguish
        self.is_morally_perfect = is_morally_perfect

def apply_premises(god) -> bool:
    changed = False

    # Premise 1: All philosophers reason.
    if god.is_philosopher is True and god.can_reason is not True:
        god.can_reason = True
        changed = True

    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.
    if god.can_reason is False and god.is_philosopher is not False:
        god.is_philosopher = False
        changed = True

    # Premise 3: All who can reason can distinguish truth from falsehood.
    if god.can_reason is True and god.can_distinguish is not True:
        god.can_distinguish = True
        changed = True

    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.
    if god.can_distinguish is False and god.can_reason is not False:
        god.can_reason = False
        changed = True

    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.
    if god.can_distinguish is True and god.is_morally_perfect is not False:
        god.is_morally_perfect = False
        changed = True

    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.
    if god.is_morally_perfect is True and god.can_distinguish is not False:
        god.can_distinguish = False
        changed = True

    # Premise 2: Some sophists reason. (No direct change to this God instance)
    # Premises 5 and 6 are given in the initialization.

    return changed

def run_inference(god):
    while apply_premises(god):
        pass

def check_conclusion(god) -> str:
    run_inference(god)
    if god.is_sophist is None or god.is_philosopher is None:
        return "Uncertain"
    if god.is_sophist is True and god.is_philosopher is True:
        return "True"
    else:
        return "False"

def func():
    god = TheisticGod(
        is_philosopher=None,
        is_sophist=True,
        can_reason=None,
        can_distinguish=None,
        is_morally_perfect=True
    )
    return check_conclusion(god)

result = func()
print("Conclusion: The theistic God is a sophist and a philosopher?", result)

</PYTHON>
</EXAMPLE 2>

<EXAMPLE 3>
<Premises>
William Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. 
The University of Edinburgh is a university located in the United Kingdom. 
William Dickinson supported the Portland Whigs. 
People who supported the Portland Whigs did not get a seat in the Parliament.
</Premises>
<Conclusion>
William Dickinson went to schools located in the United Kingdom for both high school and university.
</Conclusion>
<PYTHON>
class School:
    def __init__(self, name, location=None):
        self.name = name
        self.location = location

class University(School):
    pass

class Person:
    def __init__(
        self,
        name,
        is_british=None,
        high_school=None,
        university=None,
        sat_in_house=None,
        supported_portland_whigs=None
    ):
        self.name = name
        self.is_british = is_british
        self.high_school = high_school
        self.university = university
        self.sat_in_house = sat_in_house
        self.supported_portland_whigs = supported_portland_whigs

def apply_premises(person) -> bool:
    changed = False

    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.
    if person.name == "William Dickinson":
        if person.is_british is None:
            person.is_british = True
            changed = True
        if person.sat_in_house is None:
            person.sat_in_house = True
            changed = True

    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.
    if person.name == "William Dickinson":
        if person.high_school is None:
            person.high_school = School("Westminster School", location=None)
            changed = True
        if person.university is None:
            person.university = University("University of Edinburgh", location=None)
            changed = True

    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.
    if person.university is not None and person.university.name == "University of Edinburgh":
        if person.university.location != "UK":
            person.university.location = "UK"
            changed = True

    # Premise 4: William Dickinson supported the Portland Whigs.
    if person.name == "William Dickinson":
        if person.supported_portland_whigs is None:
            person.supported_portland_whigs = True
            changed = True

    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.
    # (No update is made here as it does not affect school location.)
    return changed

def run_inference(person):
    while apply_premises(person):
        pass

def check_conclusion(person) -> str:
    run_inference(person)
    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.
    if person.high_school is None or person.university is None:
        return "Uncertain"
    hs_loc = person.high_school.location
    uni_loc = person.university.location
    if hs_loc is None or uni_loc is None:
        return "Uncertain"
    if hs_loc == "UK" and uni_loc == "UK":
        return "True"
    else:
        return "False"

def func():
    person = Person(
        name="William Dickinson",
        is_british=None,
        high_school=None,
        university=None,
        sat_in_house=None,
        supported_portland_whigs=None
    )
    return check_conclusion(person)

result = func()
print("Conclusion: William Dickinson went to schools located in the UK for both high school and university?", result)
</PYTHON>
</EXAMPLE 3>



