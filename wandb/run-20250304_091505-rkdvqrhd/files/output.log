  0%|          | 0/30 [00:00<?, ?it/s][WARNING|logging.py:329] 2025-03-04 09:15:06,059 >> It is strongly recommended to train Gemma2 models with the `eager` attention implementation instead of `flash_attention_2`. Use `eager` with `AutoModelForCausalLM.from_pretrained('<path-to-checkpoint>', attn_implementation='eager')`.
[2025-03-04 09:16:38,012] [WARNING] [stage3.py:2139:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
 80%|████████  | 24/30 [39:53<09:26, 94.44s/it] 
{'loss': 1.0746, 'grad_norm': 28.76009972966515, 'learning_rate': 4.986304738420684e-06, 'epoch': 0.15}
[2025-03-04 09:18:07,888] [WARNING] [stage3.py:2139:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:19:38,339] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:21:08,138] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:22:39,041] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.4098, 'grad_norm': 2.312067763587003, 'learning_rate': 4.665063509461098e-06, 'epoch': 0.73}
[2025-03-04 09:24:10,176] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:25:40,985] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:27:10,788] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:28:41,530] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:30:12,313] [WARNING] [stage3.py:2139:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.2514, 'grad_norm': 0.7495197094469845, 'learning_rate': 3.7500000000000005e-06, 'epoch': 1.58}
[2025-03-04 09:31:42,598] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:33:12,473] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:34:44,032] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:36:14,913] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:37:46,428] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:39:16,753] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.1896, 'grad_norm': 0.6992409074674005, 'learning_rate': 2.5e-06, 'epoch': 2.44}
[2025-03-04 09:40:46,964] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:42:17,001] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:43:47,329] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:45:17,593] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:46:47,334] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:48:18,302] [WARNING] [stage3.py:2139:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.1381, 'grad_norm': 0.6343885639630856, 'learning_rate': 1.2500000000000007e-06, 'epoch': 3.29}
[2025-03-04 09:49:49,130] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:51:19,353] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:52:49,991] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:54:20,433] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:55:50,408] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 09:57:21,217] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.1051, 'grad_norm': 0.6823715156903619, 'learning_rate': 3.3493649053890325e-07, 'epoch': 4.15}
[2025-03-04 09:58:50,879] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 10:00:21,018] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 10:01:51,596] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 10:03:21,849] [WARNING] [stage3.py:2139:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2025-03-04 10:04:52,519] [WARNING] [stage3.py:2139:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
{'loss': 0.0777, 'grad_norm': 0.5676296835301833, 'learning_rate': 0.0, 'epoch': 4.87}

Training completed. Do not forget to share your model on huggingface.co/models =)


100%|██████████| 30/30 [50:10<00:00, 100.35s/it]
{'train_runtime': 3011.3933, 'train_samples_per_second': 1.456, 'train_steps_per_second': 0.01, 'train_loss': 0.21743224561214447, 'epoch': 4.87}
***** train metrics *****
  epoch                    =      4.8727
  total_flos               = 196690429GF
  train_loss               =      0.2174
  train_runtime            =  0:50:11.39
  train_samples            =         877
  train_samples_per_second =       1.456
  train_steps_per_second   =        0.01
2025-03-04 10:05:16 - INFO - __main__ - *** Save model ***
[INFO|trainer.py:3942] 2025-03-04 10:05:22,588 >> Saving model checkpoint to /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2
[INFO|configuration_utils.py:423] 2025-03-04 10:05:22,601 >> Configuration saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/config.json
[INFO|configuration_utils.py:909] 2025-03-04 10:05:22,606 >> Configuration saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/generation_config.json
[INFO|modeling_utils.py:3048] 2025-03-04 10:07:00,681 >> The model is bigger than the maximum size per checkpoint (5GB) and is going to be split in 4 checkpoint shards. You can find where each parameters has been saved in the index located at /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/model.safetensors.index.json.
[INFO|tokenization_utils_base.py:2500] 2025-03-04 10:07:00,691 >> tokenizer config file saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/tokenizer_config.json
[INFO|tokenization_utils_base.py:2509] 2025-03-04 10:07:00,694 >> Special tokens file saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/special_tokens_map.json
[INFO|trainer.py:3942] 2025-03-04 10:07:07,328 >> Saving model checkpoint to /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2
[INFO|configuration_utils.py:423] 2025-03-04 10:07:07,338 >> Configuration saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/config.json
[INFO|configuration_utils.py:909] 2025-03-04 10:07:07,342 >> Configuration saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/generation_config.json
[INFO|modeling_utils.py:3048] 2025-03-04 10:08:40,441 >> The model is bigger than the maximum size per checkpoint (5GB) and is going to be split in 4 checkpoint shards. You can find where each parameters has been saved in the index located at /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/model.safetensors.index.json.
[INFO|tokenization_utils_base.py:2500] 2025-03-04 10:08:40,450 >> tokenizer config file saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/tokenizer_config.json
[INFO|tokenization_utils_base.py:2509] 2025-03-04 10:08:40,453 >> Special tokens file saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/special_tokens_map.json
events.out.tfevents.1741097705.cbcb27.umiacs.umd.edu.1479405.0: 100%|██████████| 7.93k/7.93k [00:00<00:00, 106kB/s]
tokenizer.json: 100%|██████████| 34.4M/34.4M [00:00<00:00, 53.8MB/s]0<01:03, 76.4MB/s]
tokenizer.model: 100%|██████████| 4.24M/4.24M [00:00<00:00, 35.2MB/s]<01:01, 78.5MB/s]
training_args.bin: 100%|██████████| 7.42k/7.42k [00:00<00:00, 149kB/s]01:17, 47.1MB/s]
model-00004-of-00004.safetensors: 100%|██████████| 3.67G/3.67G [02:04<00:00, 29.5MB/s]
model-00001-of-00004.safetensors: 100%|██████████| 4.90G/4.90G [02:25<00:00, 33.6MB/s]  93k [00:00<?, ?B/s]
model-00002-of-00004.safetensors: 100%|██████████| 4.95G/4.95G [02:31<00:00, 32.7MB/s]
model-00003-of-00004.safetensors: 100%|██████████| 4.96G/4.96G [02:31<00:00, 32.8MB/s]
Upload 8 LFS files: 100%|██████████| 8/8 [02:31<00:00, 18.96s/it]2:31<00:00, 44.4MB/s]
[INFO|configuration_utils.py:423] 2025-03-04 10:11:50,645 >> Configuration saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/config.json
[INFO|trainer.py:3942] 2025-03-04 10:11:56,394 >> Saving model checkpoint to /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2
[INFO|configuration_utils.py:423] 2025-03-04 10:11:56,404 >> Configuration saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/config.json
[INFO|configuration_utils.py:909] 2025-03-04 10:11:56,408 >> Configuration saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/generation_config.json
2025-03-04 10:11:48 - INFO - __main__ - Model saved to /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2
2025-03-04 10:11:50 - INFO - __main__ - Pushing to hub...
[INFO|modeling_utils.py:3048] 2025-03-04 10:13:39,977 >> The model is bigger than the maximum size per checkpoint (5GB) and is going to be split in 4 checkpoint shards. You can find where each parameters has been saved in the index located at /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/model.safetensors.index.json.
[INFO|tokenization_utils_base.py:2500] 2025-03-04 10:13:39,987 >> tokenizer config file saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/tokenizer_config.json
[INFO|tokenization_utils_base.py:2509] 2025-03-04 10:13:39,991 >> Special tokens file saved in /fs/cbcb-lab/heng/kz//gemma-2-9b-it/code/v3_10_3Rounds/ft_iter_2/special_tokens_map.json
2025-03-04 10:14:15 - INFO - __main__ - *** Training complete ***
