code = '''from z3 import Solver, DeclareSort, Function, ForAll, Exists, Implies, And, Not, BoolSort, Const\n\nPerson = DeclareSort(\"Person\")\nClubMember = DeclareSort(\"ClubMember\")\n\nPerform_Talent_Show = Function(\"Perform_Talent_Show\", Person, BoolSort())\nAttend_School_Events = Function(\"Attend_School_Events\", Person, BoolSort())\nEngaged_with_School_Events = Function(\"Engaged_with_School_Events\", Person, BoolSort())\nInactive_Disinterested = Function(\"Inactive_Disinterested\", Person, BoolSort())\nChaperone_Dance = Function(\"Chaperone_Dance\", Person, BoolSort())\nStudent = Function(\"Student\", Person, BoolSort())\n\nBonnie = Const(\"Bonnie\", Person)\n\nsolver = Solver()\n\n# Premises\n\nsolver.add(ForAll([p], Implies(ClubMember(p), (Perform_Talent_Show(p) or Inactive_Disinterested(p))))\nsolver.add(ForAll([p], Implies(ClubMember(p), (Attend_School_Events(p) and Engaged_with_School_Events(p)) or Inactive_Disinterested(p))))\nsolver.add(ForAll([p], Implies(ClubMember(p) and Chaperone_Dance(p), Not(Student(p)))))\nsolver.add(ForAll([p], Implies(ClubMember(p) and Inactive_Disinterested(p), Chaperone_Dance(p))))\nsolver.add(ForAll([p], Implies(And(Student(p), Young(p), Teenager(p), Wish_Academic_Advancement(p)), Student(p))))\nsolver.add(Implies(ClubMember(Bonnie), (Attend_School_Events(Bonnie) and Engaged_with_School_Events(Bonnie) and Student(Bonnie)) or (Not(Attend_School_Events(Bonnie)) and Not(Engaged_with_School_Events(Bonnie)) and Not(Student(Bonnie)))))\n\n\nconclusion = Perform_Talent_Show(Bonnie)\n\nsolver.push()\nsolver.add(Not(conclusion))\nresult1 = str(solver.check())\nsolver.pop()\n\nsolver.push()\nsolver.add(conclusion)\nresult2 = str(solver.check())\nsolver.pop()\n\nif result1 == \"unsat\":\n    print(\"The conclusion is necessarily true: Bonnie performs in school talent shows often. (True)\")\n    result = \"True\"\nelif result1 == \"sat\" and result2 == \"unsat\":\n    print(\"The conclusion is necessarily false: Bonnie does not perform in school talent shows often. (False)\")\n    result = \"False\"\nelif result1 == \"sat\" and result2 == \"sat\":\n    print(\"The conclusion is uncertain: It depends on additional unstated assumptions. (Uncertain)\")\n    result = \"Uncertain\"\nelse:\n    print(\"Unexpected result, possible logical error.\")\n    result = \"Error\"\n'''

exec(code)
