[
    {
        "premises": "People in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.",
        "conclusions": "Bonnie performs in school talent shows often.",
        "rationale": "from typing import Optional\n\nclass ClubMember:\n    def __init__(self,\n                 attends_school_events: Optional[bool] = None,\n                 is_student: Optional[bool] = None,\n                 performs_talent_shows: Optional[bool] = None,\n                 is_inactive: Optional[bool] = None,\n                 chaperones_dances: Optional[bool] = None,\n                 wishes_academic_careers: Optional[bool] = None):\n        self.attends_school_events = attends_school_events\n        self.is_student = is_student\n        self.performes_talent_shows = performs_talent_shows\n        self.is_inactive = is_inactive\n        self.chaperones_dances = chaperones_dances\n        self.wishes_academic_careers = wishes_academic_careers\n\ndef apply_premises(member: ClubMember) -> bool:\n    changed = False\n\n    # Premise 1: People in this club who perform in school talent shows often are very engaged with school events.\n    if member.performes_talent_shows is True and member.attends_school_events is not True:\n        member.attends_school_events = True\n        changed = True\n\n    # Premise 2: People in this club either perform in school talent shows often or are inactive and disinterested community members.\n    if member.performes_talent_shows is None and member.is_inactive is None:\n        member.performes_talent_shows = True\n        member.is_inactive = False\n        changed = True\n\n    # Premise 3: People in this club who chaperone high school dances are not students who attend the school.\n    if member.chaperones_dances is True and member.is_student is not False:\n        member.is_student = False\n        changed = True\n\n    # Premise 4: All people in this club who are inactive and disinterested members of their community chaperone high school dances.\n    if member.is_inactive is True and member.chaperones_dances is not True:\n        member.chaperones_dances = True\n        changed = True\n\n    # Premise 5: All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\n    if member.wishes_academic_careers is True and member.is_student is not True:\n        member.is_student = True\n        changed = True\n\n    # Premise 6: Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n    if member.name == \"Bonnie\":\n        if member.attends_school_events is None or member.is_student is None:\n            if member.attends_school_events is True and member.is_student is True:\n                member.performes_talent_shows = True\n                member.is_inactive = False\n                changed = True\n            elif member.attends_school_events is False and member.is_student is False:\n                member.performes_talent_shows = False\n                member.is_inactive = True\n                changed = True\n\n    return changed\n\ndef run_inference(member: ClubMember):\n    while apply_premises(member):\n        pass\n\ndef check_conclusion(member: ClubMember) -> str:\n    run_inference(member)\n    if member.performes_talent_shows is True:\n        return \"True\"\n    elif member.performes_talent_shows is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    member = ClubMember(name=\"Bonnie\")\n    return check_conclusion(member)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Bonnie performs in school talent shows often?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPeople in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n</premises>\n<conclusion>\nBonnie performs in school talent shows often.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Bonnie performs in school talent shows often.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "People in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.",
        "conclusions": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_student: Optional[bool] = None,\n                 attends_school_events: Optional[bool] = None,\n                 chaperones_dances: Optional[bool] = None,\n                 is_young_child_or_teenager: Optional[bool] = None,\n                 wishes_to_further_academic_opportunities: Optional[bool] = None):\n        self.is_student = is_student\n        self.attends_school_events = attends_school_events\n        self.chaperones_dances = chaperones_dances\n        self.is_young_child_or_teenager = is_young_child_or_teenager\n        self.wishes_to_further_academic_opportunities = wishes_to_further_academic_opportunities\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: People in this club who perform in school talent shows often attend and are very engaged with school events.\n    if person.chaperones_dances is None and person.wishes_to_further_academic_opportunities is None:\n        person.chaperones_dances = False\n        person.wishes_to_further_academic_opportunities = False\n        changed = True\n\n    # Premise 2: People in this club either perform in school talent shows often or are inactive and disinterested community members.\n    if person.is_student is None and person.attends_school_events is None and person.chaperones_dances is False and person.wishes_to_further_academic_opportunities is False:\n        person.is_student = False\n        person.attends_school_events = False\n        changed = True\n\n    # Premise 3: People in this club who chaperone high school dances are not students who attend the school.\n    if person.chaperones_dances is True and person.is_student is not False:\n        person.is_student = False\n        changed = True\n\n    # Premise 4: All people in this club who are inactive and disinterested members of their community chaperone high school dances.\n    if person.is_student is False and person.chaperones_dances is not True:\n        person.chaperones_dances = True\n        changed = True\n\n    # Premise 5: All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\n    if person.is_student is None and person.is_young_child_or_teenager is True and person.wishes_to_further_academic_opportunities is True:\n        person.is_student = True\n        person.attends_school_events = True\n        changed = True\n\n    # Premise 6: Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n    if person.name == \"Bonnie\":\n        if person.attends_school_events is None and person.is_student is None:\n            if person.chaperones_dances is True and person.wishes_to_further_academic_opportunities is True:\n                person.attends_school_events = True\n                person.is_student = True\n            elif person.chaperones_dances is False and person.wishes_to_further_academic_opportunities is False:\n                person.attends_school_events = False\n                person.is_student = False\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n    if person.name == \"Bonnie\":\n        if (person.is_young_child_or_teenager is True and person.wishes_to_further_academic_opportunities is True and person.chaperones_dances is True) or (person.is_young_child_or_teenager is False and person.wishes_to_further_academic_opportunities is False):\n            if person.is_student is not None and person.is_student is True or person.is_student is False:\n                return \"True\"\n            elif person.is_student is None:\n                return \"Uncertain\"\n            else:\n                return \"False\"\n    return \"Uncertain\"\n\ndef func():\n    person = Person(\n        is_student=None,\n        attends_school_events=None,\n        chaperones_dances=None,\n        is_young_child_or_teenager=None,\n        wishes_to_further_academic_opportunities=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPeople in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n</premises>\n<conclusion>\nIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "People in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.",
        "conclusions": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
        "rationale": "from typing import Optional\n\nclass Bonnie:\n    def __init__(self,\n                 attends_and_engaged: Optional[bool] = None,\n                 is_student: Optional[bool] = None,\n                 chaperones_dances: Optional[bool] = None,\n                 performs_talent_shows: Optional[bool] = None,\n                 is_child_or Teenager: Optional[bool] = None,\n                 wishes_to_further_academic_opportunities: Optional[bool] = None,\n                 is_inactive_disinterested: Optional[bool] = None):\n        self.attends_and_engaged = attends_and_engaged\n        self.is_student = is_student\n        self.chaperones_dances = chaperones_dances\n        self.performs_talent_shows = performs_talent_shows\n        self.is_child_or_Teenager = is_child_or_Teenager\n        self.wishes_to_further_academic_opportunities = wishes_to_further_academic_opportunities\n        self.is_inactive_disinterested = is_inactive_disinterested\n\ndef apply_premises(bonnie: Bonnie) -> bool:\n    changed = False\n\n    # Premise 1: People in this club who perform in school talent shows often attend and are very engaged with school events.\n    if bonnie.performs_talent_shows is True and (bonnie.attends_and_engaged is None or bonnie.is_student is None):\n        bonnie.attends_and_engaged = True\n        bonnie.is_student = True\n        changed = True\n\n    # Premise 2: People in this club either perform in school talent shows often or are inactive and disinterested community members.\n    if bonnie.chaperones_dances is None and bonnie.performs_talent_shows is None:\n        bonnie.chaperones_dances = False\n        bonnie.performs_talent_shows = True\n        changed = True\n\n    # Premise 3: People in this club who chaperone high school dances are not students who attend the school.\n    if bonnie.chaperones_dances is True and bonnie.is_student is not False:\n        bonnie.is_student = False\n        changed = True\n\n    # Premise 4: All people in this club who are inactive and disinterested members of their community chaperone high school dances.\n    if bonnie.is_inactive_disinterested is True and bonnie.chaperones_dances is not True:\n        bonnie.chaperones_dances = True\n        changed = True\n\n    # Premise 5: All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\n    if bonnie.is_child_or_Teenager is True and bonnie.wishes_to_further_academic_opportunities is True and bonnie.is_student is not True:\n        bonnie.is_student = True\n        changed = True\n\n    # Premise 6: Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n    if bonnie.name == \"Bonnie\":\n        if bonnie.attends_and_engaged is None or bonnie.is_student is None:\n            bonnie.attends_and_engaged = True\n            bonnie.is_student = True\n            changed = True\n        elif bonnie.attends_and_engaged is False and bonnie.is_student is False:\n            bonnie.attends_and_engaged = False\n            bonnie.is_student = False\n            changed = True\n\n    return changed\n\ndef run_inference(bonnie: Bonnie):\n    while apply_premises(bonnie):\n        pass\n\ndef check_conclusion(bonnie: Bonnie) -> str:\n    run_inference(bonnie)\n    # Conclusion: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\n    if bonnie.chaperones_dances is True or (bonnie.chaperones_dances is False and bonnie.performs_talent_shows is True):\n        if bonnie.is_child_or_Teenager is True and bonnie.wishes_to_further_academic_opportunities is True and bonnie.is_inactive_disinterested is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    bonnie = Bonnie(\n        attends_and_engaged=None,\n        is_student=None,\n        chaperones_dances=None,\n        performs_talent_shows=None,\n        is_child_or_Teenager=None,\n        wishes_to_further_academic_opportunities=None,\n        is_inactive_disinterested=None\n    )\n    return check_conclusion(bonnie)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPeople in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n</premises>\n<conclusion>\nIf Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.",
        "conclusions": "James has lunch in the company.",
        "rationale": "from typing import Optional\n\nclass Employee:\n    def __init__(self, is_manager: Optional[bool] = None, lunch_location: Optional[str] = None, is_remote: Optional[bool] = None):\n        self.is_manager = is_manager\n        self.lunch_location = lunch_location\n        self.is_remote = is_remote\n\ndef apply_premises(employee: Employee) -> bool:\n    changed = False\n\n    # Premise 1: All employees who schedule a meeting with their customers will go to the company building today.\n    if employee.lunch_location is None and employee.is_remote is None:\n        employee.lunch_location = \"company\"\n        employee.is_remote = False\n        changed = True\n\n    # Premise 2: Everyone who has lunch in the company building schedules meetings with their customers.\n    if employee.lunch_location == \"company\" and employee.is_remote is None:\n        employee.is_remote = False\n        changed = True\n\n    # Premise 3: Employees have lunch either in the company building or at home.\n    if employee.lunch_location is None:\n        employee.lunch_location = \"home\"\n        changed = True\n\n    # Premise 4: If an employee has lunch at home, they are working remotely from home.\n    if employee.lunch_location == \"home\" and employee.is_remote is None:\n        employee.is_remote = True\n        changed = True\n\n    # Premise 5: All employees who are in other countries work remotely from home.\n    # This premise does not affect the lunch location directly.\n    # No managers work remotely from home.\n    if employee.is_manager is True and employee.is_remote is not False:\n        employee.is_remote = False\n        changed = True\n\n    # Premise 6: James will appear in the company today if and only if he is a manager.\n    if employee.name == \"James\" and employee.is_manager is None:\n        employee.is_manager = True\n        changed = True\n\n    return changed\n\ndef run_inference(employee: Employee):\n    while apply_premises(employee):\n        pass\n\ndef check_conclusion(employee: Employee) -> str:\n    run_inference(employee)\n    if employee.name == \"James\" and employee.lunch_location == \"company\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    employee = Employee(name=\"James\", is_manager=None, lunch_location=None, is_remote=None)\n    return check_conclusion(employee)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James has lunch in the company?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.\n</premises>\n<conclusion>\nJames has lunch in the company.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? James has lunch in the company.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.",
        "conclusions": "James does not have lunch in the company.",
        "rationale": "from typing import Optional\n\nclass Employee:\n    def __init__(self,\n                 is_manager: Optional[bool] = None,\n                 lunch_location: Optional[str] = None,\n                 in_company_today: Optional[bool] = None):\n        self.is_manager = is_manager\n        self.lunch_location = lunch_location\n        self.in_company_today = in_company_today\n\ndef apply_premises(employee: Employee) -> bool:\n    changed = False\n\n    # Premise 1: All employees who schedule a meeting with their customers will go to the company building today.\n    # Premise 2: Everyone who has lunch in the company building schedules meetings with their customers.\n    # Premise 3: Employees have lunch either in the company building or at home.\n    # Premise 4: If an employee has lunch at home, they are working remotely from home.\n    # Premise 5: All employees who are in other countries work remotely from home.\n    # Premise 6: No managers work remotely from home.\n    # Premise 7: James will appear in the company today if and only if he is a manager.\n\n    if employee.lunch_location is None and employee.in_company_today is None and employee.is_manager is None:\n        if employee.is_manager is None:\n            employee.is_manager = False\n            changed = True\n        if employee.lunch_location is None:\n            if employee.is_manager:\n                employee.lunch_location = \"company building\"\n                changed = True\n            else:\n                employee.lunch_location = \"home\"\n                changed = True\n        if employee.in_company_today is None:\n            if employee.is_manager:\n                employee.in_company_today = True\n                changed = True\n            else:\n                employee.in_company_today = False\n                changed = True\n\n    return changed\n\ndef run_inference(employee: Employee):\n    while apply_premises(employee):\n        pass\n\ndef check_conclusion(employee: Employee) -> str:\n    run_inference(employee)\n    if employee.lunch_location == \"company building\":\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    employee = Employee(\n        is_manager=None,\n        lunch_location=None,\n        in_company_today=None\n    )\n    return check_conclusion(employee)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James does not have lunch in the company?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.\n</premises>\n<conclusion>\nJames does not have lunch in the company.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? James does not have lunch in the company.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.",
        "conclusions": "If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]",
        "rationale": "from typing import Optional\n\nclass Employee:\n    def __init__(self,\n                 is_manager: Optional[bool] = None,\n                 is_in_other_countries: Optional[bool] = None,\n                 lunch_location: Optional[str] = None,\n                 working_remotely: Optional[bool] = None):\n        self.is_manager = is_manager\n        self.is_in_other_countries = is_in_other_countries\n        self.lunch_location = lunch_location\n        self.working_remotely = working_remotely\n\ndef apply_premises(employee: Employee) -> bool:\n    changed = False\n\n    # Premise 1: All employees who schedule a meeting with their customers will go to the company building today.\n    # Everyone who has lunch in the company building schedules meetings with their customers.\n    if employee.lunch_location == \"company building\":\n        if employee.working_remotely is not False:\n            employee.working_remotely = False\n            changed = True\n\n    # Premise 2: Employees have lunch either in the company building or at home.\n    # If an employee has lunch at home, they are working remotely from home.\n    if employee.lunch_location == \"home\":\n        if employee.working_remotely is not True:\n            employee.working_remotely = True\n            changed = True\n\n    # Premise 3: All employees who are in other countries work remotely from home.\n    if employee.is_in_other_countries is True and employee.working_remotely is not True:\n        employee.working_remotely = True\n        changed = True\n\n    # Premise 4: No managers work remotely from home.\n    if employee.is_manager is True and employee.working_remotely is True:\n        employee.working_remotely = False\n        changed = True\n\n    # Premise 5: James will appear in the company today if and only if he is a manager.\n    if employee.name == \"James\":\n        if employee.is_manager is None:\n            employee.is_manager = False\n            changed = True\n\n    return changed\n\ndef run_inference(employee: Employee):\n    while apply_premises(employee):\n        pass\n\ndef check_conclusion(employee: Employee) -> str:\n    run_inference(employee)\n    # Conclusion: If James is either a manager or in other countries, then James does not either has lunch at home or work remotely from home.\n    # If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries.\n    if (employee.is_manager or employee.is_in_other_countries) and (employee.lunch_location == \"home\" or employee.working_remotely):\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    employee = Employee(\n        is_manager=None,\n        is_in_other_countries=None,\n        lunch_location=None,\n        working_remotely=None\n    )\n    return check_conclusion(employee)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If James is either a manager or in other countries, then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries.\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.\n</premises>\n<conclusion>\nIf James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "When the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.",
        "conclusions": "There is an animal.",
        "rationale": "from typing import Optional\n\nclass Being:\n    def __init__(self,\n                 can_get_monkeypox: Optional[bool] = None,\n                 is_animal: Optional[bool] = None):\n        self.can_get_monkeypox = can_get_monkeypox\n        self.is_animal = is_animal\n\nclass Virus:\n    def __init__(self,\n                 name: str,\n                 can_occur_in_beings: Optional[bool] = None,\n                 can_occur_in_animals: Optional[bool] = None):\n        self.name = name\n        self.can_occur_in_beings = can_get_monkeypox\n        self.can_occur_in_animals = can_occur_in_animals\n\nclass Animal:\n    def __init__(self,\n                 is_animal: Optional[bool] = None):\n        self.is_animal = is_animal\n\ndef apply_premises(being: Being, virus: Virus, animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: When the Monkeypox virus occurs in a being, it may get Monkeypox.\n    # This is a conditional statement and does not directly provide information about the existence of animals.\n    if being.can_get_monkeypox is None:\n        being.can_get_monkeypox = True\n        changed = True\n\n    # Premise 2: Monkeypox virus can occur in certain animals.\n    if virus.name == \"Monkeypox\" and virus.can_occur_in_animals is None:\n        virus.can_occur_in_animals = True\n        changed = True\n\n    # Premise 3: Humans are mammals.\n    # This establishes that humans are a subset of mammals.\n    if being.name == \"Humans\" and being.is_animal is None:\n        being.is_animal = True\n        changed = True\n\n    # Premise 4: Mammals are animals.\n    # This establishes that mammals are a subset of animals.\n    if animal.name == \"Mammals\" and animal.is_animal is None:\n        animal.is_animal = True\n        changed = True\n\n    # Premise 5: Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness.\n    # This is a descriptive statement and does not directly provide information about the existence of animals.\n    if being.can_get_monkeypox is True and being.is_animal is None:\n        being.is_animal = True\n        changed = True\n\n    # Premise 6: People feel tired when they get the flu.\n    # This is a descriptive statement and does not directly provide information about the existence of animals.\n    if being.is_animal is None:\n        being.is_animal = True\n        changed = True\n\n    return changed\n\ndef run_inference(being: Being, virus: Virus, animal: Animal):\n    while apply_premises(being, virus, animal):\n        pass\n\ndef check_conclusion(being: Being, virus: Virus, animal: Animal) -> str:\n    run_inference(being, virus, animal)\n    # Conclusion: There is an animal.\n    if animal.is_animal is True:\n        return \"True\"\n    elif animal.is_animal is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Premises provided\n    being = Being(can_get_monkeypox=None, is_animal=None)\n    virus = Virus(name=\"Monkeypox\", can_occur_in_beings=None, can_occur_in_animals=None)\n    animal = Animal(is_animal=None)\n    return check_conclusion(being, virus, animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: There is an animal?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nWhen the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.\n</premises>\n<conclusion>\nThere is an animal.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? There is an animal.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "When the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.",
        "conclusions": "No one gets the flu.",
        "rationale": "from typing import Optional\n\nclass Being:\n    def __init__(self, has_monkeypox: Optional[bool] = None, is_mammal: Optional[bool] = None):\n        self.has_monkeypox = has_monkeypox\n        self.is_mammal = is_mammal\n\nclass Virus:\n    def __init__(self, name: str, can_occur_in_beings: Optional[bool] = None):\n        self.name = name\n        self.can_occur_in_beings = can_occur_in_beings\n\nclass Flu:\n    def __init__(self, name: str, causes_tiredness: Optional[bool] = None):\n        self.name = name\n        self.causes_tiredness = causes_tiredness\n\nclass Person(Being):\n    def __init__(self, has_flu: Optional[bool] = None):\n        super().__init__()\n        self.has_flu = has_flu\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: When the Monkeypox virus occurs in a being, it may get Monkeypox.\n    # Premise 2: Monkeypox virus can occur in certain animals.\n    # Premise 3: Humans are mammals.\n    # Premise 4: Mammals are animals.\n    # These premises do not directly affect the flu, so no changes are made.\n\n    # Premise 5: Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness.\n    # Premise 6: People feel tired when they get the flu.\n    # This premise suggests that if someone gets the flu, they can feel tired.\n\n    if person.has_flu is None:\n        person.has_flu = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.has_flu is False:\n        return \"True\"\n    elif person.has_flu is True:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person()\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No one gets the flu?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nWhen the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.\n</premises>\n<conclusion>\nNo one gets the flu.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? No one gets the flu.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "When the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.",
        "conclusions": "Symptoms of Monkeypox include coughing.",
        "rationale": "from typing import Optional\n\nclass Being:\n    def __init__(self,\n                 has_monkeypox: Optional[bool] = None,\n                 is_mammal: Optional[bool] = None,\n                 is_animal: Optional[bool] = None):\n        self.has_monkeypox = has_monkeypox\n        self.is_mammal = is_mammal\n        self.is_animal = is_animal\n\nclass Virus:\n    def __init__(self,\n                 name: str,\n                 can_occur_in_being: Optional[bool] = None):\n        self.name = name\n        self.can_occur_in_being = can_occur_in_being\n\nclass MonkeypoxVirus(Virus):\n    def __init__(self):\n        super().__init__(name=\"Monkeypox virus\")\n\nclass Symptom:\n    def __init__(self,\n                 name: str,\n                 included_in_monkeypox: Optional[bool] = None):\n        self.name = name\n        self.included_in_monkeypox = included_in_monkeypox\n\nclass Fever(Symptom):\n    def __init__(self):\n        super().__init__(name=\"fever\")\n\nclass Headache(Symptom):\n    def __init__(self):\n        super().__init__(name=\"headache\")\n\nclass MusclePain(Symptom):\n    def __init__(self):\n        super().__init__(name=\"muscle pains\")\n\nclass Tiredness(Symptom):\n    def __init__(self):\n        super().__init__(name=\"tiredness\")\n\nclass Cough(Symptom):\n    def __init__(self):\n        super().__init__(name=\"coughing\")\n\ndef apply_premises(being: Being, virus: MonkeypoxVirus, symptoms: [Symptom]):\n    changed = False\n\n    # Premise 1: When the Monkeypox virus occurs in a being, it may get Monkeypox.\n    if virus.can_occur_in_being is True and being.has_monkeypox is not True:\n        being.has_monkeypox = True\n        changed = True\n\n    # Premise 2: Monkeypox virus can occur in certain animals.\n    if virus.can_occur_in_being is True and being.is_animal is not True:\n        being.is_animal = True\n        changed = True\n\n    # Premise 3: Humans are mammals.\n    if being.name == \"Humans\" and being.is_mammal is not True:\n        being.is_mammal = True\n        changed = True\n\n    # Premise 4: Mammals are animals.\n    if being.is_mammal is True and being.is_animal is not True:\n        being.is_animal = True\n        changed = True\n\n    # Premise 5: Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness.\n    for symptom in symptoms:\n        if symptom.name == \"fever\" and symptom.included_in_monkeypox is not True:\n            symptom.included_in_monkeypox = True\n            changed = True\n        elif symptom.name == \"headache\" and symptom.included_in_monkeypox is not True:\n            symptom.included_in_monkeypox = True\n            changed = True\n        elif symptom.name == \"muscle pains\" and symptom.included_in_monkeypox is not True:\n            symptom.included_in_monkeypox = True\n            changed = True\n        elif symptom.name == \"tiredness\" and symptom.included_in_monkeypox is not True:\n            symptom.included_in_monkeypox = True\n            changed = True\n\n    return changed\n\ndef run_inference(being: Being, virus: MonkeypoxVirus, symptoms: [Symptom]):\n    while apply_premises(being, virus, symptoms):\n        pass\n\ndef check_conclusion(being: Being, virus: MonkeypoxVirus, symptoms: [Symptom]) -> str:\n    run_inference(being, virus, symptoms)\n    for symptom in symptoms:\n        if symptom.name == \"coughing\" and symptom.included_in_monkeypox is not True:\n            return \"False\"\n    return \"Uncertain\"\n\ndef func():\n    being = Being(name=\"Humans\", has_monkeypox=None, is_mammal=None, is_animal=None)\n    virus = MonkeypoxVirus()\n    symptoms = [\n        Fever(),\n        Headache(),\n        MusclePain(),\n        Tiredness(),\n        Cough()\n    ]\n    return check_conclusion(being, virus, symptoms)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Symptoms of Monkeypox include coughing?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nWhen the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.\n</premises>\n<conclusion>\nSymptoms of Monkeypox include coughing.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Symptoms of Monkeypox include coughing.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.",
        "conclusions": "Tom is an Ocellated wild turkey.",
        "rationale": "from typing import Optional\n\nclass WildTurkey:\n    def __init__(self, species: Optional[str] = None):\n        self.species = species\n\ndef apply_premises(tom: WildTurkey) -> bool:\n    changed = False\n\n    # Premise 1: There are six types of wild turkeys.\n    # No need to explicitly set species to None here since it's not required for the logic.\n\n    # Premise 2: Tom is not an Eastern wild turkey.\n    if tom.species != \"Eastern wild turkey\":\n        changed = True\n\n    # Premise 3: Tom is not an Osceola wild turkey.\n    if tom.species != \"Osceola wild turkey\":\n        changed = True\n\n    # Premise 4: Tom is not a Gould\u2019s wild turkey.\n    if tom.species != \"Gould\u2019s wild turkey\":\n        changed = True\n\n    # Premise 5: Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\n    if tom.species != \"Merriam\u2019s wild turkey\" and tom.species != \"Rio Grande wild turkey\":\n        changed = True\n\n    # Premise 6: Tom is a wild turkey.\n    if tom.species is None:\n        tom.species = \"Ocellated wild turkey\"\n        changed = True\n\n    return changed\n\ndef run_inference(tom: WildTurkey):\n    while apply_premises(tom):\n        pass\n\ndef check_conclusion(tom: WildTurkey) -> str:\n    run_inference(tom)\n    # Conclusion: Tom is an Ocellated wild turkey.\n    if tom.species == \"Ocellated wild turkey\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    tom = WildTurkey()\n    return check_conclusion(tom)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is an Ocellated wild turkey?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThere are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.\n</premises>\n<conclusion>\nTom is an Ocellated wild turkey.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Tom is an Ocellated wild turkey.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.",
        "conclusions": "Tom is an Eastern wild turkey.",
        "rationale": "from typing import Optional\n\nclass WildTurkey:\n    def __init__(self, type: Optional[str] = None):\n        self.type = type\n\ndef apply_premises(tom: WildTurkey) -> bool:\n    changed = False\n\n    # Premise 1: There are six types of wild turkeys.\n    # This is a fact and does not change the state of Tom.\n\n    # Premise 2: Tom is not an Eastern wild turkey.\n    if tom.type == \"Eastern wild turkey\":\n        tom.type = None\n        changed = True\n\n    # Premise 3: Tom is not an Osceola wild turkey.\n    if tom.type == \"Osceola wild turkey\":\n        tom.type = None\n        changed = True\n\n    # Premise 4: Tom is not a Gould\u2019s wild turkey.\n    if tom.type == \"Gould\u2019s wild turkey\":\n        tom.type = None\n        changed = True\n\n    # Premise 5: Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\n    if tom.type == \"Merriam\u2019s wild turkey\" or tom.type == \"Rio Grande wild turkey\":\n        tom.type = None\n        changed = True\n\n    # Premise 6: Tom is a wild turkey.\n    if tom.type is None:\n        tom.type = \"Ocellated wild turkey\"\n        changed = True\n\n    return changed\n\ndef run_inference(tom: WildTurkey):\n    while apply_premises(tom):\n        pass\n\ndef check_conclusion(tom: WildTurkey) -> str:\n    run_inference(tom)\n    if tom.type == \"Eastern wild turkey\":\n        return \"True\"\n    elif tom.type != \"Eastern wild turkey\":\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    tom = WildTurkey()\n    return check_conclusion(tom)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is an Eastern wild turkey?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThere are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.\n</premises>\n<conclusion>\nTom is an Eastern wild turkey.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Tom is an Eastern wild turkey.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.",
        "conclusions": "Joey is a wild turkey.",
        "rationale": "from typing import Optional\n\nclass WildTurkey:\n    def __init__(self,\n                 is_eastern: Optional[bool] = None,\n                 is_osceola: Optional[bool] = None,\n                 is_goulds: Optional[bool] = None,\n                 is_merriams: Optional[bool] = None,\n                 is_riogrande: Optional[bool] = None,\n                 is_ocellated: Optional[bool] = None):\n        self.is_eastern = is_eastern\n        self.is_osceola = is_osceola\n        self.is_goulds = is_goulds\n        self.is_merriams = is_merriams\n        self.is_riogrande = is_riogrande\n        self.is_ocellated = is_ocellated\n\ndef apply_premises(turkey: WildTurkey) -> bool:\n    changed = False\n\n    # Premise 1: There are six types of wild turkeys.\n    # No action needed.\n\n    # Premise 2: Tom is not an Eastern wild turkey.\n    if turkey.is_eastern is None:\n        turkey.is_eastern = False\n        changed = True\n\n    # Premise 3: Tom is not an Osceola wild turkey.\n    if turkey.is_osceola is None:\n        turkey.is_osceola = False\n        changed = True\n\n    # Premise 4: Tom is not a Gould's wild turkey.\n    if turkey.is_goulds is None:\n        turkey.is_goulds = False\n        changed = True\n\n    # Premise 5: Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\n    if turkey.is_merriams is None:\n        turkey.is_merriams = False\n        changed = True\n    if turkey.is_riogrande is None:\n        turkey.is_riogrande = False\n        changed = True\n\n    # Premise 6: Tom is a wild turkey.\n    if turkey.is_eastern is False and turkey.is_osceola is False and turkey.is_goulds is False and turkey.is_merriams is False and turkey.is_riogrande is False and turkey.is_ocellated is None:\n        turkey.is_ocellated = True\n        changed = True\n\n    return changed\n\ndef run_inference(turkey: WildTurkey):\n    while apply_premises(turkey):\n        pass\n\ndef check_conclusion(turkey: WildTurkey) -> str:\n    run_inference(turkey)\n    # Conclusion: Joey is a wild turkey.\n    if turkey.is_eastern or turkey.is_osceola or turkey.is_goulds or turkey.is_merriams or turkey.is_riogrande or turkey.is_ocellated:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    turkey = WildTurkey()\n    return check_conclusion(turkey)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Joey is a wild turkey?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThere are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.\n</premises>\n<conclusion>\nJoey is a wild turkey.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Joey is a wild turkey.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "A Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.",
        "conclusions": "The Legend of Zelda is on the Top 10 list.",
        "rationale": "from typing import Optional\n\nclass Game:\n    def __init__(self, name: str, is_japanese_company: Optional[bool] = None, sold_more_than_one_million: Optional[bool] = None, top_10: Optional[bool] = None):\n        self.name = name\n        self.is_japanese_company = is_japanese_company\n        self.sold_more_than_one_million = sold_more_than_one_million\n        self.top_10 = top_10\n\ndef apply_premises(game: Game) -> bool:\n    changed = False\n\n    # Premise 1: A Japanese game company created the game the Legend of Zelda.\n    if game.name == \"The Legend of Zelda\":\n        if game.is_japanese_company is None:\n            game.is_japanese_company = True\n            changed = True\n\n    # Premise 2: All games on the Top 10 list are made by Japanese game companies.\n    # This premise doesn't directly update game attributes, but we use it for inference.\n\n    # Premise 3: If a game sells more than one million copies, then it will be included in the Top 10 list.\n    if game.name == \"The Legend of Zelda\" and game.sold_more_than_one_million is True:\n        if game.top_10 is None:\n            game.top_10 = True\n            changed = True\n\n    # Premise 4: The Legend of Zelda sold more than one million copies.\n    if game.name == \"The Legend of Zelda\" and game.sold_more_than_one_million is None:\n        game.sold_more_than_one_million = True\n        changed = True\n\n    return changed\n\ndef run_inference(game: Game):\n    while apply_premises(game):\n        pass\n\ndef check_conclusion(game: Game) -> str:\n    run_inference(game)\n    if game.name == \"The Legend of Zelda\":\n        if game.top_10 is True:\n            return \"True\"\n        elif game.top_10 is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    game = Game(\n        name=\"The Legend of Zelda\",\n        is_japanese_company=None,\n        sold_more_than_one_million=None,\n        top_10=None\n    )\n    return check_conclusion(game)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Legend of Zelda is on the Top 10 list?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nA Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.\n</premises>\n<conclusion>\nThe Legend of Zelda is on the Top 10 list.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The Legend of Zelda is on the Top 10 list.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "A Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.",
        "conclusions": "FIFA 22 is made by a Japanese video game company.",
        "rationale": "<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nA Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.\n</premises>\n<conclusion>\nFIFA 22 is made by a Japanese video game company.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? FIFA 22 is made by a Japanese video game company.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "A Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.",
        "conclusions": "The Legend of Zelda is not on the Top 10 list.",
        "rationale": "from typing import Optional\n\nclass Game:\n    def __init__(self,\n                 name: str,\n                 company: Optional[str] = None,\n                 sales: Optional[int] = None,\n                 top_10: Optional[bool] = None):\n        self.name = name\n        self.company = company\n        self.sales = sales\n        self.top_10 = top_10\n\ndef apply_premises(game: Game) -> bool:\n    changed = False\n\n    # Premise 1: A Japanese game company created the game the Legend of Zelda.\n    if game.name == \"the Legend of Zelda\":\n        if game.company is None:\n            game.company = \"Japanese game company\"\n            changed = True\n\n    # Premise 2: All games on the Top 10 list are made by Japanese game companies.\n    # This premise does not directly affect the game's top_10 status but is used for consistency.\n\n    # Premise 3: If a game sells more than one million copies, then it will be included in the Top 10 list.\n    if game.name == \"the Legend of Zelda\":\n        if game.sales is None and game.top_10 is None:\n            game.sales = 10000001  # more than one million copies\n            game.top_10 = True\n            changed = True\n\n    # Premise 4: The Legend of Zelda sold more than one million copies.\n    if game.name == \"the Legend of Zelda\":\n        if game.sales is None:\n            game.sales = 10000001  # more than one million copies\n            changed = True\n\n    return changed\n\ndef run_inference(game: Game):\n    while apply_premises(game):\n        pass\n\ndef check_conclusion(game: Game) -> str:\n    run_inference(game)\n    if game.name == \"the Legend of Zelda\":\n        if game.top_10 is None:\n            return \"Uncertain\"\n        if game.top_10 is False:\n            return \"True\"\n        else:\n            return \"False\"\n\ndef func():\n    game = Game(\n        name=\"the Legend of Zelda\",\n        company=None,\n        sales=None,\n        top_10=None\n    )\n    return check_conclusion(game)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Legend of Zelda is not on the Top 10 list?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nA Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.\n</premises>\n<conclusion>\nThe Legend of Zelda is not on the Top 10 list.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The Legend of Zelda is not on the Top 10 list.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All squares are four-sided.\nAll four-sided things are shapes. ",
        "conclusions": "All squares are shapes.",
        "rationale": "from typing import Optional\n\nclass Shape:\n    pass\n\nclass Square(Shape):\n    pass\n\nclass FourSided:\n    pass\n\ndef apply_premises(square: Square, four_sided: FourSided) -> bool:\n    changed = False\n\n    # Premise 1: All squares are four-sided.\n    if isinstance(square, Square) and not isinstance(square, FourSided):\n        square.__class__ = FourSided\n        changed = True\n\n    # Premise 2: All four-sided things are shapes.\n    if isinstance(four_sided, FourSided) and not isinstance(four_sided, Shape):\n        four_sided.__class__ = Shape\n        changed = True\n\n    return changed\n\ndef run_inference(square: Square, four_sided: FourSided):\n    while apply_premises(square, four_sided):\n        pass\n\ndef check_conclusion(square: Square) -> str:\n    run_inference(square, None)\n    if isinstance(square, Shape):\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    square = Square()\n    return check_conclusion(square)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: All squares are shapes?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll squares are four-sided.\nAll four-sided things are shapes. \n</premises>\n<conclusion>\nAll squares are shapes.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? All squares are shapes.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "Rockie is a turtle.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 name: str,\n                 is_cute: Optional[bool] = None,\n                 is_skittish: Optional[bool] = None,\n                 is_calm: Optional[bool] = None,\n                 spotted_near_campus: Optional[bool] = None,\n                 is_turtle: Optional[bool] = None,\n                 is_rabbit: Optional[bool] = None,\n                 is_squirrel: Optional[bool] = None):\n        self.name = name\n        self.is_cute = is_cute\n        self.is_skittish = is_skittish\n        self.is_calm = is_calm\n        self.spotted_near_campus = spotted_near_campus\n        self.is_turtle = is_turtle\n        self.is_rabbit = is_rabbit\n        self.is_squirrel = is_squirrel\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    if animal.is_rabbit is True and animal.is_cute is None:\n        animal.is_cute = True\n        changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # This does not give specific information about Rockie, so it does not change anything directly.\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    if animal.spotted_near_campus is True and (animal.is_rabbit is None and animal.is_squirrel is None):\n        animal.is_rabbit = True\n        animal.is_squirrel = True\n        changed = True\n\n    # Premise 4: If something is skittish, then it is not calm.\n    if animal.is_skittish is True and animal.is_calm is not False:\n        animal.is_calm = False\n        changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    if animal.is_squirrel is True and animal.is_skittish is None:\n        animal.is_skittish = True\n        changed = True\n\n    # Premise 6: Rockie can be spotted near the campus, and it is calm.\n    if animal.name == \"Rockie\" and animal.spotted_near_campus is None:\n        animal.spotted_near_campus = True\n        changed = True\n    if animal.name == \"Rockie\" and animal.is_calm is None:\n        animal.is_calm = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: Rockie is a turtle.\n    if animal.name == \"Rockie\":\n        if animal.is_turtle is True:\n            return \"True\"\n        elif animal.is_turtle is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    animal = Animal(\n        name=\"Rockie\",\n        is_cute=None,\n        is_skittish=None,\n        is_calm=None,\n        spotted_near_campus=None,\n        is_turtle=None,\n        is_rabbit=None,\n        is_squirrel=None\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rockie is a turtle?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</premises>\n<conclusion>\nRockie is a turtle.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Rockie is a turtle.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "Rockie is not a turtle.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 is_cute: Optional[bool] = None,\n                 is_skittish: Optional[bool] = None,\n                 is_calm: Optional[bool] = None,\n                 is_turtle: Optional[bool] = None,\n                 is_rabbit: Optional[bool] = None):\n        self.is_cute = is_cute\n        self.is_skittish = is_skittish\n        self.is_calm = is_calm\n        self.is_turtle = is_turtle\n        self.is_rabbit = is_rabbit\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    if animal.is_rabbit is True and animal.is_cute is not True:\n        animal.is_cute = True\n        changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # This does not provide specific information about Rockie, so it does not change the state.\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    if animal.is_rabbit is None and animal.is_turtle is None and animal.is_squirrel is None:\n        animal.is_rabbit = False\n        animal.is_turtle = False\n        animal.is_squirrel = True\n        changed = True\n\n    # Premise 4: If something is skittish, then it is not calm.\n    if animal.is_skittish is True and animal.is_calm is not False:\n        animal.is_calm = False\n        changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    if animal.is_squirrel is True and animal.is_skittish is not True:\n        animal.is_skittish = True\n        changed = True\n\n    # Premise 6: Rockie can be spotted near the campus, and it is calm.\n    if animal.name == \"Rockie\" and animal.is_calm is None:\n        animal.is_calm = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: Rockie is not a turtle.\n    if animal.is_turtle is None or animal.is_turtle is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    animal = Animal(\n        is_cute=None,\n        is_skittish=None,\n        is_calm=None,\n        is_turtle=None,\n        is_rabbit=None,\n        name=\"Rockie\"\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rockie is not a turtle?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</premises>\n<conclusion>\nRockie is not a turtle.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Rockie is not a turtle.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "Rockie is a turtle or cute.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, name: str, is_cute: Optional[bool] = None, is_skittish: Optional[bool] = None, is_turtle: Optional[bool] = None, is_calm: Optional[bool] = None):\n        self.name = name\n        self.is_cute = is_cute\n        self.is_skittish = is_skittish\n        self.is_turtle = is_turtle\n        self.is_calm = is_calm\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    if animal.name == \"Rockie\":\n        if animal.is_cute is None and animal.is_turtle is not True:\n            animal.is_cute = True\n            changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # This only tells us that at least one turtle can be spotted, but not Rockie specifically.\n    if animal.name == \"Rockie\":\n        if animal.is_turtle is None:\n            animal.is_turtle = True\n            changed = True\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    if animal.name == \"Rockie\":\n        if animal.is_cute is None and animal.is_turtle is None and animal.is_squirrel is None:\n            animal.is_squirrel = True\n            changed = True\n\n    # Premise 4: If something is skittish, then it is not calm.\n    if animal.name == \"Rockie\":\n        if animal.is_skittish is None and animal.is_calm is True:\n            animal.is_skittish = False\n            changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    if animal.name == \"Rockie\":\n        if animal.is_squirrel is True and animal.is_skittish is not True:\n            animal.is_skittish = True\n            changed = True\n\n    # Premise 6: Rockie can be spotted near the campus, and it is calm.\n    if animal.name == \"Rockie\":\n        if animal.is_calm is None:\n            animal.is_calm = True\n            changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: Rockie is a turtle or cute.\n    if animal.is_turtle is True or animal.is_cute is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    animal = Animal(\n        name=\"Rockie\",\n        is_cute=None,\n        is_skittish=None,\n        is_turtle=None,\n        is_calm=None\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rockie is a turtle or cute?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</premises>\n<conclusion>\nRockie is a turtle or cute.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Rockie is a turtle or cute.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 is_rabbit: Optional[bool] = None,\n                 is_turtle: Optional[bool] = None,\n                 is_squirrel: Optional[bool] = None,\n                 is_cute: Optional[bool] = None,\n                 is_skittish: Optional[bool] = None,\n                 is_calm: Optional[bool] = None):\n        self.is_rabbit = is_rabbit\n        self.is_turtle = is_turtle\n        self.is_squirrel = is_squirrel\n        self.is_cute = is_cute\n        self.is_skittish = is_skittish\n        self.is_calm = is_calm\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    if animal.is_rabbit is True and animal.is_cute is not True:\n        animal.is_cute = True\n        changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # This does not give us specific information about a particular turtle.\n    # We will use it later for inference.\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    if animal.is_rabbit is None and animal.is_squirrel is None and animal.is_turtle is not None:\n        animal.is_rabbit = False\n        animal.is_squirrel = False\n        changed = True\n\n    # Premise 4: If something is skittish, then it is not calm.\n    if animal.is_skittish is True and animal.is_calm is not False:\n        animal.is_calm = False\n        changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    if animal.is_squirrel is True and animal.is_skittish is not True:\n        animal.is_skittish = True\n        changed = True\n\n    # Premise 6: Rockie can be spotted near the campus, and it is calm.\n    if animal.name == \"Rockie\":\n        if animal.is_calm is None:\n            animal.is_calm = True\n            changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.\n    if animal.name != \"Rockie\":\n        return \"Uncertain\"\n    \n    if animal.is_turtle is not True and animal.is_squirrel is not True:\n        if animal.is_cute is None or animal.is_skittish is None:\n            return \"Uncertain\"\n        if animal.is_cute is True or animal.is_skittish is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    # Initial conditions for Rockie.\n    animal = Animal(\n        is_rabbit=None,\n        is_turtle=None,\n        is_squirrel=None,\n        is_cute=None,\n        is_skittish=None,\n        is_calm=True,\n        name=\"Rockie\"\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</premises>\n<conclusion>\nIf Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "If Rockie is cute and calm, then Rockie is a skittish turtle.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, name: str, is_cute: Optional[bool] = None, is_skittish: Optional[bool] = None, is_turtle: Optional[bool] = None, is_calm: Optional[bool] = None):\n        self.name = name\n        self.is_cute = is_cute\n        self.is_skittish = is_skittish\n        self.is_turtle = is_turtle\n        self.is_calm = is_calm\n\ndef apply_premises(rockie: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    # Since Rockie can be spotted near the campus and it is calm, it cannot be a rabbit.\n    if rockie.is_calm is True and rockie.is_cute is None:\n        rockie.is_cute = False\n        changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # Since Rockie can be spotted near the campus, it could be a turtle.\n    if rockie.is_turtle is None:\n        rockie.is_turtle = True\n        changed = True\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    # Since Rockie is not a rabbit, it must be a squirrel or a turtle.\n    if rockie.is_cute is False and rockie.is_turtle is True and rockie.is_skittish is None:\n        rockie.is_skittish = True\n        changed = True\n\n    # Premise 4: If something is skittish, then it is not calm.\n    # Since Rockie is calm, it cannot be skittish.\n    if rockie.is_calm is True and rockie.is_skittish is not False:\n        rockie.is_skittish = False\n        changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    # Since Rockie is not a squirrel and it is calm, it cannot be a squirrel.\n    if rockie.is_turtle is False and rockie.is_cute is True and rockie.is_skittish is None:\n        rockie.is_skittish = False\n        changed = True\n\n    return changed\n\ndef run_inference(rockie: Animal):\n    while apply_premises(rockie):\n        pass\n\ndef check_conclusion(rockie: Animal) -> str:\n    run_inference(rockie)\n    if rockie.is_cute is True and rockie.is_calm is True:\n        if rockie.is_skittish is True and rockie.is_turtle is True:\n            return \"True\"\n        elif rockie.is_skittish is False or rockie.is_turtle is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    rockie = Animal(\n        name=\"Rockie\",\n        is_cute=None,\n        is_skittish=None,\n        is_turtle=None,\n        is_calm=True\n    )\n    return check_conclusion(rockie)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Rockie is cute and calm, then Rockie is a skittish turtle?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</premises>\n<conclusion>\nIf Rockie is cute and calm, then Rockie is a skittish turtle.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Rockie is cute and calm, then Rockie is a skittish turtle.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.",
        "conclusions": "Karen will share \"Stranger Things\" with Lisa.",
        "rationale": "from typing import Optional\n\nclass NetflixShow:\n    def __init__(self, name: str, is_popular: Optional[bool] = None, is_downloaded: Optional[bool] = None):\n        self.name = name\n        self.is_popular = is_popular\n        self.is_downloaded = is_downloaded\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 will_binge_watch: Optional[bool] = None,\n                 will_download: Optional[bool] = None,\n                 will_share: Optional[bool] = None):\n        self.name = name\n        self.will_binge_watch = will_binge_watch\n        self.will_download = will_download\n        self.will_share = will_share\n\ndef apply_premises(show: NetflixShow, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: \"Stranger Things\" is a popular Netflix show.\n    if show.name == \"Stranger Things\":\n        if show.is_popular is None:\n            show.is_popular = True\n            changed = True\n\n    # Premise 2: If a Netflix show is popular, Karen will binge-watch it.\n    if person.name == \"Karen\":\n        if show.is_popular is True and person.will_binge_watch is not True:\n            person.will_binge_watch = True\n            changed = True\n\n    # Premise 3: If and only if Karen binge-watches a Netflix show, she will download it.\n    if person.name == \"Karen\":\n        if person.will_binge_watch is True and person.will_download is not True:\n            person.will_download = True\n            changed = True\n        elif person.will_binge_watch is False and person.will_download is True:\n            person.will_download = False\n            changed = True\n\n    # Premise 4: Karen does not download \"Black Mirror.\"\n    if show.name == \"Black Mirror\":\n        if show.is_downloaded is None:\n            show.is_downloaded = False\n            changed = True\n\n    # Premise 5: \"Black Mirror\" is a Netflix show.\n    # No action needed as the premise is already given.\n\n    # Premise 6: If Karen binge-watches a Netflix show, she will share it with Lisa.\n    if person.name == \"Karen\":\n        if person.will_binge_watch is True and person.will_share is not True:\n            person.will_share = True\n            changed = True\n        elif person.will_binge_watch is False and person.will_share is True:\n            person.will_share = False\n            changed = True\n\n    return changed\n\ndef run_inference(show: NetflixShow, person: Person):\n    while apply_premises(show, person):\n        pass\n\ndef check_conclusion(show: NetflixShow, person: Person) -> str:\n    run_inference(show, person)\n    # Conclusion: Karen will share \"Stranger Things\" with Lisa.\n    if person.will_share is None or show.name != \"Stranger Things\":\n        return \"Uncertain\"\n    if person.will_share is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    show = NetflixShow(name=\"Stranger Things\", is_popular=None, is_downloaded=None)\n    person = Person(name=\"Karen\", will_binge_watch=None, will_download=None, will_share=None)\n    return check_conclusion(show, person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Karen will share 'Stranger Things' with Lisa?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\n\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.\n</premises>\n<conclusion>\nKaren will share \"Stranger Things\" with Lisa.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Karen will share \"Stranger Things\" with Lisa.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.",
        "conclusions": "\"Black Mirror\" is popular.",
        "rationale": "from typing import Optional\n\nclass Show:\n    def __init__(self, name: str, is_popular: Optional[bool] = None, is_netflix: Optional[bool] = None):\n        self.name = name\n        self.is_popular = is_popular\n        self.is_netflix = is_netflix\n\nclass Karen:\n    def __init__(self, will_binge_watch: Optional[bool] = None, will_download: Optional[bool] = None, will_share: Optional[bool] = None):\n        self.will_binge_watch = will_binge_watch\n        self.will_download = will_download\n        self.will_share = will_share\n\ndef apply_premises(show: Show, karen: Karen) -> bool:\n    changed = False\n\n    # Premise 1: \"Stranger Things\" is a popular Netflix show.\n    if show.name == \"Stranger Things\" and show.is_popular is None:\n        show.is_popular = True\n        changed = True\n    if show.name == \"Stranger Things\" and show.is_netflix is None:\n        show.is_netflix = True\n        changed = True\n\n    # Premise 2: If a Netflix show is popular, Karen will binge-watch it.\n    if show.is_popular is True and karen.will_binge_watch is None and show.is_netflix is True:\n        karen.will_binge_watch = True\n        changed = True\n\n    # Premise 3: If and only if Karen binge-watches a Netflix show, she will download it.\n    if karen.will_binge_watch is True and karen.will_download is None and show.is_netflix is True:\n        karen.will_download = True\n        changed = True\n\n    # Premise 4: Karen does not download \"Black Mirror.\"\n    if show.name == \"Black Mirror\" and karen.will_download is None:\n        karen.will_download = False\n        changed = True\n\n    # Premise 5: \"Black Mirror\" is a Netflix show.\n    if show.name == \"Black Mirror\" and show.is_netflix is None:\n        show.is_netflix = True\n        changed = True\n\n    # Premise 6: If Karen binge-watches a Netflix show, she will share it with Lisa.\n    if karen.will_binge_watch is True and karen.will_share is None and show.is_netflix is True:\n        karen.will_share = True\n        changed = True\n\n    return changed\n\ndef run_inference(show: Show, karen: Karen):\n    while apply_premises(show, karen):\n        pass\n\ndef check_conclusion(show: Show) -> str:\n    run_inference(show, karen)\n    # Conclusion: \"Black Mirror\" is popular.\n    if show.name == \"Black Mirror\":\n        if show.is_popular is True:\n            return \"True\"\n        elif show.is_popular is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    show = Show(name=\"Black Mirror\", is_popular=None, is_netflix=None)\n    karen = Karen(will_binge_watch=None, will_download=None, will_share=None)\n    return check_conclusion(show)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 'Black Mirror' is popular?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\n\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.\n</premises>\n<conclusion>\n\"Black Mirror\" is popular.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? \"Black Mirror\" is popular.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.",
        "conclusions": "Karen will share \"Black Mirror\" with Lisa.",
        "rationale": "from typing import Optional\n\nclass Show:\n    def __init__(self, name: str, is_netflix: Optional[bool] = None, is_popular: Optional[bool] = None):\n        self.name = name\n        self.is_netflix = is_netflix\n        self.is_popular = is_popular\n\nclass Karen:\n    def __init__(self, will_binge_watch: Optional[bool] = None, will_download: Optional[bool] = None, will_share_with_lisa: Optional[bool] = None):\n        self.will_binge_watch = will_binge_watch\n        self.will_download = will_download\n        self.will_share_with_lisa = will_share_with_lisa\n\ndef apply_premises(show: Show, karen: Karen) -> bool:\n    changed = False\n\n    # Premise 1: \"Stranger Things\" is a popular Netflix show.\n    if show.name == \"Stranger Things\":\n        if show.is_netflix is None:\n            show.is_netflix = True\n            changed = True\n        if show.is_popular is None:\n            show.is_popular = True\n            changed = True\n\n    # Premise 2: If a Netflix show is popular, Karen will binge-watch it.\n    if show.is_netflix is True and show.is_popular is True and karen.will_binge_watch is not True:\n        karen.will_binge_watch = True\n        changed = True\n\n    # Premise 3: If and only if Karen binge-watches a Netflix show, she will download it.\n    if karen.will_binge_watch is True and karen.will_download is not True:\n        karen.will_download = True\n        changed = True\n    if karen.will_binge_watch is False and karen.will_download is True:\n        karen.will_download = False\n        changed = True\n\n    # Premise 4: Karen does not download \"Black Mirror.\"\n    if show.name == \"Black Mirror\" and karen.will_download is True:\n        karen.will_download = False\n        changed = True\n    if show.name == \"Black Mirror\" and karen.will_download is not False:\n        changed = True\n\n    # Premise 5: \"Black Mirror\" is a Netflix show.\n    if show.name == \"Black Mirror\":\n        if show.is_netflix is None:\n            show.is_netflix = True\n            changed = True\n\n    # Premise 6: If Karen binge-watches a Netflix show, she will share it with Lisa.\n    if karen.will_binge_watch is True and karen.will_share_with_lisa is not True:\n        karen.will_share_with_lisa = True\n        changed = True\n\n    return changed\n\ndef run_inference(show: Show, karen: Karen):\n    while apply_premises(show, karen):\n        pass\n\ndef check_conclusion(show: Show, karen: Karen) -> str:\n    run_inference(show, karen)\n    if karen.will_share_with_lisa is True:\n        return \"True\"\n    elif karen.will_share_with_lisa is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    show = Show(name=\"Stranger Things\", is_netflix=None, is_popular=None)\n    show1 = Show(name=\"Black Mirror\", is_netflix=None, is_popular=None)\n    karen = Karen(will_binge_watch=None, will_download=None, will_share_with_lisa=None)\n    return check_conclusion(show1, karen)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Karen will share 'Black Mirror' with Lisa?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\n\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.\n</premises>\n<conclusion>\nKaren will share \"Black Mirror\" with Lisa.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Karen will share \"Black Mirror\" with Lisa.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Beijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.",
        "conclusions": "Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.",
        "rationale": "from typing import Optional\n\nclass Beijing:\n    def __init__(self,\n                 hosted_2008_summer_olympics: Optional[bool] = None,\n                 hosted_2008_winter_olympics: Optional[bool] = None):\n        self.hosted_2008_summer_olympics = hosted_2008_summer_olympics\n        self.hosted_2008_winter_olympics = hosted_2008_winter_olympics\n\ndef apply_premises(beijing: Beijing) -> bool:\n    changed = False\n\n    # Premise 4: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n    if beijing.hosted_2008_summer_olympics is None:\n        beijing.hosted_2008_summer_olympics = True\n        changed = True\n\n    # Premise 5: Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\n    if beijing.hosted_2008_winter_olympics is None:\n        beijing.hosted_2008_winter_olympics = False\n        changed = True\n\n    return changed\n\ndef run_inference(beijing: Beijing):\n    while apply_premises(beijing):\n        pass\n\ndef check_conclusion(beijing: Beijing) -> str:\n    run_inference(beijing)\n    if beijing.hosted_2008_summer_olympics and beijing.hosted_2008_winter_olympics:\n        return \"True\"\n    elif not beijing.hosted_2008_summer_olympics or not beijing.hosted_2008_winter_olympics:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    beijing = Beijing()\n    return check_conclusion(beijing)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beijing hosted both the 2008 Summer Olympics and the Winter Olympics?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBeijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.\n</premises>\n<conclusion>\nBeijing hosted both the 2008 Summer Olympics and the Winter Olympics.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Beijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.",
        "conclusions": "Beijing is located in southern China.",
        "rationale": "from typing import Optional\n\nclass Beijing:\n    def __init__(self, location: Optional[str] = None):\n        self.location = location\n\ndef apply_premises(beijing: Beijing) -> bool:\n    changed = False\n\n    # Premise 1: Beijing is the capital of the People's Republic of China.\n    # This does not affect the location.\n    \n    # Premise 2: Beijing is the capital city of the world's most populous nation.\n    # This does not affect the location.\n    \n    # Premise 3: Beijing is located in Northern China.\n    if beijing.location != \"Northern China\":\n        beijing.location = \"Northern China\"\n        changed = True\n    \n    # Premise 4: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n    # This does not affect the location.\n    \n    # Premise 5: Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\n    # This does not affect the location.\n    \n    # Premise 6: Many of Beijing's 91 universities consistently rank among the best universities in the world.\n    # This does not affect the location.\n    \n    return changed\n\ndef run_inference(beijing: Beijing):\n    while apply_premises(beijing):\n        pass\n\ndef check_conclusion(beijing: Beijing) -> str:\n    run_inference(beijing)\n    if beijing.location == \"Southern China\":\n        return \"True\"\n    elif beijing.location == \"Northern China\":\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    beijing = Beijing(location=None)\n    return check_conclusion(beijing)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beijing is located in southern China?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBeijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.\n</premises>\n<conclusion>\nBeijing is located in southern China.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Beijing is located in southern China.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Beijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.",
        "conclusions": "Beijing is the second largest Chinese city.",
        "rationale": "from typing import Optional\n\nclass City:\n    def __init__(self,\n                 name: str,\n                 is_capital: Optional[bool] = None,\n                 is_largest: Optional[bool] = None,\n                 is_in_northern_china: Optional[bool] = None,\n                 hosted_olympics: Optional[bool] = None,\n                 has_top_universities: Optional[bool] = None,\n                 is_second_largest: Optional[bool] = None):\n        self.name = name\n        self.is_capital = is_capital\n        self.is_largest = is_largest\n        self.is_in_northern_china = is_in_northern_china\n        self.hosted_olympics = hosted_olympics\n        self.has_top_universities = has_top_universities\n        self.is_second_largest = is_second_largest\n\ndef apply_premises(city: City) -> bool:\n    changed = False\n\n    # Premise 1: Beijing is the capital of the People's Republic of China.\n    if city.name == \"Beijing\":\n        if city.is_capital is None:\n            city.is_capital = True\n            changed = True\n\n    # Premise 2: Beijing is the capital city of the world's most populous nation.\n    # This premise does not directly affect the city's size.\n    if city.name == \"Beijing\":\n        if city.is_capital is None:\n            city.is_capital = True\n            changed = True\n\n    # Premise 3: Beijing is located in Northern China.\n    if city.name == \"Beijing\":\n        if city.is_in_northern_china is None:\n            city.is_in_northern_china = True\n            changed = True\n\n    # Premise 4: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n    if city.name == \"Beijing\":\n        if city.hosted_olympics is None:\n            city.hosted_olympics = True\n            changed = True\n\n    # Premise 5: Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\n    # This premise does not directly affect the city's size.\n    if city.name == \"Beijing\":\n        if city.hosted_olympics is None:\n            city.hosted_olympics = True\n            changed = True\n\n    # Premise 6: Many of Beijing's 91 universities consistently rank among the best universities in the world.\n    if city.name == \"Beijing\":\n        if city.has_top_universities is None:\n            city.has_top_universities = True\n            changed = True\n\n    return changed\n\ndef run_inference(city: City):\n    while apply_premises(city):\n        pass\n\ndef check_conclusion(city: City) -> str:\n    run_inference(city)\n    # Conclusion: Beijing is the second largest Chinese city.\n    if city.name == \"Beijing\":\n        if city.is_second_largest is None:\n            return \"Uncertain\"\n        else:\n            if city.is_second_largest:\n                return \"True\"\n            else:\n                return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    city = City(\n        name=\"Beijing\",\n        is_capital=None,\n        is_largest=None,\n        is_in_northern_china=None,\n        hosted_olympics=None,\n        has_top_universities=None,\n        is_second_largest=None\n    )\n    return check_conclusion(city)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beijing is the second largest Chinese city?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBeijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.\n</premises>\n<conclusion>\nBeijing is the second largest Chinese city.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Beijing is the second largest Chinese city.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.",
        "conclusions": "Marvin is an alien.",
        "rationale": "from typing import Optional\n\nclass Alien:\n    def __init__(self, is_from_mars: Optional[bool] = None, is_from_earth: Optional[bool] = None):\n        self.is_from_mars = is_from_mars\n        self.is_from_earth = is_from_earth\n\ndef apply_premises(alien: Alien) -> bool:\n    changed = False\n\n    # Premise 1: All aliens are extraterrestrials.\n    # This is a definition and does not change the state.\n    \n    # Premise 2: If someone is from Mars, then they are an alien.\n    if alien.is_from_mars is True and alien.is_from_earth is None:\n        alien.is_from_earth = False\n        changed = True\n\n    # Premise 3: No extraterrestrials are human.\n    # This is a definition and does not change the state.\n    \n    # Premise 4: All highly intelligent beings from Earth are humans.\n    # This is a definition and does not change the state.\n    \n    # Premise 5: Marvin is a highly intelligent being.\n    # This is a definition and does not change the state.\n    \n    # Premise 6: Marvin is either from Earth and from Mars, or he is from neither.\n    if alien.is_from_earth is None and alien.is_from_mars is None:\n        alien.is_from_earth = False\n        alien.is_from_mars = False\n        changed = True\n    elif alien.is_from_earth is True and alien.is_from_mars is True:\n        changed = True\n\n    # Premise 7: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n    if alien.is_from_earth is False and alien.is_from_mars is None:\n        alien.is_from_mars = True\n        changed = True\n    elif alien.is_from_earth is False and alien.is_from_mars is False:\n        alien.is_from_mars = True\n        changed = True\n\n    return changed\n\ndef run_inference(alien: Alien):\n    while apply_premises(alien):\n        pass\n\ndef check_conclusion(alien: Alien) -> str:\n    run_inference(alien)\n    if alien.is_from_mars is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    alien = Alien(is_from_mars=None, is_from_earth=None)\n    return check_conclusion(alien)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Marvin is an alien?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.\n</premises>\n<conclusion>\nMarvin is an alien.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Marvin is an alien.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.",
        "conclusions": "Marvin is neither a human nor from Mars.",
        "rationale": "from typing import Optional\n\nclass Being:\n    def __init__(self,\n                 is_from_earth: Optional[bool] = None,\n                 is_from_mars: Optional[bool] = None,\n                 is_human: Optional[bool] = None,\n                 is_extraterrestrial: Optional[bool] = None,\n                 is_highly_intelligent: Optional[bool] = None):\n        self.is_from_earth = is_from_earth\n        self.is_from_mars = is_from_mars\n        self.is_human = is_human\n        self.is_extraterrestrial = is_extraterrestrial\n        self.is_highly_intelligent = is_highly_intelligent\n\ndef apply_premises(being: Being) -> bool:\n    changed = False\n\n    # Premise 1: All aliens are extraterrestrials.\n    if being.is_highly_intelligent is True and being.is_from_earth is False and being.is_from_mars is False and being.is_extraterrestrial is not True:\n        being.is_extraterrestrial = True\n        changed = True\n\n    # Premise 2: If someone is from Mars, then they are an alien.\n    if being.is_from_mars is True and being.is_highly_intelligent is None:\n        being.is_highly_intelligent = True\n        changed = True\n\n    # Premise 3: No extraterrestrials are human.\n    if being.is_extraterrestrial is True and being.is_human is not False:\n        being.is_human = False\n        changed = True\n\n    # Premise 4: All highly intelligent beings from Earth are humans.\n    if being.is_from_earth is True and being.is_highly_intelligent is True and being.is_human is not True:\n        being.is_human = True\n        changed = True\n\n    # Premise 5: Marvin is a highly intelligent being.\n    if being.name == \"Marvin\" and being.is_highly_intelligent is None:\n        being.is_highly_intelligent = True\n        changed = True\n\n    # Premise 6: Marvin is either from Earth and from Mars, or he is from neither.\n    if being.name == \"Marvin\":\n        if being.is_from_earth is None and being.is_from_mars is None:\n            being.is_from_earth = False\n            being.is_from_mars = False\n            changed = True\n        if being.is_from_earth is True and being.is_from_mars is True:\n            changed = True\n\n    # Premise 7: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n    if being.name == \"Marvin\" and being.is_from_earth is False and being.is_extraterrestrial is not True:\n        being.is_extraterrestrial = True\n        changed = True\n\n    return changed\n\ndef run_inference(being: Being):\n    while apply_premises(being):\n        pass\n\ndef check_conclusion(being: Being) -> str:\n    run_inference(being)\n    # Conclusion: Marvin is neither a human nor from Mars.\n    if being.name == \"Marvin\":\n        if being.is_human is False and being.is_from_mars is False:\n            return \"True\"\n        elif being.is_human is True or being.is_from_mars is True:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    being = Being(\n        is_from_earth=None,\n        is_from_mars=None,\n        is_human=None,\n        is_extraterrestrial=None,\n        is_highly_intelligent=None,\n        name=\"Marvin\"\n    )\n    return check_conclusion(being)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Marvin is neither a human nor from Mars?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.\n</premises>\n<conclusion>\nMarvin is neither a human nor from Mars.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Marvin is neither a human nor from Mars.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.",
        "conclusions": "If Marvin is not from Mars, then Marvin is a human.",
        "rationale": "from typing import Optional\n\nclass Marvin:\n    def __init__(self,\n                 is_from_earth: Optional[bool] = None,\n                 is_from_mars: Optional[bool] = None,\n                 is_human: Optional[bool] = None,\n                 is_extraterrestrial: Optional[bool] = None,\n                 is_highly_intelligent: Optional[bool] = None):\n        self.is_from_earth = is_from_earth\n        self.is_from_mars = is_from_mars\n        self.is_human = is_human\n        self.is_extraterrestrial = is_extraterrestrial\n        self.is_highly_intelligent = is_highly_intelligent\n\ndef apply_premises(marvin: Marvin) -> bool:\n    changed = False\n\n    # Premise 1: All aliens are extraterrestrials.\n    if marvin.is_highly_intelligent is True and marvin.is_extraterrestrial is not True:\n        marvin.is_extraterrestrial = True\n        changed = True\n\n    # Premise 2: If someone is from Mars, then they are an alien.\n    if marvin.is_from_mars is True and marvin.is_highly_intelligent is None:\n        marvin.is_highly_intelligent = False\n        changed = True\n\n    # Premise 3: No extraterrestrials are human.\n    if marvin.is_extraterrestrial is True and marvin.is_human is not False:\n        marvin.is_human = False\n        changed = True\n\n    # Premise 4: All highly intelligent beings from Earth are humans.\n    if marvin.is_from_earth is True and marvin.is_highly_intelligent is True and marvin.is_human is not True:\n        marvin.is_human = True\n        changed = True\n\n    # Premise 5: Marvin is a highly intelligent being.\n    if marvin.is_highly_intelligent is None:\n        marvin.is_highly_intelligent = True\n        changed = True\n\n    # Premise 6: Marvin is either from Earth and from Mars, or he is from neither.\n    if marvin.is_from_earth is not None and marvin.is_from_mars is not None and (marvin.is_from_earth is True and marvin.is_from_mars is True or marvin.is_from_earth is False and marvin.is_from_mars is False):\n        changed = True\n\n    # Premise 7: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n    if marvin.is_from_earth is False and marvin.is_extraterrestrial is not True:\n        marvin.is_extraterrestrial = True\n        changed = True\n\n    return changed\n\ndef run_inference(marvin: Marvin):\n    while apply_premises(marvin):\n        pass\n\ndef check_conclusion(marvin: Marvin) -> str:\n    run_inference(marvin)\n    if marvin.is_from_mars is False and marvin.is_human is not True:\n        return \"False\"\n    elif marvin.is_from_mars is False and marvin.is_human is True:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    marvin = Marvin(\n        is_from_earth=None,\n        is_from_mars=None,\n        is_human=None,\n        is_extraterrestrial=None,\n        is_highly_intelligent=True\n    )\n    return check_conclusion(marvin)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Marvin is not from Mars, then Marvin is a human?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.\n</premises>\n<conclusion>\nIf Marvin is not from Mars, then Marvin is a human.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Marvin is not from Mars, then Marvin is a human.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.",
        "conclusions": "Djokovic is a Grand Slam champion.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_grand_slam_champion: Optional[bool] = None,\n                 is_oscar_nominated_actor: Optional[bool] = None,\n                 is_professional_tennis_player: Optional[bool] = None,\n                 is_celebrity: Optional[bool] = None,\n                 is_athlete: Optional[bool] = None,\n                 is_well_paid: Optional[bool] = None,\n                 is_famous: Optional[bool] = None,\n                 lives_in_tax_haven: Optional[bool] = None):\n        self.is_grand_slam_champion = is_grand_slam_champion\n        self.is_oscar_nominated_actor = is_oscar_nominated_actor\n        self.is_professional_tennis_player = is_professional_tennis_player\n        self.is_celebrity = is_celebrity\n        self.is_athlete = is_athlete\n        self.is_well_paid = is_well_paid\n        self.is_famous = is_famous\n        self.lives_in_tax_haven = lives_in_tax_haven\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\n    if person.is_grand_slam_champion is None and person.is_oscar_nominated_actor is None:\n        person.is_grand_slam_champion = True\n        person.is_oscar_nominated_actor = True\n        changed = True\n\n    # Premise 2: Every Grand Slam champion at the mixer is a professional tennis player.\n    if person.is_grand_slam_champion is True and person.is_professional_tennis_player is None:\n        person.is_professional_tennis_player = True\n        changed = True\n\n    # Premise 3: All Oscar-nominated actors at the mixer are celebrities.\n    if person.is_oscar_nominated_actor is True and person.is_celebrity is None:\n        person.is_celebrity = True\n        changed = True\n\n    # Premise 4: All professional tennis players at the mixer are athletes.\n    if person.is_professional_tennis_player is True and person.is_athlete is None:\n        person.is_athlete = True\n        changed = True\n\n    # Premise 5: If a person at the mixer is a celebrity, then they are well paid.\n    if person.is_celebrity is True and person.is_well_paid is None:\n        person.is_well_paid = True\n        changed = True\n\n    # Premise 6: If a person at the mixer is an athlete, then they are famous.\n    if person.is_athlete is True and person.is_famous is None:\n        person.is_famous = True\n        changed = True\n\n    # Premise 7: All well-paid people at the mixer live in tax havens.\n    if person.is_well_paid is True and person.lives_in_tax_haven is None:\n        person.lives_in_tax_haven = True\n        changed = True\n\n    # Premise 8: Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\n    if person.name == \"Djokovic\":\n        if person.is_famous is True and person.is_athlete is True and person.is_well_paid is None:\n            person.is_well_paid = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Djokovic\" and person.is_grand_slam_champion is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"Djokovic\",\n        is_grand_slam_champion=None,\n        is_oscar_nominated_actor=None,\n        is_professional_tennis_player=None,\n        is_celebrity=None,\n        is_athlete=None,\n        is_well_paid=None,\n        is_famous=None,\n        lives_in_tax_haven=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Djokovic is a Grand Slam champion?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nEveryone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\n</premises>\n<conclusion>\nDjokovic is a Grand Slam champion.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Djokovic is a Grand Slam champion.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.",
        "conclusions": "Djokovic lives in a tax haven.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_grand_slam_champion: Optional[bool] = None, is_oscar_nominated: Optional[bool] = None, is_professional_tennis_player: Optional[bool] = None, is_celebrity: Optional[bool] = None, is_athlete: Optional[bool] = None, is_well_paid: Optional[bool] = None, lives_in_tax_haven: Optional[bool] = None):\n        self.name = name\n        self.is_grand_slam_champion = is_grand_slam_champion\n        self.is_oscar_nominated = is_oscar_nominated\n        self.is_professional_tennis_player = is_professional_tennis_player\n        self.is_celebrity = is_celebrity\n        self.is_athlete = is_athlete\n        self.is_well_paid = is_well_paid\n        self.lives_in_tax_haven = lives_in_tax_haven\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\n    if person.name == \"Djokovic\":\n        if person.is_grand_slam_champion is None and person.is_oscar_nominated is None:\n            person.is_grand_slam_champion = True\n            person.is_oscar_nominated = True\n            changed = True\n\n    # Premise 2: Every Grand Slam champion at the mixer is a professional tennis player.\n    if person.name == \"Djokovic\" and person.is_grand_slam_champion is True:\n        if person.is_professional_tennis_player is None:\n            person.is_professional_tennis_player = True\n            changed = True\n\n    # Premise 3: All Oscar-nominated actors at the mixer are celebrities.\n    if person.name == \"Djokovic\" and person.is_oscar_nominated is True:\n        if person.is_celebrity is None:\n            person.is_celebrity = True\n            changed = True\n\n    # Premise 4: All professional tennis players at the mixer are athletes.\n    if person.name == \"Djokovic\" and person.is_professional_tennis_player is True:\n        if person.is_athlete is None:\n            person.is_athlete = True\n            changed = True\n\n    # Premise 5: If a person at the mixer is a celebrity, then they are well paid.\n    if person.name == \"Djokovic\" and person.is_celebrity is True:\n        if person.is_well_paid is None:\n            person.is_well_paid = True\n            changed = True\n\n    # Premise 6: If a person at the mixer is an athlete, then they are famous.\n    if person.name == \"Djokovic\" and person.is_athlete is True:\n        if person.is_famous is None:\n            person.is_famous = True\n            changed = True\n\n    # Premise 7: All well-paid people at the mixer live in tax havens.\n    if person.name == \"Djokovic\" and person.is_well_paid is True:\n        if person.lives_in_tax_haven is None:\n            person.lives_in_tax_haven = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.lives_in_tax_haven is True:\n        return \"True\"\n    elif person.lives_in_tax_haven is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Djokovic\",\n        is_grand_slam_champion=None,\n        is_oscar_nominated=None,\n        is_professional_tennis_player=None,\n        is_celebrity=None,\n        is_athlete=None,\n        is_well_paid=None,\n        lives_in_tax_haven=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Djokovic lives in a tax haven?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nEveryone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\n</premises>\n<conclusion>\nDjokovic lives in a tax haven.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Djokovic lives in a tax haven.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.",
        "conclusions": "Djokovic does not live in a tax haven.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_grand_slam_champion: Optional[bool] = None,\n                 is_oscar_nominated_actor: Optional[bool] = None,\n                 is_professional_tennis_player: Optional[bool] = None,\n                 is_celebrity: Optional[bool] = None,\n                 is_athlete: Optional[bool] = None,\n                 is_well_paid: Optional[bool] = None,\n                 lives_in_tax_haven: Optional[bool] = None):\n        self.name = name\n        self.is_grand_slam_champion = is_grand_slam_champion\n        self.is_oscar_nominated_actor = is_oscar_nominated_actor\n        self.is_professional_tennis_player = is_professional_tennis_player\n        self.is_celebrity = is_celebrity\n        self.is_athlete = is_athlete\n        self.is_well_paid = is_well_paid\n        self.lives_in_tax_haven = lives_in_tax_haven\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\n    if person.name == \"Djokovic\":\n        if person.is_grand_slam_champion is None:\n            person.is_grand_slam_champion = True\n            changed = True\n        if person.is_oscar_nominated_actor is None:\n            person.is_oscar_nominated_actor = True\n            changed = True\n\n    # Premise 2: Every Grand Slam champion at the mixer is a professional tennis player.\n    if person.name == \"Djokovic\" and person.is_grand_slam_champion is True:\n        if person.is_professional_tennis_player is None:\n            person.is_professional_tennis_player = True\n            changed = True\n\n    # Premise 3: All Oscar-nominated actors at the mixer are celebrities.\n    if person.name == \"Djokovic\" and person.is_oscar_nominated_actor is True:\n        if person.is_celebrity is None:\n            person.is_celebrity = True\n            changed = True\n\n    # Premise 4: All professional tennis players at the mixer are athletes.\n    if person.name == \"Djokovic\" and person.is_professional_tennis_player is True:\n        if person.is_athlete is None:\n            person.is_athlete = True\n            changed = True\n\n    # Premise 5: If a person at the mixer is a celebrity, then they are well paid.\n    if person.name == \"Djokovic\" and person.is_celebrity is True:\n        if person.is_well_paid is None:\n            person.is_well_paid = True\n            changed = True\n\n    # Premise 6: If a person at the mixer is an athlete, then they are famous.\n    if person.name == \"Djokovic\" and person.is_athlete is True:\n        if person.is_famous is None:\n            person.is_famous = True\n            changed = True\n\n    # Premise 7: All well-paid people at the mixer live in tax havens.\n    if person.name == \"Djokovic\" and person.is_well_paid is True:\n        if person.lives_in_tax_haven is None:\n            person.lives_in_tax_haven = True\n            changed = True\n\n    # Premise 8: If Djokovic is a famous athlete, then Djokovic is well-paid.\n    if person.name == \"Djokovic\" and person.is_famous is True and person.is_athlete is True:\n        if person.is_well_paid is None:\n            person.is_well_paid = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.lives_in_tax_haven is None:\n        return \"Uncertain\"\n    if person.lives_in_tax_haven is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"Djokovic\",\n        is_grand_slam_champion=None,\n        is_oscar_nominated_actor=None,\n        is_professional_tennis_player=None,\n        is_celebrity=None,\n        is_athlete=None,\n        is_well_paid=None,\n        lives_in_tax_haven=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Djokovic does not live in a tax haven?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nEveryone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\n</premises>\n<conclusion>\nDjokovic does not live in a tax haven.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Djokovic does not live in a tax haven.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Diamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.",
        "conclusions": "Roderick Strong leads a professional wrestling stable.",
        "rationale": "from typing import Optional\n\nclass Stable:\n    def __init__(self, name: str, leader: Optional[str] = None, includes: Optional[list] = None):\n        self.name = name\n        self.leader = leader\n        self.includes = includes\n\nclass Person:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises() -> bool:\n    changed = False\n    \n    # Premise 1: Diamond Mine is a professional wrestling stable formed in WWE.\n    diamond_mine = Stable(name=\"Diamond Mine\")\n    \n    # Premise 2: Roderick Strong leads Diamond Mine.\n    if diamond_mine.leader is None:\n        diamond_mine.leader = \"Roderick Strong\"\n        changed = True\n    \n    # Premise 3: Diamond Mine includes the Creed Brothers and Ivy Nile.\n    if diamond_mine.includes is None:\n        diamond_mine.includes = [\"Creed Brothers\", \"Ivy Nile\"]\n        changed = True\n    \n    # Premise 4: Imperium has a feud with Diamond Mine.\n    # This premise is not relevant to the conclusion.\n    \n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: Roderick Strong leads a professional wrestling stable.\n    if diamond_mine := Stable(name=\"Diamond Mine\"):\n        if diamond_mine.leader == \"Roderick Strong\":\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Roderick Strong leads a professional wrestling stable?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nDiamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.\n</premises>\n<conclusion>\nRoderick Strong leads a professional wrestling stable.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Roderick Strong leads a professional wrestling stable.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Diamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.",
        "conclusions": "Roderick Strong leads the Creed Brothers.",
        "rationale": "from typing import Optional\n\nclass Stable:\n    def __init__(self, name: str, leader: Optional[str] = None, members: list = []):\n        self.name = name\n        self.leader = leader\n        self.members = members\n\nclass Person:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises():\n    diamond_mine = Stable(\"Diamond Mine\", leader=None, members=[])\n    creed_brothers = Person(\"Creed Brothers\")\n    ivy_nile = Person(\"Ivy Nile\")\n    roderick_strong = Person(\"Roderick Strong\")\n    \n    # Premise 1: Diamond Mine is a professional wrestling stable formed in WWE.\n    diamond_mine.name = \"Diamond Mine\"\n    \n    # Premise 2: Roderick Strong leads Diamond Mine.\n    diamond_mine.leader = roderick_strong.name\n    \n    # Premise 3: Diamond Mine includes the Creed Brothers and Ivy Nile.\n    diamond_mine.members.append(creed_brothers.name)\n    diamond_mine.members.append(ivy_nile.name)\n    \n    # Premise 4: Imperium has a feud with Diamond Mine.\n    # This premise does not affect the relationship between Roderick Strong and the Creed Brothers.\n    \ndef check_conclusion():\n    apply_premises()\n    if roderick_strong.name == \"Roderick Strong\" and \"Creed Brothers\" in diamond_mine.members:\n        # Roderick Strong is the leader of Diamond Mine, and the Creed Brothers are a member.\n        # This does not necessarily mean that Roderick Strong leads the Creed Brothers.\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    global diamond_mine, roderick_strong\n    diamond_mine = None\n    roderick_strong = None\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Roderick Strong leads the Creed Brothers?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nDiamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.\n</premises>\n<conclusion>\nRoderick Strong leads the Creed Brothers.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Roderick Strong leads the Creed Brothers.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Diamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.",
        "conclusions": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
        "rationale": "from typing import Optional\n\nclass Stable:\n    def __init__(self, name: str, leader: str, members: list):\n        self.name = name\n        self.leader = leader\n        self.members = members\n\nclass Feud:\n    def __init__(self, group1: str, group2: str):\n        self.group1 = group1\n        self.group2 = group2\n\nclass Person:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Diamond Mine is a professional wrestling stable formed in WWE.\n    diamond_mine = Stable(name=\"Diamond Mine\", leader=\"Roderick Strong\", members=[\"Creed Brothers\", \"Ivy Nile\"])\n\n    # Premise 2: Roderick Strong leads Diamond Mine.\n    if diamond_mine.leader != \"Roderick Strong\":\n        diamond_mine.leader = \"Roderick Strong\"\n        changed = True\n\n    # Premise 3: Diamond Mine includes the Creed Brothers and Ivy Nile.\n    if diamond_mine.members != [\"Creed Brothers\", \"Ivy Nile\"]:\n        diamond_mine.members = [\"Creed Brothers\", \"Ivy Nile\"]\n        changed = True\n\n    # Premise 4: Imperium has a feud with Diamond Mine.\n    imperium_feud = Feud(group1=\"Imperium\", group2=\"Diamond Mine\")\n    if not hasattr(Feud, \"feuds\"):\n        Feud.feuds = []\n    Feud.feuds.append(imperium_feud)\n    changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    for feud in Feud.feuds:\n        if feud.group2 == \"Diamond Mine\" and \"Ivy Nile\" in feud.group1.split():\n            return \"False\"\n    return \"True\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nDiamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.\n</premises>\n<conclusion>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Symphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.",
        "conclusions": "Beethoven is a composer.",
        "rationale": "from typing import Optional\n\nclass MusicPiece:\n    def __init__(self, name: str, composer: Optional[str] = None):\n        self.name = name\n        self.composer = composer\n\nclass Composer:\n    def __init__(self, name: str):\n        self.name = name\n\nclass Orchestra:\n    def __init__(self, name: str, conductor: Optional[str] = None):\n        self.name = name\n        self.conductor = conductor\n\nclass MusicSociety:\n    def __init__(self, name: str, orchestra: Optional[Orchestra] = None):\n        self.name = name\n        self.orchestra = orchestra\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Symphony No. 9 is a music piece.\n    symphony_no_9 = MusicPiece(\"Symphony No. 9\")\n\n    # Premise 2: Composers write music pieces.\n    # This tells us that if a person writes a music piece, they are a composer.\n    # However, it does not directly link Beethoven to being a composer.\n\n    # Premise 3: Beethoven wrote Symphony No. 9.\n    symphony_no_9.composer = \"Beethoven\"\n    changed = True\n\n    # Premise 4: Vienna Music Society premiered Symphony No. 9.\n    vienna_music_society = MusicSociety(\"Vienna Music Society\")\n\n    # Premise 5: Vienna Music Society is an orchestra.\n    vienna_music_society.orchestra = Orchestra(\"Vienna Music Society\")\n\n    # Premise 6: Beethoven leads the Vienna Music Society.\n    # This does not directly link Beethoven to being a composer.\n\n    # Premise 7: Orchestras are led by conductors.\n    # This does not directly link Beethoven to being a composer.\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    beethoven = Composer(\"Beethoven\")\n    # Premise 3: Beethoven wrote Symphony No. 9.\n    # From this, we can infer that Beethoven is a composer.\n    return \"True\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beethoven is a composer?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSymphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.\n</premises>\n<conclusion>\nBeethoven is a composer.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Beethoven is a composer.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Symphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.",
        "conclusions": "Some orchestras premiered music pieces.",
        "rationale": "from typing import Optional\n\nclass MusicPiece:\n    pass\n\nclass Composer:\n    def __init__(self, name: str, wrote_music: Optional[MusicPiece] = None):\n        self.name = name\n        self.wrote_music = wrote_music\n\nclass Orchestra:\n    def __init__(self, name: str, premiered_music: Optional[MusicPiece] = None, led_by: Optional[str] = None):\n        self.name = name\n        self.premiered_music = premiered_music\n        self.led_by = led_by\n\nclass Society:\n    def __init__(self, name: str, is_orchestra: Optional[bool] = None, premiered_music: Optional[MusicPiece] = None):\n        self.name = name\n        self.is_orchestra = is_orchestra\n        self.premiered_music = premiered_music\n\ndef apply_premises():\n    symphony_9 = MusicPiece()\n    beethoven = Composer(\"Beethoven\", wrote_music=symphony_9)\n    vienna_music_society = Society(\"Vienna Music Society\", is_orchestra=True, premiered_music=symphony_9)\n    orchestra = Orchestra(\"Vienna Music Society\", premiered_music=symphony_9, led_by=\"Beethoven\")\n\n    return beethoven, vienna_music_society, orchestra\n\ndef check_conclusion(beethoven: Composer, vienna_music_society: Society, orchestra: Orchestra) -> str:\n    if orchestra.premiered_music is not None:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    beethoven, vienna_music_society, orchestra = apply_premises()\n    return check_conclusion(beethoven, vienna_music_society, orchestra)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some orchestras premiered music pieces?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSymphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.\n</premises>\n<conclusion>\nSome orchestras premiered music pieces.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Some orchestras premiered music pieces.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Symphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.",
        "conclusions": "Beethoven is not a conductor.",
        "rationale": "from typing import Optional\n\nclass MusicPiece:\n    def __init__(self, name: str):\n        self.name = name\n\nclass Composer:\n    def __init__(self, name: str, wrote_music: Optional[bool] = None):\n        self.name = name\n        self.wrote_music = wrote_music\n\nclass Society:\n    def __init__(self, name: str, is_orchestra: Optional[bool] = None, led_by: Optional[str] = None):\n        self.name = name\n        self.is_orchestra = is_orchestra\n        self.led_by = led_by\n\nclass Conductor:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises():\n    symphony_no_9 = MusicPiece(\"Symphony No. 9\")\n    beethoven = Composer(\"Beethoven\", wrote_music=None)\n    vienna_music_society = Society(\"Vienna Music Society\", is_orchestra=None, led_by=None)\n    conductor = Conductor(\"Beethoven\")\n\n    # Premise 1: Symphony No. 9 is a music piece.\n    if symphony_no_9.name == \"Symphony No. 9\":\n        pass\n\n    # Premise 2: Composers write music pieces.\n    if beethoven.wrote_music is None:\n        beethoven.wrote_music = True\n        if symphony_no_9.name == \"Symphony No. 9\":\n            beethoven.wrote_music = True\n            if beethoven.name == \"Beethoven\":\n                beethoven.wrote_music = True\n\n    # Premise 3: Beethoven wrote Symphony No. 9.\n    if beethoven.name == \"Beethoven\":\n        if beethoven.wrote_music is None:\n            beethoven.wrote_music = True\n\n    # Premise 4: Vienna Music Society premiered Symphony No. 9.\n    if vienna_music_society.name == \"Vienna Music Society\":\n        if vienna_music_society.is_orchestra is None:\n            vienna_music_society.is_orchestra = True\n\n    # Premise 5: Vienna Music Society is an orchestra.\n    if vienna_music_society.is_orchestra is True:\n        if vienna_music_society.led_by is None:\n            vienna_music_society.led_by = beethoven.name\n\n    # Premise 6: Beethoven leads the Vienna Music Society.\n    if vienna_music_society.led_by == beethoven.name:\n        if conductor.name == beethoven.name:\n            conductor.name = beethoven.name\n\n    # Premise 7: Orchestras are led by conductors.\n    if vienna_music_society.is_orchestra is True and conductor.name != beethoven.name:\n        pass\n\ndef check_conclusion():\n    apply_premises()\n    # Conclusion: Beethoven is not a conductor.\n    if conductor.name == beethoven.name:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beethoven is not a conductor?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSymphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.\n</premises>\n<conclusion>\nBeethoven is not a conductor.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Beethoven is not a conductor.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.",
        "conclusions": "A design by Max is a brutalist building.",
        "rationale": "from typing import Optional\n\nclass Design:\n    def __init__(self,\n                 is_zaha: Optional[bool] = None,\n                 is_brutalist: Optional[bool] = None,\n                 is_interesting: Optional[bool] = None,\n                 is_evocative: Optional[bool] = None,\n                 is_dreamy: Optional[bool] = None):\n        self.is_zaha = is_zaha\n        self.is_brutalist = is_brutalist\n        self.is_interesting = is_interesting\n        self.is_evocative = is_evocative\n        self.is_dreamy = is_dreamy\n\ndef apply_premises(design: Design) -> bool:\n    changed = False\n\n    # Premise 1: All of Zaha Hadid's design styles that Max adores have interesting geometries.\n    if design.is_zaha is True and design.is_interesting is None:\n        design.is_interesting = True\n        changed = True\n\n    # Premise 2: No brutalist buildings that Max adores have interesting geometries.\n    if design.is_brutalist is True and design.is_interesting is not False:\n        design.is_interesting = False\n        changed = True\n\n    # Premise 3: Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style.\n    # If the design is not Zaha Hadid's, it must be Kelly Wearstler's.\n    if design.is_zaha is False and design.is_kelly is not True:\n        design.is_kelly = True\n        changed = True\n\n    # Premise 4: All of Kelly Wearstler's design styles that Max adores are evocative.\n    if design.is_kelly is True and design.is_evocative is not True:\n        design.is_evocative = True\n        changed = True\n\n    # Premise 5: All of Kelly Wearstler's design styles that Max adores are dreamy.\n    if design.is_kelly is True and design.is_dreamy is not True:\n        design.is_dreamy = True\n        changed = True\n\n    # Premise 6: If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n    if design.is_interesting is True and design.is_brutalist is None and design.is_evocative is None:\n        design.is_brutalist = True\n        design.is_evocative = True\n        changed = True\n\n    return changed\n\ndef run_inference(design: Design):\n    while apply_premises(design):\n        pass\n\ndef check_conclusion(design: Design) -> str:\n    run_inference(design)\n    # Conclusion: A design by Max is a brutalist building.\n    if design.is_brutalist is None:\n        return \"Uncertain\"\n    if design.is_brutalist is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    design = Design(\n        is_zaha=None,\n        is_brutalist=None,\n        is_interesting=None,\n        is_evocative=None,\n        is_dreamy=None\n    )\n    return check_conclusion(design)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A design by Max is a brutalist building?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n</premises>\n<conclusion>\nA design by Max is a brutalist building.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? A design by Max is a brutalist building.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.",
        "conclusions": "A design by Max is evocative and dreamy.",
        "rationale": "from typing import Optional\n\nclass Design:\n    def __init__(self,\n                 zaha_hadid: Optional[bool] = None,\n                 brutalist: Optional[bool] = None,\n                 evocative: Optional[bool] = None,\n                 dreamy: Optional[bool] = None):\n        self.zaha_hadid = zaha_hadid\n        self.brutalist = brutalist\n        self.evocative = evocative\n        self.dreamy = dreamy\n\ndef apply_premises(design: Design) -> bool:\n    changed = False\n\n    # Premise 1: All of Zaha Hadid's design styles that Max adores have interesting geometries.\n    if design.zaha_hadid is True and design.evocative is None:\n        design.evocative = True\n        changed = True\n    if design.zaha_hadid is True and design.dreamy is None:\n        design.dreamy = True\n        changed = True\n\n    # Premise 2: No brutalist buildings that Max adores have interesting geometries.\n    if design.brutalist is True and design.evocative is not False:\n        design.evocative = False\n        changed = True\n    if design.brutalist is True and design.dreamy is not False:\n        design.dreamy = False\n        changed = True\n\n    # Premise 3: Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style.\n    if design.zaha_hadid is None and design.kelly_wearstler is None:\n        if design.zaha_hadid is not False:\n            design.zaha_hadid = True\n            changed = True\n        else:\n            design.kelly_wearstler = True\n            changed = True\n\n    # Premise 4: All of Kelly Wearstler's design styles that Max adores are evocative.\n    if design.kelly_wearstler is True and design.evocative is not True:\n        design.evocative = True\n        changed = True\n    if design.kelly_wearstler is True and design.dreamy is not True:\n        design.dreamy = True\n        changed = True\n\n    # Premise 5: If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n    if design.evocative is True and design.dreamy is True:\n        return changed\n\n    if design.evocative is True and design.dreamy is not True:\n        design.dreamy = True\n        changed = True\n    if design.evocative is not True and design.dreamy is True:\n        design.evocative = True\n        changed = True\n\n    return changed\n\ndef run_inference(design: Design):\n    while apply_premises(design):\n        pass\n\ndef check_conclusion(design: Design) -> str:\n    run_inference(design)\n    if design.evocative is True and design.dreamy is True:\n        return \"True\"\n    elif design.evocative is False or design.dreamy is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    design = Design()\n    return check_conclusion(design)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A design by Max is evocative and dreamy?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n</premises>\n<conclusion>\nA design by Max is evocative and dreamy.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? A design by Max is evocative and dreamy.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.",
        "conclusions": "A design by Max is either evocative or dreamy.",
        "rationale": "from typing import Optional\n\nclass Design:\n    def __init__(self,\n                 is_zaha: Optional[bool] = None,\n                 is_brutalist: Optional[bool] = None,\n                 is_interesting: Optional[bool] = None,\n                 is_evocative: Optional[bool] = None,\n                 is_dreamy: Optional[bool] = None):\n        self.is_zaha = is_zaha\n        self.is_brutalist = is_brutalist\n        self.is_interesting = is_interesting\n        self.is_evocative = is_evocative\n        self.is_dreamy = is_dreamy\n\ndef apply_premises(design: Design) -> bool:\n    changed = False\n\n    # Premise 1: All of Zaha Hadid's design styles that Max adores have interesting geometries.\n    if design.is_zaha is True and design.is_interesting is not True:\n        design.is_interesting = True\n        changed = True\n\n    # Premise 2: No brutalist buildings that Max adores have interesting geometries.\n    if design.is_brutalist is True and design.is_interesting is not False:\n        design.is_interesting = False\n        changed = True\n\n    # Premise 3: Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style.\n    if design.is_zaha is None and design.is_brutalist is None and design.is_evocative is None and design.is_dreamy is None:\n        design.is_zaha = True\n        design.is_brutalist = False\n        changed = True\n\n    # Premise 4: All of Kelly Wearstler's design styles that Max adores are evocative.\n    if design.is_zaha is False and design.is_evocative is not True:\n        design.is_evocative = True\n        changed = True\n\n    # Premise 5: All of Kelly Wearstler's design styles that Max adores are dreamy.\n    if design.is_zaha is False and design.is_dreamy is not True:\n        design.is_dreamy = True\n        changed = True\n\n    # Premise 6: If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n    if design.is_interesting is True and (design.is_brutalist is not True or design.is_evocative is not True):\n        design.is_brutalist = True\n        design.is_evocative = True\n        changed = True\n\n    return changed\n\ndef run_inference(design: Design):\n    while apply_premises(design):\n        pass\n\ndef check_conclusion(design: Design) -> str:\n    run_inference(design)\n    # Conclusion: A design by Max is either evocative or dreamy.\n    if design.is_evocative is True or design.is_dreamy is True:\n        return \"True\"\n    elif design.is_evocative is False and design.is_dreamy is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    design = Design(\n        is_zaha=None,\n        is_brutalist=None,\n        is_interesting=None,\n        is_evocative=None,\n        is_dreamy=None\n    )\n    return check_conclusion(design)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A design by Max is either evocative or dreamy?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n</premises>\n<conclusion>\nA design by Max is either evocative or dreamy.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? A design by Max is either evocative or dreamy.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.",
        "conclusions": "Coco Gauff is among the most active Grand-Slam players.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self,\n                 is_female: Optional[bool] = None,\n                 is_at_roland_garros: Optional[bool] = None,\n                 lost_to_nadal: Optional[bool] = None,\n                 lost_to_iga: Optional[bool] = None,\n                 ranked_high_wta: Optional[bool] = None):\n        self.is_female = is_female\n        self.is_at_roland_garros = is_at_roland_garros\n        self.lost_to_nadal = lost_to_nadal\n        self.lost_to_iga = lost_to_iga\n        self.ranked_high_wta = ranked_high_wta\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: If someone is ranked highly by the WTA, then they are one of the most active players in major tennis.\n    if player.ranked_high_wta is True and player.is_most_active is not True:\n        player.is_most_active = True\n        changed = True\n\n    # Premise 2: Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the WTA.\n    if player.lost_to_iga is True and player.ranked_high_wta is not True:\n        player.ranked_high_wta = True\n        changed = True\n\n    # Premise 3: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n    if player.is_female is True and player.lost_to_iga is not True:\n        player.lost_to_iga = True\n        changed = True\n\n    # Premise 4: All tennis players at Roland Garros 2022 are either female or male.\n    # This premise does not directly update any attributes, but it sets up the context.\n\n    # Premise 5: All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\n    if player.is_male is True and player.lost_to_nadal is not True:\n        player.lost_to_nadal = True\n        changed = True\n\n    # Premise 6: If Coco Gauff is ranked highly by the WTA or lost to Rafael Nadal, then she is not a male tennis player at Roland Garros 2022.\n    if (player.is_coco_gauff is True and player.ranked_high_wta is True and player.is_male is not False) or \\\n       (player.is_coco_gauff is True and player.lost_to_nadal is True and player.is_male is not False):\n        player.is_male = False\n        changed = True\n\n    # Premise 7: Coco Gauff is at Roland Garros 2022.\n    if player.is_coco_gauff is True and player.is_at_roland_garros is not True:\n        player.is_at_roland_garros = True\n        changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    # Conclusion: Coco Gauff is among the most active Grand-Slam players.\n    # If is_coco_gauff is True and is_most_active is True, then the statement is True.\n    if player.is_coco_gauff is True and player.is_most_active is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    player = Player(\n        is_female=None,\n        is_at_roland_garros=None,\n        lost_to_nadal=None,\n        lost_to_iga=None,\n        ranked_high_wta=None,\n        is_male=None,\n        is_coco_gauff=True\n    )\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Coco Gauff is among the most active Grand-Slam players?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.\n</premises>\n<conclusion>\nCoco Gauff is among the most active Grand-Slam players.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Coco Gauff is among the most active Grand-Slam players.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.",
        "conclusions": "Coco Gauff has lost to Rafael Nadal.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self, gender: Optional[str] = None, lost_to_rn: Optional[bool] = None, ranked_high_wta: Optional[bool] = None):\n        self.gender = gender  # 'female' or 'male'\n        self.lost_to_rn = lost_to_rn  # True if lost to Rafael Nadal, False otherwise, None if unknown\n        self.ranked_high_wta = ranked_high_wta  # True if ranked highly by WTA, False otherwise, None if unknown\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis.\n    if player.ranked_high_wta is True:\n        # This premise does not directly update any attributes of the player object.\n        pass\n\n    # Premise 2: Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\n    if player.lost_to_rn is False and player.ranked_high_wta is not True:\n        player.ranked_high_wta = True\n        changed = True\n\n    # Premise 3: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n    if player.gender == 'female' and player.lost_to_rn is not True:\n        player.lost_to_rn = True\n        changed = True\n\n    # Premise 4: All tennis players at Roland Garros 2022 are either female or male.\n    # This premise is self-evident and does not require any changes.\n\n    # Premise 5: All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\n    if player.gender == 'male' and player.lost_to_rn is not True:\n        player.lost_to_rn = True\n        changed = True\n\n    # Premise 6: If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n    if (player.gender == 'male' and (player.ranked_high_wta is True or player.lost_to_rn is True)):\n        player.gender = 'female'\n        changed = True\n\n    # Premise 7: Coco Gauff is at Roland Garros 2022.\n    # This premise does not require any changes.\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.gender == 'male' and player.lost_to_rn is True:\n        return \"True\"\n    elif player.gender == 'male' and player.lost_to_rn is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(gender='female', lost_to_rn=None, ranked_high_wta=None)\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Coco Gauff has lost to Rafael Nadal?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.\n</premises>\n<conclusion>\nCoco Gauff has lost to Rafael Nadal.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Coco Gauff has lost to Rafael Nadal.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.",
        "conclusions": "Coco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self,\n                 is_female: Optional[bool] = None,\n                 lost_to_iga: Optional[bool] = None,\n                 is_most_active: Optional[bool] = None,\n                 lost_to_rafa: Optional[bool] = None,\n                 is_at_roland_garros: Optional[bool] = None):\n        self.is_female = is_female\n        self.lost_to_iga = lost_to_iga\n        self.is_most_active = is_most_active\n        self.lost_to_rafa = lost_to_rafa\n        self.is_at_roland_garros = is_at_roland_garros\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis.\n    if player.is_most_active is None:\n        if player.lost_to_iga is True:\n            player.is_most_active = True\n            changed = True\n\n    # Premise 2: Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\n    if player.lost_to_iga is True:\n        if player.lost_to_iga is not True:\n            player.lost_to_iga = True\n            changed = True\n\n    # Premise 3: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n    if player.is_female is True:\n        if player.lost_to_iga is not True:\n            player.lost_to_iga = True\n            changed = True\n\n    # Premise 4: All tennis players at Roland Garros 2022 are either female or male.\n    if player.is_female is None and player.is_male is None:\n        player.is_female = True\n\n    # Premise 5: All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\n    if player.is_male is True:\n        if player.lost_to_rafa is not True:\n            player.lost_to_rafa = True\n            changed = True\n\n    # Premise 6: If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n    if player.name == \"Coco Gauff\":\n        if player.is_most_active is not None or player.lost_to_rafa is not None:\n            if player.is_male is True:\n                player.is_male = False\n                changed = True\n\n    # Premise 7: Coco Gauff is at Roland Garros 2022.\n    if player.name == \"Coco Gauff\":\n        if player.is_at_roland_garros is not True:\n            player.is_at_roland_garros = True\n            changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    # Conclusion: Coco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis.\n    if player.is_at_roland_garros is True:\n        if player.lost_to_iga is True and player.is_most_active is True:\n            return \"False\"\n        else:\n            return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(\n        is_female=None,\n        lost_to_iga=None,\n        is_most_active=None,\n        lost_to_rafa=None,\n        is_at_roland_garros=None,\n        name=\"Coco Gauff\"\n    )\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Coco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.\n</premises>\n<conclusion>\nCoco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Coco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All cats are mammals.\nSome pets are not mammals.",
        "conclusions": "No pets are cats.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, is_cat: Optional[bool] = None, is_mammal: Optional[bool] = None, is_pet: Optional[bool] = None):\n        self.is_cat = is_cat\n        self.is_mammal = is_mammal\n        self.is_pet = is_pet\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All cats are mammals.\n    if animal.is_cat is True and animal.is_mammal is not True:\n        animal.is_mammal = True\n        changed = True\n\n    # Premise 2: Some pets are not mammals.\n    # This does not provide enough information to determine if all pets are mammals or not.\n    # We need to leave is_mammal as None for pets initially.\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: No pets are cats.\n    if animal.is_pet is True and animal.is_cat is True:\n        return \"False\"\n    elif animal.is_pet is True and animal.is_cat is False:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    animal = Animal(\n        is_cat=None,\n        is_mammal=None,\n        is_pet=None\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No pets are cats?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll cats are mammals.\nSome pets are not mammals.\n</premises>\n<conclusion>\nNo pets are cats.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? No pets are cats.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "There are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation have summer as their favorite season.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's. \nJames wants to have a long vacation.",
        "conclusions": "James's favorite season is summer.",
        "rationale": "from typing import Optional\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 favorite_season: Optional[str] = None,\n                 wants_long_vacation: Optional[bool] = None):\n        self.name = name\n        self.favorite_season = favorite_season\n        self.wants_long_vacation = wants_long_vacation\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n    # This is a factual statement and does not affect the inference.\n\n    # Premise 2: All students who want to have a long vacation have summer as their favorite season.\n    if student.wants_long_vacation is True and student.favorite_season is not \"Summer\":\n        student.favorite_season = \"Summer\"\n        changed = True\n\n    # Premise 3: Emma's favorite season is summer.\n    if student.name == \"Emma\" and student.favorite_season is not \"Summer\":\n        student.favorite_season = \"Summer\"\n        changed = True\n\n    # Premise 4: Mia's favorite season is not the same as Emma's.\n    if student.name == \"Mia\" and student.favorite_season is None:\n        student.favorite_season = \"not Summer\"\n        changed = True\n\n    # Premise 5: James wants to have a long vacation.\n    if student.name == \"James\" and student.wants_long_vacation is None:\n        student.wants_long_vacation = True\n        changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    if student.name == \"James\" and student.favorite_season == \"Summer\":\n        return \"True\"\n    elif student.name == \"James\" and student.favorite_season != \"Summer\":\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    student = Student(\n        name=\"James\",\n        favorite_season=None,\n        wants_long_vacation=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James's favorite season is summer?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation have summer as their favorite season.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's. \nJames wants to have a long vacation.\n</premises>\n<conclusion>\nJames's favorite season is summer.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? James's favorite season is summer.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "There are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation have summer as their favorite season.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's. \nJames wants to have a long vacation.",
        "conclusions": "Mia's favorite season is spring.",
        "rationale": "from typing import Optional\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 favorite_season: Optional[str] = None,\n                 wants_long_vacation: Optional[bool] = None):\n        self.name = name\n        self.favorite_season = favorite_season\n        self.wants_long_vacation = wants_long_vacation\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n    # This premise does not change any state, so it is not included in the function.\n\n    # Premise 2: All students who want to have a long vacation have summer as their favorite season.\n    if student.wants_long_vacation is True:\n        student.favorite_season = \"Summer\"\n        changed = True\n\n    # Premise 3: Emma's favorite season is summer.\n    if student.name == \"Emma\":\n        if student.favorite_season is None:\n            student.favorite_season = \"Summer\"\n            changed = True\n\n    # Premise 4: Mia's favorite season is not the same as Emma's.\n    if student.name == \"Mia\":\n        if student.favorite_season is None:\n            student.favorite_season = \"NotSummer\"\n            changed = True\n\n    # Premise 5: James wants to have a long vacation.\n    if student.name == \"James\":\n        if student.wants_long_vacation is None:\n            student.wants_long_vacation = True\n            changed = True\n\n    return changed\n\ndef run_inference(students: list[Student]):\n    while any(apply_premises(student) for student in students):\n        pass\n\ndef check_conclusion(students: list[Student]) -> str:\n    run_inference(students)\n    for student in students:\n        if student.name == \"Mia\":\n            if student.favorite_season == \"Spring\":\n                return \"True\"\n            elif student.favorite_season != \"Spring\":\n                return \"False\"\n    return \"Uncertain\"\n\ndef func():\n    students = [\n        Student(name=\"Emma\"),\n        Student(name=\"Mia\"),\n        Student(name=\"James\")\n    ]\n    return check_conclusion(students)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Mia's favorite season is spring?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation have summer as their favorite season.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's. \nJames wants to have a long vacation.\n</premises>\n<conclusion>\nMia's favorite season is spring.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Mia's favorite season is spring.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.",
        "conclusions": "1984 is printed text.",
        "rationale": "from typing import Optional\n\nclass Object:\n    def __init__(self,\n                 is_digital_media: Optional[bool] = None,\n                 is_analog_media: Optional[bool] = None,\n                 is_printed_text: Optional[bool] = None,\n                 is_hardcover_book: Optional[bool] = None,\n                 is_streaming_service: Optional[bool] = None):\n        self.is_digital_media = is_digital_media\n        self.is_analog_media = is_analog_media\n        self.is_printed_text = is_printed_text\n        self.is_hardcover_book = is_hardcover_book\n        self.is_streaming_service = is_streaming_service\n\ndef apply_premises(obj: Object) -> bool:\n    changed = False\n\n    # Premise 1: No digital media are analog.\n    if obj.is_digital_media is True and obj.is_analog_media is not False:\n        obj.is_analog_media = False\n        changed = True\n\n    # Premise 2: Every printed text is analog media.\n    if obj.is_printed_text is True and obj.is_analog_media is not True:\n        obj.is_analog_media = True\n        changed = True\n\n    # Premise 3: All streaming services are digital media.\n    if obj.is_streaming_service is True and obj.is_digital_media is not True:\n        obj.is_digital_media = True\n        changed = True\n\n    # Premise 4: If an object is a hardcover book, then it is printed text.\n    if obj.is_hardcover_book is True and obj.is_printed_text is not True:\n        obj.is_printed_text = True\n        changed = True\n\n    # Premise 5: If 1984 is a streaming service, then 1984 is a hardcover book.\n    if obj.is_streaming_service is True and obj.is_hardcover_book is not True:\n        obj.is_hardcover_book = True\n        changed = True\n\n    return changed\n\ndef run_inference(obj: Object):\n    while apply_premises(obj):\n        pass\n\ndef check_conclusion(obj: Object) -> str:\n    run_inference(obj)\n    if obj.is_printed_text is True:\n        return \"True\"\n    elif obj.is_printed_text is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    obj = Object(\n        is_digital_media=None,\n        is_analog_media=None,\n        is_printed_text=None,\n        is_hardcover_book=None,\n        is_streaming_service=None\n    )\n    return check_conclusion(obj)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 1984 is printed text?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.\n</premises>\n<conclusion>\n1984 is printed text.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? 1984 is printed text.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.",
        "conclusions": "1984 is a streaming service.",
        "rationale": "from typing import Optional\n\nclass Object:\n    def __init__(self,\n                 is_digital_media: Optional[bool] = None,\n                 is_analog_media: Optional[bool] = None,\n                 is_printed_text: Optional[bool] = None,\n                 is_hardcover_book: Optional[bool] = None,\n                 is_streaming_service: Optional[bool] = None):\n        self.is_digital_media = is_digital_media\n        self.is_analog_media = is_analog_media\n        self.is_printed_text = is_printed_text\n        self.is_hardcover_book = is_hardcover_book\n        self.is_streaming_service = is_streaming_service\n\ndef apply_premises(obj: Object) -> bool:\n    changed = False\n\n    # Premise 1: No digital media are analog.\n    if obj.is_digital_media is not None and obj.is_analog_media is not None:\n        if obj.is_digital_media is True and obj.is_analog_media is True:\n            obj.is_analog_media = False\n            changed = True\n        elif obj.is_digital_media is False and obj.is_analog_media is True:\n            obj.is_digital_media = False\n            changed = True\n\n    # Premise 2: Every printed text is analog media.\n    if obj.is_printed_text is not None and obj.is_analog_media is not None:\n        if obj.is_printed_text is True and obj.is_analog_media is False:\n            obj.is_analog_media = True\n            changed = True\n\n    # Premise 3: All streaming services are digital media.\n    if obj.is_streaming_service is not None and obj.is_digital_media is not None:\n        if obj.is_streaming_service is True and obj.is_digital_media is False:\n            obj.is_digital_media = True\n            changed = True\n\n    # Premise 4: If an object is a hardcover book, then it is printed text.\n    if obj.is_hardcover_book is not None and obj.is_printed_text is not None:\n        if obj.is_hardcover_book is True and obj.is_printed_text is False:\n            obj.is_printed_text = True\n            changed = True\n\n    # Premise 5: If 1984 is a streaming service, then 1984 is a hardcover book.\n    if obj.is_streaming_service is not None and obj.is_hardcover_book is not None:\n        if obj.is_streaming_service is True and obj.is_hardcover_book is False:\n            obj.is_hardcover_book = True\n            changed = True\n\n    return changed\n\ndef run_inference(obj: Object):\n    while apply_premises(obj):\n        pass\n\ndef check_conclusion(obj: Object) -> str:\n    run_inference(obj)\n    if obj.is_streaming_service is True:\n        return \"True\"\n    elif obj.is_streaming_service is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    obj = Object(\n        is_digital_media=None,\n        is_analog_media=None,\n        is_printed_text=None,\n        is_hardcover_book=None,\n        is_streaming_service=None\n    )\n    return check_conclusion(obj)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 1984 is a streaming service?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.\n</premises>\n<conclusion>\n1984 is a streaming service.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? 1984 is a streaming service.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.",
        "conclusions": "1984 is not a streaming service.",
        "rationale": "from typing import Optional\n\nclass Object:\n    def __init__(self,\n                 is_digital_media: Optional[bool] = None,\n                 is_analog_media: Optional[bool] = None,\n                 is_printed_text: Optional[bool] = None,\n                 is_hardcover_book: Optional[bool] = None,\n                 is_streaming_service: Optional[bool] = None):\n        self.is_digital_media = is_digital_media\n        self.is_analog_media = is_analog_media\n        self.is_printed_text = is_printed_text\n        self.is_hardcover_book = is_hardcover_book\n        self.is_streaming_service = is_streaming_service\n\ndef apply_premises(obj: Object) -> bool:\n    changed = False\n\n    # Premise 1: No digital media are analog.\n    if obj.is_digital_media is True and obj.is_analog_media is not False:\n        obj.is_analog_media = False\n        changed = True\n\n    # Premise 2: Every printed text is analog media.\n    if obj.is_printed_text is True and obj.is_analog_media is not True:\n        obj.is_analog_media = True\n        changed = True\n\n    # Premise 3: All streaming services are digital media.\n    if obj.is_streaming_service is True and obj.is_digital_media is not True:\n        obj.is_digital_media = True\n        changed = True\n\n    # Premise 4: If an object is a hardcover book, then it is printed text.\n    if obj.is_hardcover_book is True and obj.is_printed_text is not True:\n        obj.is_printed_text = True\n        changed = True\n\n    # Premise 5: If 1984 is a streaming service, then 1984 is a hardcover book.\n    if obj.name == \"1984\" and obj.is_streaming_service is True and obj.is_hardcover_book is not True:\n        obj.is_hardcover_book = True\n        changed = True\n\n    return changed\n\ndef run_inference(obj: Object):\n    while apply_premises(obj):\n        pass\n\ndef check_conclusion(obj: Object) -> str:\n    run_inference(obj)\n    if obj.name == \"1984\" and obj.is_streaming_service is False:\n        return \"True\"\n    elif obj.name == \"1984\" and obj.is_streaming_service is True:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    obj = Object(\n        is_digital_media=None,\n        is_analog_media=None,\n        is_printed_text=None,\n        is_hardcover_book=None,\n        is_streaming_service=None\n    )\n    return check_conclusion(obj)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 1984 is not a streaming service?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.\n</premises>\n<conclusion>\n1984 is not a streaming service.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? 1984 is not a streaming service.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.",
        "conclusions": "Basque is a Romance language.",
        "rationale": "from typing import Optional\n\nclass Language:\n    def __init__(self,\n                 name: str,\n                 is_roman: Optional[bool] = None,\n                 is_related_to_spanish: Optional[bool] = None,\n                 is_indo_european: Optional[bool] = None,\n                 is_in_family: Optional[bool] = None):\n        self.name = name\n        self.is_roman = is_roman\n        self.is_related_to_spanish = is_related_to_spanish\n        self.is_indo_european = is_indo_european\n        self.is_in_family = is_in_family\n\ndef apply_premises(language: Language) -> bool:\n    changed = False\n\n    # Premise 1: All Romance languages are Indo-European languages.\n    if language.name == \"French\" or language.name == \"Spanish\":\n        if language.is_roman is None:\n            language.is_roman = True\n            changed = True\n        if language.is_indo_european is None:\n            language.is_indo_european = True\n            changed = True\n\n    # Premise 2: Romance languages are a language family.\n    if language.name == \"French\" or language.name == \"Spanish\":\n        if language.is_in_family is None:\n            language.is_in_family = True\n            changed = True\n\n    # Premise 3: All languages within a language family are related to each other.\n    if language.name == \"Spanish\":\n        if language.is_related_to_spanish is None:\n            language.is_related_to_spanish = True\n            changed = True\n\n    # Premise 4: French and Spanish are both Romance languages.\n    if language.name == \"French\":\n        if language.is_roman is None:\n            language.is_roman = True\n            changed = True\n    if language.name == \"Spanish\":\n        if language.is_roman is None:\n            language.is_roman = True\n            changed = True\n\n    # Premise 5: German is related to Spanish.\n    # This does not affect Basque directly.\n\n    # Premise 6: Basque is not related to any other language.\n    # This does not affect Basque being a Romance language.\n\n    return changed\n\ndef run_inference(language: Language):\n    while apply_premises(language):\n        pass\n\ndef check_conclusion(language: Language) -> str:\n    run_inference(language)\n    if language.name == \"Basque\":\n        if language.is_roman is None:\n            return \"Uncertain\"\n        if language.is_roman is True:\n            return \"True\"\n        else:\n            return \"False\"\n\ndef func():\n    basque = Language(name=\"Basque\")\n    return check_conclusion(basque)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Basque is a Romance language?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</premises>\n<conclusion>\nBasque is a Romance language.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Basque is a Romance language.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.",
        "conclusions": "German is a Romance language.",
        "rationale": "from typing import Optional\n\nclass Language:\n    def __init__(self,\n                 name: str,\n                 is_roman: Optional[bool] = None,\n                 is Indo_european: Optional[bool] = None,\n                 is_related_to_spanish: Optional[bool] = None,\n                 is_related_to_german: Optional[bool] = None):\n        self.name = name\n        self.is_roman = is_roman\n        self.is_indo_european = is_Indo_european\n        self.is_related_to_spanish = is_related_to_spanish\n        self.is_related_to_german = is_related_to_german\n\ndef apply_premises(language: Language) -> bool:\n    changed = False\n\n    # Premise 1: All Romance languages are Indo-European languages.\n    if language.name in [\"French\", \"Spanish\"]:\n        if language.is_roman is None:\n            language.is_roman = True\n            changed = True\n        if language.is_indo_european is None:\n            language.is_indo_european = True\n            changed = True\n\n    # Premise 2: Romance languages are a language family.\n    if language.name in [\"French\", \"Spanish\"]:\n        if language.is_roman is None:\n            language.is_roman = True\n            changed = True\n\n    # Premise 3: All languages within a language family are related to each other.\n    if language.name in [\"French\", \"Spanish\"]:\n        if language.is_related_to_spanish is None:\n            language.is_related_to_spanish = True\n            changed = True\n        if language.is_related_to_german is None:\n            language.is_related_to_german = True\n            changed = True\n\n    # Premise 4: French and Spanish are both Romance languages.\n    if language.name in [\"French\", \"Spanish\"]:\n        if language.is_roman is None:\n            language.is_roman = True\n            changed = True\n\n    # Premise 5: German is related to Spanish.\n    if language.name == \"German\":\n        if language.is_related_to_spanish is None:\n            language.is_related_to_spanish = True\n            changed = True\n\n    # Premise 6: Basque is not related to any other language.\n    # No changes needed for this premise.\n\n    return changed\n\ndef run_inference(language: Language):\n    while apply_premises(language):\n        pass\n\ndef check_conclusion(language: Language) -> str:\n    run_inference(language)\n    if language.name == \"German\" and language.is_roman is not True:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    language = Language(\n        name=\"German\",\n        is_roman=None,\n        is_indo_european=None,\n        is_related_to_spanish=None,\n        is_related_to_german=None\n    )\n    return check_conclusion(language)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: German is a Romance language?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</premises>\n<conclusion>\nGerman is a Romance language.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? German is a Romance language.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.",
        "conclusions": "French is an Indo-European language.",
        "rationale": "from typing import Optional\n\nclass Language:\n    def __init__(self,\n                 name: str,\n                 is_indo_european: Optional[bool] = None,\n                 is_romance: Optional[bool] = None,\n                 is_related_to_spanish: Optional[bool] = None,\n                 is_related_to_german: Optional[bool] = None,\n                 is_related_to_basque: Optional[bool] = None):\n        self.name = name\n        self.is_indo_european = is_indo_european\n        self.is_romance = is_romance\n        self.is_related_to_spanish = is_related_to_spanish\n        self.is_related_to_german = is_related_to_german\n        self.is_related_to_basque = is_related_to_basque\n\ndef apply_premises(language: Language) -> bool:\n    changed = False\n\n    # Premise 1: All Romance languages are Indo-European languages.\n    if language.is_romance is True and language.is_indo_european is not True:\n        language.is_indo_european = True\n        changed = True\n\n    # Premise 2: Romance languages are a language family.\n    # This premise is more of a definition and does not change the state of the language object.\n\n    # Premise 3: All languages within a language family are related to each other.\n    # Since Romance languages are a language family, and French and Spanish are both Romance languages,\n    # French must be related to Spanish.\n    if language.name == \"French\" and language.is_related_to_spanish is not True:\n        language.is_related_to_spanish = True\n        changed = True\n\n    # Premise 4: French and Spanish are both Romance languages.\n    if language.name == \"French\" and language.is_romance is not True:\n        language.is_romance = True\n        changed = True\n\n    # Premise 5: German is related to Spanish.\n    # This does not affect French directly.\n\n    # Premise 6: Basque is not related to any other language.\n    # This does not affect French directly.\n\n    return changed\n\ndef run_inference(language: Language):\n    while apply_premises(language):\n        pass\n\ndef check_conclusion(language: Language) -> str:\n    run_inference(language)\n    if language.name == \"French\" and language.is_indo_european is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    language = Language(\n        name=\"French\",\n        is_indo_european=None,\n        is_romance=None,\n        is_related_to_spanish=None,\n        is_related_to_german=None,\n        is_related_to_basque=None\n    )\n    return check_conclusion(language)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: French is an Indo-European language?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</premises>\n<conclusion>\nFrench is an Indo-European language.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? French is an Indo-European language.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Robert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.",
        "conclusions": "Robert Lewandowski is a soccer player.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self, name: str, position: Optional[str] = None, team: Optional[str] = None):\n        self.name = name\n        self.position = position\n        self.team = team\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: Robert Lewandowski is a striker.\n    if player.name == \"Robert Lewandowski\":\n        if player.position is None:\n            player.position = \"striker\"\n            changed = True\n\n    # Premise 2: Strikers are soccer players.\n    if player.position == \"striker\":\n        if player.position != \"soccer player\":\n            player.position = \"soccer player\"\n            changed = True\n\n    # Premise 3: Robert Lewandowski left Bayern Munchen.\n    if player.name == \"Robert Lewandowski\":\n        if player.team is not None and player.team == \"Bayern Munchen\":\n            player.team = None\n            changed = True\n\n    # Premise 4: If a player leaves a team they no longer play for that team.\n    # This does not change the fact that he is a soccer player, only his team affiliation.\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.position == \"soccer player\":\n        return \"True\"\n    elif player.position != \"soccer player\":\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(name=\"Robert Lewandowski\", position=None, team=\"Bayern Munchen\")\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Robert Lewandowski is a soccer player?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nRobert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.\n</premises>\n<conclusion>\nRobert Lewandowski is a soccer player.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Robert Lewandowski is a soccer player.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Robert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.",
        "conclusions": "Robert Lewandowski plays for Bayern Munchen.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self,\n                 name: str,\n                 position: Optional[str] = None,\n                 team: Optional[str] = None,\n                 left_team: Optional[bool] = None):\n        self.name = name\n        self.position = position\n        self.team = team\n        self.left_team = left_team\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: Robert Lewandowski is a striker.\n    if player.name == \"Robert Lewandowski\":\n        if player.position is None:\n            player.position = \"striker\"\n            changed = True\n\n    # Premise 2: Strikers are soccer players.\n    # No change needed as this is a general statement.\n\n    # Premise 3: Robert Lewandowski left Bayern Munchen.\n    if player.name == \"Robert Lewandowski\":\n        if player.left_team is None:\n            player.left_team = True\n            changed = True\n\n    # Premise 4: If a player leaves a team they no longer play for that team.\n    if player.left_team is True and player.team is not None:\n        player.team = None\n        changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    # Conclusion: Robert Lewandowski plays for Bayern Munchen.\n    if player.team == \"Bayern Munchen\":\n        return \"True\"\n    elif player.team is None:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(\n        name=\"Robert Lewandowski\",\n        position=None,\n        team=\"Bayern Munchen\",\n        left_team=None\n    )\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Robert Lewandowski plays for Bayern Munchen?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nRobert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.\n</premises>\n<conclusion>\nRobert Lewandowski plays for Bayern Munchen.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Robert Lewandowski plays for Bayern Munchen.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Robert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.",
        "conclusions": "Robert Lewandowski is a star.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self,\n                 name: str,\n                 position: Optional[str] = None,\n                 team: Optional[str] = None,\n                 is_star: Optional[bool] = None):\n        self.name = name\n        self.position = position\n        self.team = team\n        self.is_star = is_star\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: Robert Lewandowski is a striker.\n    if player.name == \"Robert Lewandowski\":\n        if player.position is None:\n            player.position = \"striker\"\n            changed = True\n\n    # Premise 2: Strikers are soccer players.\n    # This premise is a general statement and does not change the player object directly.\n\n    # Premise 3: Robert Lewandowski left Bayern Munchen.\n    if player.name == \"Robert Lewandowski\":\n        if player.team is None:\n            player.team = \"left Bayern Munchen\"\n            changed = True\n\n    # Premise 4: If a player leaves a team they no longer play for that team.\n    if player.name == \"Robert Lewandowski\":\n        if player.team == \"left Bayern Munchen\" and player.team != \"Bayern Munchen\":\n            player.team = None\n            changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.is_star is None:\n        return \"Uncertain\"\n    elif player.is_star:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    player = Player(\n        name=\"Robert Lewandowski\",\n        position=None,\n        team=\"Bayern Munchen\",\n        is_star=None\n    )\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Robert Lewandowski is a star?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nRobert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.\n</premises>\n<conclusion>\nRobert Lewandowski is a star.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Robert Lewandowski is a star.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Billings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.",
        "conclusions": "Butte and St Pierre are in the same state.",
        "rationale": "from typing import Optional\n\nclass City:\n    def __init__(self, name: str, state: Optional[str] = None):\n        self.name = name\n        self.state = state\n\nclass State:\n    def __init__(self, name: str):\n        self.name = name\n        self.cities = []\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Billings is a city in the state of Montana in U.S.\n    billings = City(\"Billings\", \"Montana\")\n    \n    # Premise 2: The state of Montana includes the cities of Butte, Helena, and Missoula.\n    montana = State(\"Montana\")\n    montana.cities.extend([City(\"Butte\", \"Montana\"), City(\"Helena\", \"Montana\"), City(\"Missoula\", \"Montana\")])\n\n    # Premise 3: White Sulphur Springs and Butte are cities in the same state in U.S.\n    white_sulphur_springs = City(\"White Sulphur Springs\", \"Montana\")\n    montana.cities.append(white_sulphur_springs)\n\n    # Premise 4: The city of St Pierre is not in the state of Montana.\n    st_pierre = City(\"St Pierre\", \"Not Montana\")\n    \n    # Premise 5: Any city in Butte is not in St Pierre.\n    # Since Butte is in Montana, it cannot be in St Pierre.\n    # Butte is already assigned to Montana, so no change needed.\n    \n    # Premise 6: A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\n    # This premise does not affect the current problem as it is about specific cities.\n    \n    return True\n\ndef check_conclusion() -> str:\n    apply_premises()\n    # Conclusion: Butte and St Pierre are in the same state.\n    if st_pierre.state == \"Montana\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Butte and St Pierre are in the same state?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBillings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\n</premises>\n<conclusion>\nButte and St Pierre are in the same state.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Butte and St Pierre are in the same state.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Billings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.",
        "conclusions": "St Pierre and Bismarck are in the same state.",
        "rationale": "from typing import Optional\n\nclass City:\n    def __init__(self, name: str, state: Optional[str] = None):\n        self.name = name\n        self.state = state\n\nclass State:\n    def __init__(self, name: str):\n        self.name = name\n        self.cities = []\n\ndef apply_premises():\n    montana = State(\"Montana\")\n    st_pierre = City(\"St Pierre\", state=None)\n    bismarck = City(\"Bismarck\", state=None)\n    cities = [\n        City(\"Billings\", state=\"Montana\"),\n        City(\"Butte\", state=\"Montana\"),\n        City(\"Helena\", state=\"Montana\"),\n        City(\"Missoula\", state=\"Montana\"),\n        City(\"White Sulphur Springs\", state=\"Montana\"),\n        st_pierre,\n        bismarck\n    ]\n    \n    for city in cities:\n        if city.name == \"Billings\":\n            montana.cities.append(city)\n        elif city.name in [\"Butte\", \"Helena\", \"Missoula\"]:\n            montana.cities.append(city)\n        elif city.name == \"White Sulphur Springs\":\n            montana.cities.append(city)\n        elif city.name == \"St Pierre\":\n            st_pierre.state = \"Not Montana\"\n        elif city.name == \"Bismarck\":\n            bismarck.state = \"Not Montana\"\n        elif city.name == \"St Pierre\":\n            st_pierre.state = \"Not Montana\"\n        else:\n            raise ValueError(f\"City {city.name} not recognized.\")\n    \n    return montana, st_pierre, bismarck\n\ndef run_inference():\n    montana, st_pierre, bismarck = apply_premises()\n    return montana, st_pierre, bismarck\n\ndef check_conclusion(montana: State, st_pierre: City, bismarck: City) -> str:\n    montana_cities = {city.name for city in montana.cities}\n    if st_pierre.state == \"Montana\" and bismarck.state == \"Montana\":\n        return \"True\"\n    elif st_pierre.state != \"Montana\" and bismarck.state != \"Montana\":\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    montana, st_pierre, bismarck = run_inference()\n    result = check_conclusion(montana, st_pierre, bismarck)\n    return result\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: St Pierre and Bismarck are in the same state?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBillings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\n</premises>\n<conclusion>\nSt Pierre and Bismarck are in the same state.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? St Pierre and Bismarck are in the same state.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Billings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.",
        "conclusions": "Montana is home to the city of Missoula.",
        "rationale": "from typing import Optional\n\nclass City:\n    def __init__(self, name: str, state: Optional[str] = None):\n        self.name = name\n        self.state = state\n\nclass State:\n    def __init__(self, name: str, cities: Optional[list] = None):\n        self.name = name\n        self.cities = cities if cities is not None else []\n\ndef apply_premises(state: State) -> bool:\n    changed = False\n\n    # Premise 1: Billings is a city in the state of Montana in U.S.\n    if \"Billings\" not in state.cities:\n        state.cities.append(\"Billings\")\n        changed = True\n\n    # Premise 2: The state of Montana includes the cities of Butte, Helena, and Missoula.\n    if \"Butte\" not in state.cities:\n        state.cities.append(\"Butte\")\n        changed = True\n    if \"Helena\" not in state.cities:\n        state.cities.append(\"Helena\")\n        changed = True\n    if \"Missoula\" not in state.cities:\n        state.cities.append(\"Missoula\")\n        changed = True\n\n    # Premise 3: White Sulphur Springs and Butte are cities in the same state in U.S.\n    # Since Butte is already in Montana, White Sulphur Springs must be in Montana.\n    if \"White Sulphur Springs\" not in state.cities:\n        state.cities.append(\"White Sulphur Springs\")\n        changed = True\n\n    # Premise 4: The city of St Pierre is not in the state of Montana.\n    if \"St Pierre\" in state.cities:\n        state.cities.remove(\"St Pierre\")\n        changed = True\n\n    # Premise 5: Any city in Butte is not in St Pierre.\n    # Since Butte is in Montana, no city in Butte can be in St Pierre.\n    # This premise does not affect Montana's cities directly.\n\n    # Premise 6: A city can only be in one state in U.S. except for Bristol, Texarkana, Texhoma, and Union City.\n    # This premise does not affect Montana's cities directly.\n\n    return changed\n\ndef run_inference(state: State):\n    while apply_premises(state):\n        pass\n\ndef check_conclusion(state: State) -> str:\n    run_inference(state)\n    # Conclusion: Montana is home to the city of Missoula.\n    if \"Missoula\" in state.cities:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    montana = State(name=\"Montana\", cities=None)\n    return check_conclusion(montana)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Montana is home to the city of Missoula?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBillings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\n</premises>\n<conclusion>\nMontana is home to the city of Missoula.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Montana is home to the city of Missoula.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "International students in the US have either an F1 visa or a J1 visa.\nAn international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.",
        "conclusions": "Mike has an F1 visa.",
        "rationale": "from typing import Optional\n\nclass Visa:\n    def __init__(self, type: Optional[str] = None):\n        self.type = type\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 visa: Optional[Visa] = None,\n                 can_apply_cpt: Optional[bool] = None,\n                 can_apply_opt: Optional[bool] = None):\n        self.name = name\n        self.visa = visa\n        self.can_apply_cpt = can_apply_cpt\n        self.can_apply_opt = can_opt\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: International students in the US have either an F1 visa or a J1 visa.\n    # Mike is an international student, so he has either an F1 or a J1 visa.\n    if student.name == \"Mike\" and student.visa is None:\n        student.visa = Visa(type=None)\n        changed = True\n\n    # Premise 2: An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n    # Mike needs to apply for CPT if he wants to work in the US, which implies he has an F1 visa.\n    if student.name == \"Mike\" and student.can_apply_cpt is None:\n        student.can_apply_cpt = True\n        changed = True\n        student.visa.type = \"F1\"\n        changed = True\n\n    # Premise 3: An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n    # Mike needs to apply for CPT if he wants to work in the US, which implies he has an F1 visa.\n    if student.name == \"Mike\" and student.can_apply_opt is None:\n        student.can_apply_opt = False\n        changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    if student.name == \"Mike\" and student.visa.type == \"F1\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    student = Student(\n        name=\"Mike\",\n        visa=None,\n        can_apply_cpt=None,\n        can_apply_opt=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Mike has an F1 visa?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nInternational students in the US have either an F1 visa or a J1 visa.\nAn international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.\n</premises>\n<conclusion>\nMike has an F1 visa.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Mike has an F1 visa.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "International students in the US have either an F1 visa or a J1 visa.\nAn international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.",
        "conclusions": "Mike has a J1 visa.",
        "rationale": "from typing import Optional\n\nclass Visa:\n    def __init__(self, name: str, is_f1: Optional[bool] = None, is_j1: Optional[bool] = None):\n        self.name = name\n        self.is_f1 = is_f1\n        self.is_j1 = is_j1\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 is_international: Optional[bool] = None,\n                 visa: Optional[Visa] = None,\n                 needs_cpt: Optional[bool] = None,\n                 needs_opt: Optional[bool] = None):\n        self.name = name\n        self.is_international = is_international\n        self.visa = visa\n        self.needs_cpt = needs_cpt\n        self.needs_opt = needs_opt\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: International students in the US have either an F1 visa or a J1 visa.\n    if student.is_international is True:\n        if student.visa is None:\n            student.visa = Visa(name=None, is_f1=None, is_j1=None)\n            changed = True\n\n    # Premise 2: An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n    if student.visa is not None and student.visa.is_f1 is True:\n        if student.needs_cpt is None and student.needs_opt is None:\n            student.needs_cpt = True\n            changed = True\n\n    # Premise 3: Mike is an international student.\n    if student.name == \"Mike\":\n        if student.is_international is None:\n            student.is_international = True\n            changed = True\n\n    # Premise 4: Mike needs to apply for CPT if he wants to work in the US.\n    if student.name == \"Mike\":\n        if student.needs_cpt is None:\n            student.needs_cpt = True\n            changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    if student.visa is None:\n        return \"Uncertain\"\n    if student.visa.is_j1 is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    student = Student(\n        name=\"Mike\",\n        is_international=None,\n        visa=None,\n        needs_cpt=None,\n        needs_opt=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Mike has a J1 visa?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nInternational students in the US have either an F1 visa or a J1 visa.\nAn international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.\n</premises>\n<conclusion>\nMike has a J1 visa.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Mike has a J1 visa.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.",
        "conclusions": "Ted is a pet.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, name: str, is_brown_swiss: Optional[bool] = None, is_pet: Optional[bool] = None, is_domesticated: Optional[bool] = None):\n        self.name = name\n        self.is_brown_swiss = is_brown_swiss\n        self.is_pet = is_pet\n        self.is_domesticated = is_domesticated\n\ndef apply_premises(animals: Animal):\n    changed = False\n\n    # Premise 1: All Brown Swiss cattle are cows.\n    if animals.is_brown_swiss is True and animals.is_pet is None:\n        animals.is_pet = False  # Brown Swiss cattle cannot be pets.\n        changed = True\n\n    # Premise 2: Some pets are Brown Swiss Cattle.\n    if animals.is_pet is True and animals.is_brown_swiss is None:\n        animals.is_brown_swiss = True\n        changed = True\n\n    # Premise 3: All cows are domesticated animals.\n    if animals.is_pet is False and animals.is_brown_swiss is False and animals.is_domesticated is None:\n        animals.is_domesticated = True\n        changed = True\n\n    # Premise 4: Alligators are not domesticated animals.\n    if animals.name == \"Ted\" and animals.is_brown_swiss is None and animals.is_pet is None and animals.is_domesticated is None:\n        animals.is_domesticated = False\n        changed = True\n\n    # Premise 5: Ted is an alligator.\n    if animals.name == \"Ted\" and animals.is_brown_swiss is None and animals.is_pet is None:\n        animals.is_brown_swiss = False\n        animals.is_pet = False\n        changed = True\n\n    return changed\n\ndef run_inference(animals: Animal):\n    while apply_premises(animals):\n        pass\n\ndef check_conclusion(animals: Animal) -> str:\n    run_inference(animals)\n    if animals.name == \"Ted\" and animals.is_pet is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions\n    ted = Animal(name=\"Ted\")\n    return check_conclusion(ted)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ted is a pet?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.\n</premises>\n<conclusion>\nTed is a pet.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Ted is a pet.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.",
        "conclusions": "Ted is a pet and Brown Swiss cattle",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, is_brown_swiss: Optional[bool] = None,\n                 is_cow: Optional[bool] = None,\n                 is_pet: Optional[bool] = None,\n                 is_domesticated: Optional[bool] = None,\n                 is_alligator: Optional[bool] = None):\n        self.is_brown_swiss = is_brown_swiss\n        self.is_cow = is_cow\n        self.is_pet = is_pet\n        self.is_domesticated = is_domesticated\n        self.is_alligator = is_alligator\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All Brown Swiss cattle are cows.\n    if animal.is_brown_swiss is True and animal.is_cow is not True:\n        animal.is_cow = True\n        changed = True\n\n    # Premise 2: Some pets are Brown Swiss Cattle.\n    # This does not force all Brown Swiss Cattle to be pets, but we can set this to True for now.\n    if animal.is_brown_swiss is True and animal.is_pet is None:\n        animal.is_pet = True\n        changed = True\n\n    # Premise 3: All cows are domesticated animals.\n    if animal.is_cow is True and animal.is_domesticated is not True:\n        animal.is_domesticated = True\n        changed = True\n\n    # Premise 4: Alligators are not domesticated animals.\n    if animal.is_alligator is True and animal.is_domesticated is not False:\n        animal.is_domesticated = False\n        changed = True\n\n    # Premise 5: Ted is an alligator.\n    if animal.name == \"Ted\" and animal.is_alligator is None:\n        animal.is_alligator = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: Ted is a pet and Brown Swiss cattle.\n    # If any of these attributes are not set, then the statement is uncertain.\n    if animal.name != \"Ted\" or animal.is_alligator is None or animal.is_brown_swiss is None or animal.is_pet is None:\n        return \"Uncertain\"\n    if animal.is_brown_swiss is True and animal.is_pet is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    animal = Animal(\n        is_brown_swiss=None,\n        is_cow=None,\n        is_pet=None,\n        is_domesticated=None,\n        is_alligator=None,\n        name=\"Ted\"\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ted is a pet and Brown Swiss cattle?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.\n</premises>\n<conclusion>\nTed is a pet and Brown Swiss cattle\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Ted is a pet and Brown Swiss cattle\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.",
        "conclusions": "If Ted is a Brown Swiss cattle, then Ted is not a pet.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, is_brown_swiss: Optional[bool] = None, is_pet: Optional[bool] = None, is_domesticated: Optional[bool] = None):\n        self.is_brown_swiss = is_brown_swiss\n        self.is_pet = is_pet\n        self.is_domesticated = is_domesticated\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All Brown Swiss cattle are cows.\n    if animal.is_brown_swiss is True and animal.is_cow is not True:\n        animal.is_cow = True\n        changed = True\n\n    # Premise 2: Some pets are Brown Swiss Cattle.\n    # This does not force that all Brown Swiss Cattle are pets, but only that some are.\n    # Since Ted is an alligator, this premise does not affect Ted.\n    \n    # Premise 3: All cows are domesticated animals.\n    if animal.is_cow is True and animal.is_domesticated is not True:\n        animal.is_domesticated = True\n        changed = True\n\n    # Premise 4: Alligators are not domesticated animals.\n    if animal.is_domesticated is True and animal.is_alligator is not True:\n        animal.is_alligator = True\n        changed = True\n\n    # Premise 5: Ted is an alligator.\n    if animal.name == \"Ted\" and animal.is_alligator is not True:\n        animal.is_alligator = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: If Ted is a Brown Swiss cattle, then Ted is not a pet.\n    # Check if Ted is a Brown Swiss cattle and a pet.\n    if animal.name == \"Ted\" and animal.is_brown_swiss is True and animal.is_pet is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    # Initial conditions\n    animal = Animal(\n        is_brown_swiss=None,\n        is_pet=None,\n        is_domesticated=None,\n        name=\"Ted\"\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Ted is a Brown Swiss cattle, then Ted is not a pet?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.\n</premises>\n<conclusion>\nIf Ted is a Brown Swiss cattle, then Ted is not a pet.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Ted is a Brown Swiss cattle, then Ted is not a pet.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Yale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
        "conclusions": "A private Ivy League research university moved to New Haven.",
        "rationale": "from typing import Optional\n\nclass University:\n    def __init__(self,\n                 name: str,\n                 is_private: Optional[bool] = None,\n                 is_ivy_league: Optional[bool] = None,\n                 is_research_university: Optional[bool] = None,\n                 location: Optional[str] = None,\n                 year_moved: Optional[int] = None):\n        self.name = name\n        self.is_private = is_private\n        self.is_ivy_league = is_ivy_league\n        self.is_research_university = is_research_university\n        self.location = location\n        self.year_moved = year_moved\n\ndef apply_premises(university: University) -> bool:\n    changed = False\n\n    # Premise 1: Yale University is a private Ivy League research university.\n    if university.name == \"Yale University\":\n        if university.is_private is None:\n            university.is_private = True\n            changed = True\n        if university.is_ivy_league is None:\n            university.is_ivy_league = True\n            changed = True\n        if university.is_research_university is None:\n            university.is_research_university = True\n            changed = True\n\n    # Premise 2: Yale University moved to New Haven in 1716.\n    if university.name == \"Yale University\":\n        if university.location is None:\n            university.location = \"New Haven\"\n            changed = True\n        if university.year_moved is None:\n            university.year_moved = 1716\n            changed = True\n\n    return changed\n\ndef run_inference(university: University):\n    while apply_premises(university):\n        pass\n\ndef check_conclusion(university: University) -> str:\n    run_inference(university)\n    # Conclusion: A private Ivy League research university moved to New Haven.\n    # Check if all conditions are met\n    if (university.is_private is True and\n        university.is_ivy_league is True and\n        university.is_research_university is True and\n        university.location == \"New Haven\" and\n        university.year_moved == 1716):\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    university = University(\n        name=\"Yale University\",\n        is_private=None,\n        is_ivy_league=None,\n        is_research_university=None,\n        location=None,\n        year_moved=None\n    )\n    return check_conclusion(university)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A private Ivy League research university moved to New Haven?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nYale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n</premises>\n<conclusion>\nA private Ivy League research university moved to New Haven.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? A private Ivy League research university moved to New Haven.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Yale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
        "conclusions": "Yale University has the largest university endowment of any educational institution.",
        "rationale": "from typing import Optional\n\nclass University:\n    def __init__(self, name: str, endowment: Optional[float] = None):\n        self.name = name\n        self.endowment = endowment\n\nclass Premises:\n    def __init__(self):\n        self.yale = University(\"Yale University\", 42.3 * 1e9)  # $42.3 billion endowment\n\ndef apply_premises(premises: Premises) -> bool:\n    changed = False\n    # Premise 1: Yale University is a private Ivy League research university.\n    # Premise 2: Yale University moved to New Haven in 1716.\n    # Premise 3: Yale university's endowment was valued at $42.3 billion.\n    if premises.yale.endowment is None:\n        premises.yale.endowment = 42.3 * 1e9\n        changed = True\n    # Premise 4: A list of residential colleges at Yale.\n    # This premise does not affect the endowment value.\n    return changed\n\ndef run_inference(premises: Premises):\n    while apply_premises(premises):\n        pass\n\ndef check_conclusion(premises: Premises) -> str:\n    run_inference(premises)\n    # Conclusion: Yale University has the largest university endowment of any educational institution.\n    # To check if it is true, we need to compare it with other universities.\n    # Since we do not have information about other universities' endowments,\n    # we cannot definitively say if it is the largest or not.\n    return \"Uncertain\"\n\ndef func():\n    premises = Premises()\n    return check_conclusion(premises)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Yale University has the largest university endowment of any educational institution?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nYale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n</premises>\n<conclusion>\nYale University has the largest university endowment of any educational institution.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Yale University has the largest university endowment of any educational institution.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Yale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
        "conclusions": "Pierson College is a residential college at Yale.",
        "rationale": "from typing import Optional\n\nclass College:\n    def __init__(self, name: str, is_residential: Optional[bool] = None):\n        self.name = name\n        self.is_residential = is_residential\n\nclass University:\n    def __init__(self, name: str, colleges: list[College]):\n        self.name = name\n        self.colleges = colleges\n\ndef apply_premises(university: University) -> bool:\n    changed = False\n\n    # Premise 1: Yale University is a private Ivy League research university.\n    # This is a description of the university and does not affect the colleges.\n    \n    # Premise 2: Yale University moved to New Haven in 1716.\n    # This is a historical fact and does not affect the colleges.\n    \n    # Premise 3: Yale university's endowment was valued at $42.3 billion.\n    # This is a financial fact and does not affect the colleges.\n    \n    # Premise 4: A list of residential colleges at Yale.\n    # We need to create the colleges and set their is_residential attribute to True.\n    for college_name in [\n        \"Benjamin Franklin College\", \"Berkeley College\", \"Branford College\", \n        \"Davenport College\", \"Ezra Stiles College\", \"Grace Hopper College\", \n        \"Jonathan Edwards College\", \"Morse College\", \"Pauli Murray College\", \n        \"Pierson College\", \"Saybrook College\", \"Silliman College\", \n        \"Timothy Dwight College\", \"Trumbull College\"\n    ]:\n        college = College(name=college_name, is_residential=True)\n        university.colleges.append(college)\n        changed = True\n\n    return changed\n\ndef run_inference(university: University):\n    while apply_premises(university):\n        pass\n\ndef check_conclusion(university: University) -> str:\n    run_inference(university)\n    pierson_college = next((college for college in university.colleges if college.name == \"Pierson College\"), None)\n    if pierson_college is not None and pierson_college.is_residential is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    colleges = []\n    university = University(name=\"Yale University\", colleges=colleges)\n    return check_conclusion(university)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Pierson College is a residential college at Yale?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nYale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n</premises>\n<conclusion>\nPierson College is a residential college at Yale.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Pierson College is a residential college at Yale.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Badults is a British Sitcom series starring members of Pappy's.\nBadults was piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults.",
        "conclusions": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
        "rationale": "from typing import Optional\n\nclass Series:\n    def __init__(self,\n                 working_title: Optional[str] = None,\n                 script_editor: Optional[str] = None):\n        self.working_title = working_title\n        self.script_editor = script_editor\n\ndef apply_premises(series: Series) -> bool:\n    changed = False\n\n    # Premise 2: Badults was piloted in July 2013 on BBC Three.\n    # This premise does not affect the script editor or working title, so no change is made.\n\n    # Premise 3: The Working title \"The Secret Dude Society\" was used for Badults.\n    if series.working_title is None:\n        series.working_title = \"The Secret Dude Society\"\n        changed = True\n\n    # Premise 4: Andrew Collins was the script editor for Badults.\n    if series.script_editor is None:\n        series.script_editor = \"Andrew Collins\"\n        changed = True\n\n    return changed\n\ndef run_inference(series: Series):\n    while apply_premises(series):\n        pass\n\ndef check_conclusion(series: Series) -> str:\n    run_inference(series)\n    # Conclusion: Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n    if series.working_title == \"The Secret Dude Society\" and series.script_editor == \"Andrew Collins\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    series = Series(\n        working_title=None,\n        script_editor=None\n    )\n    return check_conclusion(series)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Andrew Collins was the script editor for a series with the working title 'The Secret Dude Society'? \", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBadults is a British Sitcom series starring members of Pappy's.\nBadults was piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults.\n</premises>\n<conclusion>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Badults is a British Sitcom series starring members of Pappy's.\nBadults was piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults.",
        "conclusions": "No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.",
        "rationale": "from typing import Optional\n\nclass Show:\n    def __init__(self, title: str, pilot_network: Optional[str] = None, stars: Optional[list] = None):\n        self.title = title\n        self.pilot_network = pilot_network\n        self.stars = stars if stars is not None else []\n\nclass Person:\n    def __init__(self, name: str, starred_in: Optional[list] = None):\n        self.name = name\n        self.starred_in = starred_in if starred_in is not None else []\n\nclass Pappy:\n    def __init__(self, members: Optional[list] = None):\n        self.members = members if members is not None else []\n\ndef apply_premises(shows: list, people: list, pappy: Pappy) -> bool:\n    changed = False\n\n    # Premise 1: Badults is a British Sitcom series starring members of Pappy's.\n    badults = Show(title=\"Badults\", stars=[])\n    pappy_members = [p.name for p in people if p.name in pappy.members]\n    for member in pappy_members:\n        badults.stars.append(member)\n    shows.append(badults)\n    changed = True\n\n    # Premise 2: Badults was piloted in July 2013 on BBC Three.\n    badults.pilot_network = \"BBC Three\"\n    changed = True\n\n    # Premise 3: The Working title \"The Secret Dude Society\" was used for Badults.\n    # This does not provide new information about stars or network.\n    changed = False\n\n    # Premise 4: Andrew Collins was the script editor for Badults.\n    # This does not provide new information about stars or network.\n    changed = False\n\n    return changed\n\ndef run_inference(shows: list, people: list, pappy: Pappy):\n    while apply_premises(shows, people, pappy):\n        pass\n\ndef check_conclusion(shows: list, people: list, pappy: Pappy) -> str:\n    run_inference(shows, people, pappy)\n    # Conclusion: No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.\n    pappy_members = [p.name for p in people if p.name in pappy.members]\n    for show in shows:\n        if show.pilot_network in [\"BBC Two\", \"BBC Three\"]:\n            if any(member in show.stars for member in pappy_members):\n                return \"False\"\n    return \"True\"\n\ndef func():\n    # Initial conditions\n    pappy = Pappy(members=[\"Andrew Collins\"])\n    people = [Person(name=\"Andrew Collins\")]\n    shows = []\n\n    return check_conclusion(shows, people, pappy)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No members of Pappy's have starred in a show piloting on BBC Two or BBC Three?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBadults is a British Sitcom series starring members of Pappy's.\nBadults was piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults.\n</premises>\n<conclusion>\nNo members of Pappy's have starred in a show piloting on BBC Two or BBC Three.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.",
        "conclusions": "KO is a stock.",
        "rationale": "from typing import Optional\n\nclass Stock:\n    def __init__(self,\n                 is_growth: Optional[bool] = None,\n                 is_mature: Optional[bool] = None):\n        self.is_growth = is_growth\n        self.is_mature = is_mature\n\ndef apply_premises(stock: Stock) -> bool:\n    changed = False\n\n    # Premise 1: All growth stocks are bought to earn profits from rapid price appreciation.\n    if stock.is_growth is True and stock.is_mature is not False:\n        stock.is_mature = False\n        changed = True\n\n    # Premise 2: If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\n    if stock.is_growth is True and stock.is_mature is not False:\n        stock.is_mature = False\n        changed = True\n\n    # Premise 3: Some stocks are growth stocks.\n    # This premise does not directly update the state of the stock, but it confirms that there exists a growth stock.\n    if stock.is_growth is None:\n        stock.is_growth = True\n        changed = True\n\n    # Premise 4: All mature stocks are suitable for a retirement fund.\n    if stock.is_mature is True and stock.is_growth is not False:\n        stock.is_growth = False\n        changed = True\n\n    # Premise 5: KO is a mature stock.\n    if stock.name == \"KO\":\n        if stock.is_mature is None:\n            stock.is_mature = True\n            changed = True\n\n    return changed\n\ndef run_inference(stock: Stock):\n    while apply_premises(stock):\n        pass\n\ndef check_conclusion(stock: Stock) -> str:\n    run_inference(stock)\n    if stock.name == \"KO\":\n        if stock.is_growth is None and stock.is_mature is True:\n            return \"Uncertain\"\n        elif stock.is_growth is False and stock.is_mature is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions:\n    # KO is a mature stock.\n    # The is_growth status of KO is initially unknown.\n    stock = Stock(\n        is_growth=None,\n        is_mature=True,\n        name=\"KO\"\n    )\n    return check_conclusion(stock)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KO is a stock?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.\n</premises>\n<conclusion>\nKO is a stock.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? KO is a stock.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.",
        "conclusions": "KO is a stock and a growth stock.",
        "rationale": "from typing import Optional\n\nclass Stock:\n    def __init__(self,\n                 is_growth: Optional[bool] = None,\n                 is_mature: Optional[bool] = None):\n        self.is_growth = is_growth\n        self.is_mature = is_mature\n\ndef apply_premises(stock: Stock) -> bool:\n    changed = False\n\n    # Premise 1: All growth stocks are bought to earn profits from rapid price appreciation.\n    if stock.is_growth is True and stock.is_growth is None:\n        stock.is_growth = True\n        changed = True\n\n    # Premise 2: If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\n    if stock.is_growth is True and stock.is_mature is not False:\n        stock.is_mature = False\n        changed = True\n\n    # Premise 3: Some stocks are growth stocks.\n    # This only tells us that at least one stock is a growth stock,\n    # so it does not force that KO (or any other specific stock) is a growth stock.\n\n    # Premise 4: All mature stocks are suitable for a retirement fund.\n    # This only tells us about the suitability for a retirement fund,\n    # and does not affect the growth status of KO.\n\n    # Premise 5: KO is a mature stock -> True\n    if stock.name == \"KO\":\n        if stock.is_mature is None:\n            stock.is_mature = True\n            changed = True\n\n    return changed\n\ndef run_inference(stock: Stock):\n    while apply_premises(stock):\n        pass\n\ndef check_conclusion(stock: Stock) -> str:\n    run_inference(stock)\n    # Conclusion: KO is a stock and a growth stock.\n    # if is_growth or is_mature is None, then Uncertain\n    if stock.name == \"KO\":\n        if stock.is_growth is None or stock.is_mature is None:\n            return \"Uncertain\"\n        if stock.is_growth is True and stock.is_mature is True:\n            return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    stock = Stock(\n        is_growth=None,\n        is_mature=None\n    )\n    return check_conclusion(stock)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KO is a stock and a growth stock?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.\n</premises>\n<conclusion>\nKO is a stock and a growth stock.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? KO is a stock and a growth stock.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.",
        "conclusions": "If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.",
        "rationale": "from typing import Optional\n\nclass Stock:\n    def __init__(self,\n                 is_growth: Optional[bool] = None,\n                 is_mature: Optional[bool] = None,\n                 is_bought_for_profit: Optional[bool] = None,\n                 is_volatile: Optional[bool] = None):\n        self.is_growth = is_growth\n        self.is_mature = is_mature\n        self.is_bought_for_profit = is_bought_for_profit\n        self.is_volatile = is_volatile\n\ndef apply_premises(stock: Stock) -> bool:\n    changed = False\n\n    # Premise 1: All growth stocks are bought to earn profits from rapid price appreciation.\n    if stock.is_growth is True and stock.is_bought_for_profit is None:\n        stock.is_bought_for_profit = True\n        changed = True\n\n    # Premise 2: If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\n    if stock.is_bought_for_profit is True and stock.is_mature is None:\n        stock.is_mature = False\n        changed = True\n\n    # Premise 3: Some stocks are growth stocks.\n    # This does not force any specific stock to be a growth stock, so no change here.\n\n    # Premise 4: All mature stocks are suitable for a retirement fund.\n    # This does not affect the value of is_growth or is_bought_for_profit directly, so no change here.\n\n    # Premise 5: KO is a mature stock.\n    if stock.name == \"KO\" and stock.is_mature is None:\n        stock.is_mature = True\n        changed = True\n\n    return changed\n\ndef run_inference(stock: Stock):\n    while apply_premises(stock):\n        pass\n\ndef check_conclusion(stock: Stock) -> str:\n    run_inference(stock)\n    # Conclusion: If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.\n    if stock.name == \"KO\":\n        if stock.is_growth is True or stock.is_bought_for_profit is True:\n            if stock.is_growth is True or stock.is_bought_for_profit is True:\n                if stock.is_growth is True or stock.is_bought_for_profit is True:\n                    if stock.is_volatile is None:\n                        stock.is_volatile = False\n                    return \"True\"\n    return \"False\"\n\ndef func():\n    # Initial conditions:\n    stock = Stock(\n        is_growth=None,\n        is_mature=None,\n        is_bought_for_profit=None,\n        is_volatile=None,\n        name=\"KO\"\n    )\n    return check_conclusion(stock)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.\n</premises>\n<conclusion>\nIf KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul. \nJoe's vehicle registration plate is from Istanbul. \nTom's license plate begins with the number 35. \nIf a license plate begins with the number 35, then it does not begin with the number 34.",
        "conclusions": "Joe's license plate begins with the number 34.",
        "rationale": "from typing import Optional\n\nclass LicensePlate:\n    def __init__(self, begins_with_34: Optional[bool] = None, from_Istanbul: Optional[bool] = None):\n        self.begins_with_34 = begins_with_34\n        self.from_Istanbul = from_Istanbul\n\ndef apply_premises(plate: LicensePlate) -> bool:\n    changed = False\n\n    # Premise 1: All vehicle registration plates in Istanbul begin with the number 34.\n    if plate.from_Istanbul is True and plate.begins_with_34 is not True:\n        plate.begins_with_34 = True\n        changed = True\n\n    # Premise 2: Plates that do not begin with the number 34 are not from Istanbul.\n    if plate.begins_with_34 is False and plate.from_Istanbul is not False:\n        plate.from_Istanbul = False\n        changed = True\n\n    # Premise 3: Joe's vehicle registration plate is from Istanbul.\n    if plate.name == \"Joe\" and plate.from_Istanbul is None:\n        plate.from_Istanbul = True\n        changed = True\n\n    # Premise 4: Tom's license plate begins with the number 35.\n    if plate.name == \"Tom\" and plate.begins_with_34 is None:\n        plate.begins_with_34 = False\n        changed = True\n\n    # Premise 5: If a license plate begins with the number 35, then it does not begin with the number 34.\n    if plate.name == \"Tom\" and plate.begins_with_34 is not False:\n        plate.begins_with_34 = False\n        changed = True\n\n    return changed\n\ndef run_inference(plate: LicensePlate):\n    while apply_premises(plate):\n        pass\n\ndef check_conclusion(plate: LicensePlate) -> str:\n    run_inference(plate)\n    if plate.name == \"Joe\" and plate.begins_with_34 is True:\n        return \"True\"\n    elif plate.name == \"Joe\" and plate.begins_with_34 is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    plate = LicensePlate(from_Istanbul=None, begins_with_34=None)\n    plate.name = \"Joe\"\n    return check_conclusion(plate)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Joe's license plate begins with the number 34?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul. \nJoe's vehicle registration plate is from Istanbul. \nTom's license plate begins with the number 35. \nIf a license plate begins with the number 35, then it does not begin with the number 34.\n</premises>\n<conclusion>\nJoe's license plate begins with the number 34.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Joe's license plate begins with the number 34.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul. \nJoe's vehicle registration plate is from Istanbul. \nTom's license plate begins with the number 35. \nIf a license plate begins with the number 35, then it does not begin with the number 34.",
        "conclusions": "Tom's license plate is from Istanbul.",
        "rationale": "from typing import Optional\n\nclass LicensePlate:\n    def __init__(self, starts_with_34: Optional[bool] = None, starts_with_35: Optional[bool] = None, from_Istanbul: Optional[bool] = None):\n        self.starts_with_34 = starts_with_34\n        self.starts_with_35 = starts_with_35\n        self.from_Istanbul = from_Istanbul\n\ndef apply_premises(license_plate: LicensePlate) -> bool:\n    changed = False\n\n    # Premise 1: All vehicle registration plates in Istanbul begin with the number 34.\n    if license_plate.from_Istanbul is True and license_plate.starts_with_34 is not True:\n        license_plate.starts_with_34 = True\n        changed = True\n\n    # Premise 2: Plates that do not begin with the number 34 are not from Istanbul.\n    if license_plate.starts_with_34 is False and license_plate.from_Istanbul is not False:\n        license_plate.from_Istanbul = False\n        changed = True\n\n    # Premise 3: Joe's vehicle registration plate is from Istanbul.\n    # No change needed as it does not affect Tom's plate.\n\n    # Premise 4: Tom's license plate begins with the number 35.\n    if license_plate.starts_with_35 is None:\n        license_plate.starts_with_35 = True\n        changed = True\n\n    # Premise 5: If a license plate begins with the number 35, then it does not begin with the number 34.\n    if license_plate.starts_with_35 is True and license_plate.starts_with_34 is not False:\n        license_plate.starts_with_34 = False\n        changed = True\n\n    return changed\n\ndef run_inference(license_plate: LicensePlate):\n    while apply_premises(license_plate):\n        pass\n\ndef check_conclusion(license_plate: LicensePlate) -> str:\n    run_inference(license_plate)\n    if license_plate.from_Istanbul is True:\n        return \"True\"\n    elif license_plate.from_Istanbul is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    license_plate = LicensePlate(from_Istanbul=None, starts_with_34=None, starts_with_35=None)\n    return check_conclusion(license_plate)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom's license plate is from Istanbul?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul. \nJoe's vehicle registration plate is from Istanbul. \nTom's license plate begins with the number 35. \nIf a license plate begins with the number 35, then it does not begin with the number 34.\n</premises>\n<conclusion>\nTom's license plate is from Istanbul.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Tom's license plate is from Istanbul.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.",
        "conclusions": "Hannah needs to earn money to help pay for her college tuition.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 works_in_student_jobs: Optional[bool] = None,\n                 needs_to_earn_money: Optional[bool] = None,\n                 enjoys_dining_hall: Optional[bool] = None,\n                 picky_eater: Optional[bool] = None,\n                 spends_time_eating: Optional[bool] = None):\n        self.name = name\n        self.works_in_student_jobs = works_in_student_jobs\n        self.needs_to_earn_money = needs_to_earn_money\n        self.enjoys_dining_hall = enjoys_dining_hall\n        self.picky_eater = picky_eater\n        self.spends_time_eating = spends_time_eating\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n    if person.works_in_student_jobs is True and person.needs_to_earn_money is None:\n        person.needs_to_earn_money = True\n        changed = True\n\n    # Premise 2: If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\n    if person.needs_to_earn_money is True and person.works_in_student_jobs is None:\n        person.works_in_student_jobs = True\n        changed = True\n\n    # Premise 3: People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\n    if person.works_in_student_jobs is None and person.enjoys_dining_hall is None:\n        person.enjoys_dining_hall = True\n        changed = True\n\n    # Premise 4: If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\n    if person.enjoys_dining_hall is True and person.picky_eater is None:\n        person.picky_eater = False\n        changed = True\n\n    # Premise 5: If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n    if person.enjoys_dining_hall is True and person.spends_time_eating is None:\n        person.spends_time_eating = True\n        changed = True\n\n    # Premise 6: Hannah is at Mary's school.\n    if person.name == \"Hannah\":\n        if person.works_in_student_jobs is None:\n            person.works_in_student_jobs = True\n            changed = True\n\n    # Premise 7: Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n    if person.name == \"Hannah\":\n        if person.works_in_student_jobs is True and person.needs_to_earn_money is not None and person.picky_eater is not None:\n            if person.needs_to_earn_money is True and person.picky_eater is False:\n                person.needs_to_earn_money = False\n                changed = True\n            elif person.needs_to_earn_money is False:\n                person.needs_to_earn_money = False\n                changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Hannah\" and person.needs_to_earn_money is True:\n        return \"True\"\n    elif person.name == \"Hannah\" and person.needs_to_earn_money is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Hannah\",\n        works_in_student_jobs=None,\n        needs_to_earn_money=None,\n        enjoys_dining_hall=None,\n        picky_eater=None,\n        spends_time_eating=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Hannah needs to earn money to help pay for her college tuition?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n</premises>\n<conclusion>\nHannah needs to earn money to help pay for her college tuition.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Hannah needs to earn money to help pay for her college tuition.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.",
        "conclusions": "Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 works_in_student_jobs: Optional[bool] = None,\n                 needs_money: Optional[bool] = None,\n                 is_picky: Optional[bool] = None,\n                 spends_time_eating: Optional[bool] = None):\n        self.name = name\n        self.works_in_student_jobs = works_in_student_jobs\n        self.needs_money = needs_money\n        self.is_picky = is_picky\n        self.spends_time_eating = spends_time_eating\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n    if person.works_in_student_jobs is True and person.needs_money is None:\n        person.needs_money = True\n        changed = True\n\n    # Premise 2: If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\n    if person.needs_money is True and person.works_in_student_jobs is None:\n        person.works_in_student_jobs = True\n        changed = True\n\n    # Premise 3: People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\n    if person.works_in_student_jobs is True and person.spends_time_eating is None:\n        person.spends_time_eating = True\n        changed = True\n\n    # Premise 4: If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\n    if person.spends_time_eating is True and person.is_picky is None:\n        person.is_picky = False\n        changed = True\n\n    # Premise 5: If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n    if person.is_picky is False and person.spends_time_eating is None:\n        person.spends_time_eating = True\n        changed = True\n\n    # Hannah's specific premises\n    if person.name == \"Hannah\":\n        if person.works_in_student_jobs is None:\n            person.works_in_student_jobs = True\n            changed = True\n        if person.needs_money is None and person.works_in_student_jobs is True:\n            person.needs_money = False\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\n    if person.name == \"Hannah\":\n        if person.works_in_student_jobs is True and person.is_picky is False and person.spends_time_eating is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Hannah\",\n        works_in_student_jobs=None,\n        needs_money=None,\n        is_picky=None,\n        spends_time_eating=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n</premises>\n<conclusion>\nHannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.",
        "conclusions": "Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, works_in_student_jobs: Optional[bool] = None, needs_money: Optional[bool] = None, is_picky: Optional[bool] = None, spends_time_eating: Optional[bool] = None):\n        self.name = name\n        self.works_in_student_jobs = works_in_student_jobs\n        self.needs_money = needs_money\n        self.is_picky = is_picky\n        self.spends_time_eating = spends_time_eating\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n    if person.name == \"Hannah\" and person.works_in_student_jobs is True:\n        if person.needs_money is None:\n            person.needs_money = True\n            changed = True\n\n    # Premise 2: If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\n    if person.name == \"Hannah\" and person.works_in_student_jobs is True:\n        if person.needs_money is None:\n            person.needs_money = True\n            changed = True\n\n    # Premise 3: People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\n    # No direct update here, just ensuring the conditions.\n\n    # Premise 4: If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\n    if person.name == \"Hannah\" and person.is_picky is True:\n        if person.needs_money is True:\n            person.needs_money = False\n            changed = True\n\n    # Premise 5: If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n    if person.name == \"Hannah\" and person.is_picky is True:\n        if person.spends_time_eating is None:\n            person.spends_time_eating = True\n            changed = True\n\n    # Premise 6: Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n    if person.name == \"Hannah\" and person.works_in_student_jobs is True and person.needs_money is True:\n        if person.is_picky is None:\n            person.is_picky = False\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\n    if person.name == \"Hannah\":\n        if person.is_picky is None or (person.is_picky is True and person.spends_time_eating is True):\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Hannah\",\n        works_in_student_jobs=None,\n        needs_money=None,\n        is_picky=None,\n        spends_time_eating=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n</premises>\n<conclusion>\nHannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are products of Baked by Melissa.",
        "rationale": "from typing import Optional\n\nclass Product:\n    def __init__(self,\n                 name: str,\n                 is_baked_sweet: Optional[bool] = None,\n                 is_cupcake: Optional[bool] = None,\n                 is_mala_hotpot: Optional[bool] = None,\n                 is_dried_thai_chili: Optional[bool] = None,\n                 is_baked_by_melissa: Optional[bool] = None):\n        self.name = name\n        self.is_baked_sweet = is_baked_sweet\n        self.is_cupcake = is_cupcake\n        self.is_mala_hotpot = is_mala_hotpot\n        self.is_dried_thai_chili = is_dried_thai_chili\n        self.is_baked_by_melissa = is_baked_by_melissa\n\ndef apply_premises(product: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    if product.is_baked_sweet is True and product.is_dried_thai_chili is True:\n        product.is_dried_thai_chili = False\n        changed = True\n\n    # Premise 2: All cupcakes are baked sweets.\n    if product.is_cupcake is True and product.is_baked_sweet is not True:\n        product.is_baked_sweet = True\n        changed = True\n\n    # Premise 3: All mala hotpots are spicy.\n    if product.is_mala_hotpot is True and product.is_dried_thai_chili is not True:\n        product.is_dried_thai_chili = True\n        changed = True\n\n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    if product.is_baked_by_melissa is True and product.is_cupcake is not True:\n        product.is_cupcake = True\n        changed = True\n\n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    if product.is_dried_thai_chili is True:\n        if product.is_dried_thai_chili is True and product.is_baked_sweet is True:\n            product.is_dried_thai_chili = False\n            changed = True\n        if product.is_mala_hotpot is not True and product.is_dried_thai_chili is True:\n            product.is_dried_thai_chili = False\n            changed = True\n        if product.is_baked_sweet is not True and product.is_dried_thai_chili is True:\n            product.is_dried_thai_chili = False\n            changed = True\n\n    return changed\n\ndef run_inference(product: Product):\n    while apply_premises(product):\n        pass\n\ndef check_conclusion(product: Product) -> str:\n    run_inference(product)\n    # Conclusion: Dried Thai chilies are products of Baked by Melissa.\n    if product.is_dried_thai_chili is None or product.is_baked_by_melissa is None:\n        return \"Uncertain\"\n    if product.is_dried_thai_chili is True and product.is_baked_by_melissa is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    product = Product(\n        name=\"Dried Thai chilies\",\n        is_baked_sweet=None,\n        is_cupcake=None,\n        is_mala_hotpot=None,\n        is_dried_thai_chili=True,\n        is_baked_by_melissa=None\n    )\n    return check_conclusion(product)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are products of Baked by Melissa?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</premises>\n<conclusion>\nDried Thai chilies are products of Baked by Melissa.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are products of Baked by Melissa.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are not products of Baked by Melissa.",
        "rationale": "from typing import Optional\n\nclass Product:\n    def __init__(self,\n                 name: str,\n                 is_baked_sweet: Optional[bool] = None,\n                 is_cupcake: Optional[bool] = None,\n                 is_mala_hotpot: Optional[bool] = None,\n                 is_dried_thai_chilies: Optional[bool] = None,\n                 is_from_baked_by_melissa: Optional[bool] = None):\n        self.name = name\n        self.is_baked_sweet = is_baked_sweet\n        self.is_cupcake = is_cupcake\n        self.is_mala_hotpot = is_mala_hotpot\n        self.is_dried_thai_chilies = is_dried_thai_chilies\n        self.is_from_baked_by_melissa = is_from_baked_by_melissa\n\ndef apply_premises(product: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    if product.is_baked_sweet is not None and product.is_baked_sweet is True:\n        product.is_dried_thai_chilies = False\n        changed = True\n\n    # Premise 2: All cupcakes are baked sweets.\n    if product.is_cupcake is not None and product.is_cupcake is True:\n        product.is_baked_sweet = True\n        changed = True\n\n    # Premise 3: All mala hotpots are spicy.\n    if product.is_mala_hotpot is not None and product.is_mala_hotpot is True:\n        product.is_dried_thai_chilies = True\n        changed = True\n\n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    if product.is_from_baked_by_melissa is not None and product.is_from_baked_by_melissa is True:\n        product.is_cupcake = True\n        changed = True\n\n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    if product.is_dried_thai_chilies is not None and product.is_dried_thai_chilies is True:\n        if product.is_baked_sweet is not None and product.is_baked_sweet is False:\n            pass  # This is consistent with Premise 1.\n        elif product.is_mala_hotpot is not None and product.is_mala_hotpot is True:\n            pass  # This is consistent with Premise 3.\n        else:\n            product.is_spicy = True\n            changed = True\n\n    return changed\n\ndef run_inference(product: Product):\n    while apply_premises(product):\n        pass\n\ndef check_conclusion(product: Product) -> str:\n    run_inference(product)\n    if product.is_from_baked_by_melissa is not None and product.is_from_baked_by_melissa is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    product = Product(\n        name=\"Dried Thai chilies\",\n        is_baked_sweet=None,\n        is_cupcake=None,\n        is_mala_hotpot=None,\n        is_dried_thai_chilies=True,\n        is_from_baked_by_melissa=None\n    )\n    return check_conclusion(product)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are not products of Baked by Melissa?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</premises>\n<conclusion>\nDried Thai chilies are not products of Baked by Melissa.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are not products of Baked by Melissa.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are a mala hotpot.",
        "rationale": "from typing import Optional\n\nclass Product:\n    def __init__(self,\n                 is_baked_sweet: Optional[bool] = None,\n                 is_cupcake: Optional[bool] = None,\n                 is_mala_hotpot: Optional[bool] = None,\n                 is_spicy: Optional[bool] = None,\n                 is_dried_thai_chilies: Optional[bool] = None):\n        self.is_baked_sweet = is_baked_sweet\n        self.is_cupcake = is_cupcake\n        self.is_mala_hotpot = is_mala_hotpot\n        self.is_spicy = is_spicy\n        self.is_dried_thai_chilies = is_dried_thai_chilies\n\ndef apply_premises(product: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    if product.is_baked_sweet is True and product.is_spicy is not False:\n        product.is_spicy = False\n        changed = True\n\n    # Premise 2: All cupcakes are baked sweets.\n    if product.is_cupcake is True and product.is_baked_sweet is not True:\n        product.is_baked_sweet = True\n        changed = True\n\n    # Premise 3: All mala hotpots are spicy.\n    if product.is_mala_hotpot is True and product.is_spicy is not True:\n        product.is_spicy = True\n        changed = True\n\n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    # No direct update for is_mala_hotpot or is_spicy based on this premise.\n\n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    if product.is_dried_thai_chilies is True:\n        if product.is_spicy is not True and product.is_mala_hotpot is not True and product.is_baked_sweet is not False:\n            product.is_spicy = True\n            product.is_mala_hotpot = True\n            product.is_baked_sweet = False\n            changed = True\n\n    return changed\n\ndef run_inference(product: Product):\n    while apply_premises(product):\n        pass\n\ndef check_conclusion(product: Product) -> str:\n    run_inference(product)\n    if product.is_dried_thai_chilies is True and product.is_mala_hotpot is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    product = Product(\n        is_baked_sweet=None,\n        is_cupcake=None,\n        is_mala_hotpot=None,\n        is_spicy=None,\n        is_dried_thai_chilies=None\n    )\n    return check_conclusion(product)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are a mala hotpot?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</premises>\n<conclusion>\nDried Thai chilies are a mala hotpot.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are a mala hotpot.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.",
        "rationale": "from typing import Optional\n\nclass Product:\n    def __init__(self,\n                 is_baked_sweet: Optional[bool] = None,\n                 is_mala_hotpot: Optional[bool] = None,\n                 is_spicy: Optional[bool] = None,\n                 is_baked_by_melissa: Optional[bool] = None,\n                 is_dried_thai_chilies: Optional[bool] = None):\n        self.is_baked_sweet = is_baked_sweet\n        self.is_mala_hotpot = is_mala_hotpot\n        self.is_spicy = is_spicy\n        self.is_baked_by_melissa = is_baked_by_melissa\n        self.is_dried_thai_chilies = is_dried_thai_chilies\n\ndef apply_premises(product: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    if product.is_baked_sweet is True and product.is_spicy is not False:\n        product.is_spicy = False\n        changed = True\n\n    # Premise 2: All cupcakes are baked sweets.\n    if product.is_baked_by_melissa is True and product.is_baked_sweet is not True:\n        product.is_baked_sweet = True\n        changed = True\n\n    # Premise 3: All mala hotpots are spicy.\n    if product.is_mala_hotpot is True and product.is_spicy is not True:\n        product.is_spicy = True\n        changed = True\n\n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    if product.is_baked_by_melissa is True and product.is_baked_sweet is not True:\n        product.is_baked_sweet = True\n        changed = True\n\n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    if product.is_dried_thai_chilies is True and product.is_spicy is not True:\n        product.is_spicy = True\n        changed = True\n    if product.is_dried_thai_chilies is True and product.is_mala_hotpot is not True:\n        product.is_mala_hotpot = True\n        changed = True\n    if product.is_dried_thai_chilies is True and product.is_baked_sweet is not False:\n        product.is_baked_sweet = False\n        changed = True\n\n    return changed\n\ndef run_inference(product: Product):\n    while apply_premises(product):\n        pass\n\ndef check_conclusion(product: Product) -> str:\n    run_inference(product)\n    # Conclusion: Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.\n    if product.is_dried_thai_chilies is None:\n        return \"Uncertain\"\n    if product.is_baked_by_melissa is True or product.is_baked_sweet is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    product = Product(\n        is_baked_sweet=None,\n        is_mala_hotpot=None,\n        is_spicy=None,\n        is_baked_by_melissa=None,\n        is_dried_thai_chilies=True\n    )\n    return check_conclusion(product)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are neither products of Baked by Melissa nor baked sweets?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</premises>\n<conclusion>\nDried Thai chilies are neither products of Baked by Melissa nor baked sweets.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are cupcakes and products of Baked by Melissa.",
        "rationale": "from typing import Optional\n\nclass Product:\n    def __init__(self,\n                 is_baked_sweet: Optional[bool] = None,\n                 is_cupcake: Optional[bool] = None,\n                 is_mala_hotpot: Optional[bool] = None,\n                 is_baked_by_melissa: Optional[bool] = None,\n                 is_spicy: Optional[bool] = None,\n                 is_dried_thai_chilies: Optional[bool] = None):\n        self.is_baked_sweet = is_baked_sweet\n        self.is_cupcake = is_cupcake\n        self.is_mala_hotpot = is_mala_hotpot\n        self.is_baked_by_melissa = is_baked_by_melissa\n        self.is_spicy = is_spicy\n        self.is_dried_thai_chilies = is_dried_thai_chilies\n\ndef apply_premises(product: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    if product.is_baked_sweet is True and product.is_spicy is not False:\n        product.is_spicy = False\n        changed = True\n\n    # Premise 2: All cupcakes are baked sweets.\n    if product.is_cupcake is True and product.is_baked_sweet is not True:\n        product.is_baked_sweet = True\n        changed = True\n\n    # Premise 3: All mala hotpots are spicy.\n    if product.is_mala_hotpot is True and product.is_spicy is not True:\n        product.is_spicy = True\n        changed = True\n\n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    if product.is_baked_by_melissa is True and product.is_cupcake is not True:\n        product.is_cupcake = True\n        changed = True\n\n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    if product.is_dried_thai_chilies is True:\n        if product.is_spicy is None:\n            product.is_spicy = True\n            changed = True\n        if product.is_mala_hotpot is None:\n            product.is_mala_hotpot = True\n            changed = True\n        if product.is_baked_sweet is None:\n            product.is_baked_sweet = False\n            changed = True\n\n    return changed\n\ndef run_inference(product: Product):\n    while apply_premises(product):\n        pass\n\ndef check_conclusion(product: Product) -> str:\n    run_inference(product)\n    if product.is_dried_thai_chilies is True:\n        if product.is_cupcake is True and product.is_baked_by_melissa is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    product = Product(\n        is_baked_sweet=None,\n        is_cupcake=None,\n        is_mala_hotpot=None,\n        is_baked_by_melissa=None,\n        is_spicy=None,\n        is_dried_thai_chilies=True\n    )\n    return check_conclusion(product)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are cupcakes and products of Baked by Melissa?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</premises>\n<conclusion>\nDried Thai chilies are cupcakes and products of Baked by Melissa.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are cupcakes and products of Baked by Melissa.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.",
        "conclusions": "If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.",
        "rationale": "from typing import Optional\n\nclass Restaurant:\n    def __init__(self,\n                 provides_take_out: Optional[bool] = None,\n                 rating: Optional[int] = None,\n                 has_many_negative_reviews: Optional[bool] = None,\n                 listed_in_yelp: Optional[bool] = None,\n                 popular_among_residents: Optional[bool] = None):\n        self.provides_take_out = provides_take_out\n        self.rating = rating\n        self.has_many_negative_reviews = has_many_negative_reviews\n        self.listed_in_yelp = listed_in_yelp\n        self.popular_among_residents = popular_among_residents\n\ndef apply_premises(store: Restaurant) -> bool:\n    changed = False\n\n    # Premise 1: If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\n    if store.listed_in_yelp is True and store.has_many_negative_reviews is not False:\n        store.has_many_negative_reviews = False\n        changed = True\n\n    # Premise 2: All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\n    if store.rating > 4 and store.listed_in_yelp is not True:\n        store.listed_in_yelp = True\n        changed = True\n\n    # Premise 3: Some restaurants that do not provide take-out service receive many negative reviews.\n    # This is a statement about some, not all, and does not directly update the current instance.\n    # We infer that if a restaurant does not provide take-out service and has many negative reviews, it must be listed in Yelp's recommendations.\n    if store.provides_take_out is False and store.has_many_negative_reviews is True and store.listed_in_yelp is not True:\n        store.listed_in_yelp = True\n        changed = True\n\n    # Premise 4: All restaurants that are popular among local residents have ratings greater than four.\n    if store.popular_among_residents is True and store.rating is None:\n        store.rating = 5  # Assuming a rating greater than 4, can be set to 5 for simplification\n        changed = True\n\n    # Premise 5: The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n    if store.name == \"Hamden Plaza Subway\" and (store.rating is None or store.popular_among_residents is None):\n        if store.rating is None:\n            store.rating = 5\n        if store.popular_among_residents is None:\n            store.popular_among_residents = True\n        changed = True\n\n    return changed\n\ndef run_inference(store: Restaurant):\n    while apply_premises(store):\n        pass\n\ndef check_conclusion(store: Restaurant) -> str:\n    run_inference(store)\n    # Conclusion: If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.\n    if store.name == \"Hamden Plaza Subway\":\n        if store.provides_take_out is True and store.has_many_negative_reviews is True:\n            if store.rating is None or store.rating <= 4:\n                return \"False\"\n            if store.provides_take_out is True:\n                return \"False\"\n            else:\n                return \"True\"\n        else:\n            return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    store = Restaurant(\n        provides_take_out=None,\n        rating=None,\n        has_many_negative_reviews=None,\n        listed_in_yelp=None,\n        popular_among_residents=None\n    )\n    return check_conclusion(store)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n</premises>\n<conclusion>\nIf the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.",
        "conclusions": "The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.",
        "rationale": "from typing import Optional\n\nclass Restaurant:\n    def __init__(self,\n                 rating: Optional[int] = None,\n                 listed_in_yelp: Optional[bool] = None,\n                 popular_among_residents: Optional[bool] = None,\n                 provides_take_out: Optional[bool] = None,\n                 receives_many_negative_reviews: Optional[bool] = None):\n        self.rating = rating\n        self.listed_in_yelp = listed_in_yelp\n        self.popular_among_residents = popular_among_residents\n        self.provides_take_out = provides_take_out\n        self.receives_many_negative_reviews = receives_many_negative_reviews\n\ndef apply_premises(restaurant: Restaurant) -> bool:\n    changed = False\n\n    # Premise 1: If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\n    if restaurant.listed_in_yelp is True and restaurant.receives_many_negative_reviews is not False:\n        restaurant.receives_many_negative_reviews = False\n        changed = True\n\n    # Premise 2: All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\n    if restaurant.rating is not None and restaurant.rating > 4 and restaurant.listed_in_yelp is not True:\n        restaurant.listed_in_yelp = True\n        changed = True\n\n    # Premise 3: Some restaurants that do not provide take-out service receive many negative reviews.\n    # We cannot definitively assign values here, but we will use this premise for inference.\n    \n    # Premise 4: All restaurants that are popular among local residents have ratings greater than four.\n    if restaurant.popular_among_residents is True and restaurant.rating is None:\n        restaurant.rating = 5  # Assume the highest possible rating for definitiveness\n        changed = True\n    if restaurant.popular_among_residents is True and restaurant.listed_in_yelp is not True:\n        restaurant.listed_in_yelp = True\n        changed = True\n\n    # Premise 5: The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n    if restaurant.name == \"The Hamden Plaza Subway store\" and (restaurant.rating is None or restaurant.rating > 4):\n        if restaurant.rating is None:\n            restaurant.rating = 5  # Assume the highest possible rating for definitiveness\n        restaurant.listed_in_yelp = True\n        changed = True\n    if restaurant.name == \"The Hamden Plaza Subway store\" and restaurant.popular_among_residents is None:\n        restaurant.popular_among_residents = True\n        changed = True\n\n    return changed\n\ndef run_inference(restaurant: Restaurant):\n    while apply_premises(restaurant):\n        pass\n\ndef check_conclusion(restaurant: Restaurant) -> str:\n    run_inference(restaurant)\n    if restaurant.provides_take_out is None:\n        return \"Uncertain\"\n    if restaurant.receives_many_negative_reviews is False:\n        return \"True\"\n    return \"False\"\n\ndef func():\n    restaurant = Restaurant(\n        name=\"The Hamden Plaza Subway store\",\n        rating=None,\n        listed_in_yelp=None,\n        popular_among_residents=None,\n        provides_take_out=None,\n        receives_many_negative_reviews=None\n    )\n    return check_conclusion(restaurant)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n</premises>\n<conclusion>\nThe Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.",
        "conclusions": "The Hamden Plaza store does not provide take-out service.",
        "rationale": "from typing import Optional\n\nclass Restaurant:\n    def __init__(self,\n                 rating: Optional[int] = None,\n                 listed_in_yelp: Optional[bool] = None,\n                 popular_among_residents: Optional[bool] = None,\n                 provides_take_out: Optional[bool] = None):\n        self.rating = rating\n        self.listed_in_yelp = listed_in_yelp\n        self.popular_among_residents = popular_among_residents\n        self.provides_take_out = provides_take_out\n\ndef apply_premises(restaurant: Restaurant) -> bool:\n    changed = False\n\n    # Premise 1: If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\n    # This premise does not directly update the take-out status, so no change is made here.\n    \n    # Premise 2: All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\n    if restaurant.rating is not None and restaurant.rating > 4 and restaurant.listed_in_yelp is not True:\n        restaurant.listed_in_yelp = True\n        changed = True\n\n    # Premise 3: Some restaurants that do not provide take-out service receive many negative reviews.\n    # This premise does not directly update the take-out status, so no change is made here.\n\n    # Premise 4: All restaurants that are popular among local residents have ratings greater than four.\n    if restaurant.popular_among_residents is not None and restaurant.popular_among_residents is True and restaurant.rating is not None and restaurant.rating <= 4:\n        restaurant.rating = 5  # Assign a rating greater than 4\n        changed = True\n\n    # Premise 5: The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n    if restaurant.name == \"Hamden Plaza Subway\":\n        if restaurant.rating is None:\n            restaurant.rating = 5  # Assign a rating greater than 4\n            changed = True\n        if restaurant.popular_among_residents is None:\n            restaurant.popular_among_residents = True\n            changed = True\n\n    return changed\n\ndef run_inference(restaurant: Restaurant):\n    while apply_premises(restaurant):\n        pass\n\ndef check_conclusion(restaurant: Restaurant) -> str:\n    run_inference(restaurant)\n    if restaurant.name == \"Hamden Plaza Subway\":\n        if restaurant.provides_take_out is None:\n            return \"Uncertain\"\n        elif restaurant.provides_take_out is False:\n            return \"True\"\n        else:\n            return \"False\"\n\ndef func():\n    restaurant = Restaurant(\n        name=\"Hamden Plaza Subway\",\n        rating=None,\n        listed_in_yelp=None,\n        popular_among_residents=None,\n        provides_take_out=None\n    )\n    return check_conclusion(restaurant)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Hamden Plaza store does not provide take-out service?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n</premises>\n<conclusion>\nThe Hamden Plaza store does not provide take-out service.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The Hamden Plaza store does not provide take-out service.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "In superhero movies, the good guys always win.\nThe Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\nGood guys fight bad guys and vice versa.\nSir Digby fights his nemesis.\nIf a superhero movie is named after a character, that character is a good guy.\nThe Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\nIf somebody wins a fight, the person they are fighting does not win.\nIf a superhero movie is named after a character, that character is in the movie.",
        "conclusions": "Sir Digby\u2019s nemesis does not win.",
        "rationale": "from typing import Optional\n\nclass Movie:\n    def __init__(self,\n                 name: str,\n                 genre: str,\n                 named_after_character: Optional[str] = None,\n                 is_good_guy: Optional[bool] = None):\n        self.name = name\n        self.genre = genre\n        self.named_after_character = named_after_character\n        self.is_good_guy = is_good_guy\n\nclass Character:\n    def __init__(self, name: str, is_good_guy: Optional[bool] = None):\n        self.name = name\n        self.is_good_guy = is_good_guy\n\ndef apply_premises(movie: Movie, character: Character) -> bool:\n    changed = False\n\n    # Premise 1: In superhero movies, the good guys always win.\n    if movie.genre == \"superhero\" and movie.is_good_guy is None:\n        movie.is_good_guy = True\n        changed = True\n\n    # Premise 2: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n    if movie.name == \"The Surprising Adventures of Sir Digby Chicken Caesar\" and movie.genre is None:\n        movie.genre = \"superhero\"\n        changed = True\n\n    # Premise 3: Good guys fight bad guys and vice versa.\n    # Premise 4: Sir Digby fights his nemesis.\n    if movie.is_good_guy is True and character.name == \"Sir Digby\" and character.is_good_guy is None:\n        character.is_good_guy = True\n        changed = True\n    if character.name == \"Sir Digby\" and character.is_good_guy is True and movie.is_good_guy is None:\n        movie.is_good_guy = True\n        changed = True\n\n    # Premise 5: If a superhero movie is named after a character, that character is a good guy.\n    if movie.name == \"The Surprising Adventures of Sir Digby Chicken Caesar\" and movie.named_after_character is None:\n        movie.named_after_character = \"Sir Digby\"\n        changed = True\n    if movie.named_after_character == \"Sir Digby\" and character.name == \"Sir Digby\" and character.is_good_guy is None:\n        character.is_good_guy = True\n        changed = True\n\n    # Premise 6: If somebody wins a fight, the person they are fighting does not win.\n    if movie.is_good_guy is True and character.name == \"Sir Digby\" and character.is_good_guy is True:\n        if character.name == \"Sir Digby\" and character.is_good_guy is True and movie.is_good_guy is True:\n            return False  # This premise is already satisfied by the previous checks.\n\n    # Premise 7: If a superhero movie is named after a character, that character is in the movie.\n    if movie.name == \"The Surprising Adventures of Sir Digby Chicken Caesar\" and character.name == \"Sir Digby\" and character.is_good_guy is None:\n        character.is_good_guy = True\n        changed = True\n\n    return changed\n\ndef run_inference(movie: Movie, character: Character):\n    while apply_premises(movie, character):\n        pass\n\ndef check_conclusion(movie: Movie, character: Character) -> str:\n    run_inference(movie, character)\n    if character.name == \"Sir Digby\" and character.is_good_guy is True:\n        # If Sir Digby is a good guy, his nemesis does not win.\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    movie = Movie(name=\"The Surprising Adventures of Sir Digby Chicken Caesar\", genre=None, named_after_character=None, is_good_guy=None)\n    character = Character(name=\"Sir Digby\", is_good_guy=None)\n    return check_conclusion(movie, character)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Sir Digby\u2019s nemesis does not win?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIn superhero movies, the good guys always win.\nThe Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\nGood guys fight bad guys and vice versa.\nSir Digby fights his nemesis.\nIf a superhero movie is named after a character, that character is a good guy.\nThe Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\nIf somebody wins a fight, the person they are fighting does not win.\nIf a superhero movie is named after a character, that character is in the movie.\n</premises>\n<conclusion>\nSir Digby\u2019s nemesis does not win.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Sir Digby\u2019s nemesis does not win.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Books contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.",
        "conclusions": "Walden contains knowledge.",
        "rationale": "from typing import Optional\n\nclass Book:\n    def __init__(self, name: str, contains knowledge: Optional[bool] = None):\n        self.name = name\n        self.contains_knowledge = contains_knowledge\n\nclass Person:\n    def __init__(self, name: str, reads_book: Optional[Book] = None, gains_knowledge: Optional[bool] = None, becomes_smarter: Optional[bool] = None):\n        self.name = name\n        self.reads_book = reads_book\n        self.gains_knowledge = gains_knowledge\n        self.becomes_smarter = becomes_smarter\n\ndef apply_premises(book: Book, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Books contain tons of knowledge.\n    if book.contains_knowledge is None:\n        book.contains_knowledge = True\n        changed = True\n\n    # Premise 2: When a person reads a book, that person gains knowledge.\n    if person.name == \"Harry\" and person.reads_book is not None and person.reads_book.name == \"Walden\":\n        if person.gains_knowledge is None:\n            person.gains_knowledge = True\n            changed = True\n\n    # Premise 3: If a person gains knowledge, they become smarter.\n    if person.gains_knowledge is True and person.becomes_smarter is not True:\n        person.becomes_smarter = True\n        changed = True\n\n    return changed\n\ndef run_inference(book: Book, person: Person):\n    while apply_premises(book, person):\n        pass\n\ndef check_conclusion(book: Book) -> str:\n    run_inference(book, person)\n    if book.contains_knowledge is True:\n        return \"True\"\n    elif book.contains_knowledge is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    book = Book(name=\"Walden\")\n    person = Person(name=\"Harry\", reads_book=book)\n    return check_conclusion(book)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Walden contains knowledge?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBooks contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\n</premises>\n<conclusion>\nWalden contains knowledge.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Walden contains knowledge.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Books contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.",
        "conclusions": "Harry is smarter than before.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, smarter: Optional[bool] = None):\n        self.name = name\n        self.smarter = smarter\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Books contain tons of knowledge.\n    # This premise does not directly impact Harry's knowledge or intelligence.\n    \n    # Premise 2: When a person reads a book, that person gains knowledge.\n    if person.name == \"Harry\" and person.smarter is None:\n        person.smarter = False  # Initially assume Harry is not smarter.\n        changed = True\n\n    # Premise 3: If a person gains knowledge, they become smarter.\n    if person.smarter is False and \"Walden\" in \" \".join([\"Walden\"]):  # Harry read \"Walden\".\n        person.smarter = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Harry\" and person.smarter is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(name=\"Harry\", smarter=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Harry is smarter than before?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBooks contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\n</premises>\n<conclusion>\nHarry is smarter than before.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Harry is smarter than before.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Books contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.",
        "conclusions": "A smarter person has gained knowledge.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_smarter: Optional[bool] = None,\n                 has_gained_knowledge: Optional[bool] = None):\n        self.name = name\n        self.is_smarter = is_smarter\n        self.has_gained_knowledge = has_gained_knowledge\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Books contain tons of knowledge.\n    # This premise does not affect the person directly.\n    \n    # Premise 2: When a person reads a book, that person gains knowledge.\n    if person.name == \"Harry\" and person.has_gained_knowledge is None and person.reads_book(\"Walden\") is True:\n        person.has_gained_knowledge = True\n        changed = True\n\n    # Premise 3: If a person gains knowledge, they become smarter.\n    if person.has_gained_knowledge is True and person.is_smarter is not True:\n        person.is_smarter = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.is_smarter is True:\n        if person.has_gained_knowledge is True:\n            return \"True\"\n        elif person.has_gained_knowledge is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If the person is not smarter, the conclusion cannot be evaluated.\n        return \"Uncertain\"\n\ndef func():\n    # Premise 4: Harry read the book \"Walden\" by Henry Thoreau.\n    # Here we assume initially he has not gained knowledge (has_gained_knowledge = False).\n    person = Person(\n        name=\"Harry\",\n        is_smarter=None,\n        has_gained_knowledge=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A smarter person has gained knowledge?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBooks contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\n</premises>\n<conclusion>\nA smarter person has gained knowledge.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? A smarter person has gained knowledge.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "A natural language processing task can be categorized as either a language generation task or a language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.",
        "conclusions": "Machine translation is a language generation task.",
        "rationale": "from typing import Optional\n\nclass Task:\n    def __init__(self, category: Optional[str] = None, is_language_generation: Optional[bool] = None):\n        self.category = category\n        self.is_language_generation = is_language_generation\n\ndef apply_premises(task: Task) -> bool:\n    changed = False\n\n    # Premise 1: A natural language processing task can be categorized as either a language generation task or a language understanding task.\n    if task.category is None:\n        task.category = \"either language generation or language understanding\"\n        changed = True\n\n    # Premise 2: If the output of a natural language processing task is a text sequence, then it is a language generation task.\n    if task.category == \"language generation\" or task.category == \"either language generation or language understanding\":\n        if task.is_language_generation is None:\n            task.is_language_generation = True\n            changed = True\n\n    # Premise 3: Machine translation is a natural language processing task.\n    if task.category == \"either language generation or language understanding\":\n        if task.category != \"language generation\":\n            task.category = \"language generation\"\n            changed = True\n\n    # Premise 4: The output of machine translation is a text sequence.\n    if task.category == \"language generation\" or task.category == \"either language generation or language understanding\":\n        if task.is_language_generation is None:\n            task.is_language_generation = True\n            changed = True\n\n    return changed\n\ndef run_inference(task: Task):\n    while apply_premises(task):\n        pass\n\ndef check_conclusion(task: Task) -> str:\n    run_inference(task)\n    # Conclusion: Machine translation is a language generation task.\n    if task.is_language_generation is True:\n        return \"True\"\n    elif task.is_language_generation is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    task = Task()\n    return check_conclusion(task)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Machine translation is a language generation task?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nA natural language processing task can be categorized as either a language generation task or a language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</premises>\n<conclusion>\nMachine translation is a language generation task.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Machine translation is a language generation task.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "A natural language processing task can be categorized as either a language generation task or a language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.",
        "conclusions": "Machine translation is a language understanding task.",
        "rationale": "from typing import Optional\n\nclass Task:\n    def __init__(self, is_language_generation: Optional[bool] = None, is_language_understanding: Optional[bool] = None):\n        self.is_language_generation = is_language_generation\n        self.is_language_understanding = is_language_understanding\n\ndef apply_premises(task: Task) -> bool:\n    changed = False\n\n    # Premise 1: A natural language processing task can be categorized as either a language generation task or a language understanding task.\n    if task.is_language_generation is None and task.is_language_understanding is None:\n        task.is_language_generation = True\n        task.is_language_understanding = False\n        changed = True\n\n    # Premise 2: If the output of a natural language processing task is a text sequence, then it is a language generation task.\n    if task.is_language_understanding is None and task.is_language_generation is True:\n        task.is_language_understanding = False\n        changed = True\n\n    # Premise 3: Machine translation is a natural language processing task.\n    if task.is_language_generation is None and task.is_language_understanding is None:\n        task.is_language_generation = True\n        task.is_language_understanding = False\n        changed = True\n\n    # Premise 4: The output of machine translation is a text sequence.\n    if task.is_language_generation is True and task.is_language_understanding is None:\n        task.is_language_understanding = False\n        changed = True\n\n    return changed\n\ndef run_inference(task: Task):\n    while apply_premises(task):\n        pass\n\ndef check_conclusion(task: Task) -> str:\n    run_inference(task)\n    if task.is_language_understanding is True:\n        return \"True\"\n    elif task.is_language_understanding is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    task = Task()\n    return check_conclusion(task)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Machine translation is a language understanding task?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nA natural language processing task can be categorized as either a language generation task or a language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</premises>\n<conclusion>\nMachine translation is a language understanding task.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Machine translation is a language understanding task.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Pets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. ",
        "conclusions": "Tom will rent an apartment in The Olive Garden.",
        "rationale": "from typing import Optional\n\nclass Building:\n    def __init__(self, name: str, is_managed: Optional[bool] = None, allows_pets: Optional[bool] = None, monthly_rent: Optional[int] = None):\n        self.name = name\n        self.is_managed = is_managed\n        self.allows_pets = allows_pets\n        self.monthly_rent = monthly_rent\n\nclass Pet:\n    def __init__(self, name: str, is_cat: Optional[bool] = None):\n        self.name = name\n        self.is_cat = is_cat\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 has_pet: Optional[bool] = None,\n                 pet: Optional[Pet] = None,\n                 can_rent: Optional[bool] = None,\n                 deposit: Optional[int] = None):\n        self.name = name\n        self.has_pet = has_pet\n        self.pet = pet\n        self.can_rent = can_rent\n        self.deposit = deposit\n\ndef apply_premises(building: Building, pet: Pet, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Pets are allowed in some managed buildings.\n    if building.is_managed is None and building.name == \"The Olive Garden\":\n        building.is_managed = True\n        changed = True\n\n    # Premise 2: A deposit is required to rent an apartment in a managed building.\n    if building.is_managed is True and building.name == \"The Olive Garden\":\n        if building.deposit is None:\n            building.deposit = 2000  # The monthly rent at the Olive Garden\n            changed = True\n\n    # Premise 3: The security deposit can be either equal to the monthly rent at a managed building or more.\n    if building.deposit is not None and building.name == \"The Olive Garden\":\n        if building.deposit <= 2000:\n            if building.deposit == 2000:\n                pass\n            else:\n                building.deposit = 2000\n                changed = True\n\n    # Premise 4: Fluffy is Tom's cat.\n    # Premise 5: Cats are pets.\n    if person.name == \"Tom\":\n        if person.has_pet is None:\n            person.has_pet = True\n            changed = True\n        if person.pet is None:\n            person.pet = Pet(name=\"Fluffy\", is_cat=True)\n            changed = True\n\n    # Premise 6: The Olive Garden is a managed building.\n    if building.name == \"The Olive Garden\":\n        if building.is_managed is None:\n            building.is_managed = True\n            changed = True\n\n    # Premise 7: The monthly rent at the Olive Garden is $2000.\n    if building.name == \"The Olive Garden\":\n        if building.monthly_rent is None:\n            building.monthly_rent = 2000\n            changed = True\n\n    # Premise 8: $2000 is more than $1500.\n    if building.deposit is not None and building.deposit == 2000:\n        if building.deposit > 1500:\n            pass\n        else:\n            building.deposit = 2000\n            changed = True\n\n    # Premise 9: Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n    # If a managed building allows pets, then people are allowed to move in with a pet.\n    if building.name == \"The Olive Garden\" and person.has_pet is True:\n        if building.allows_pets is None:\n            building.allows_pets = True\n            changed = True\n        if building.deposit is not None and building.deposit <= 1500:\n            if person.can_rent is None:\n                person.can_rent = True\n                changed = True\n        elif building.deposit > 1500:\n            if person.can_rent is not False:\n                person.can_rent = False\n                changed = True\n\n    return changed\n\ndef run_inference(building: Building, pet: Pet, person: Person):\n    while apply_premises(building, pet, person):\n        pass\n\ndef check_conclusion(building: Building, pet: Pet, person: Person) -> str:\n    run_inference(building, pet, person)\n    if person.name == \"Tom\" and person.can_rent is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    building = Building(name=\"The Olive Garden\", is_managed=None, allows_pets=None, monthly_rent=None)\n    pet = Pet(name=\"Fluffy\", is_cat=None)\n    person = Person(name=\"Tom\", has_pet=None, pet=None, can_rent=None, deposit=None)\n    return check_conclusion(building, pet, person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom will rent an apartment in The Olive Garden?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. \n</premises>\n<conclusion>\nTom will rent an apartment in The Olive Garden.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Tom will rent an apartment in The Olive Garden.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Pets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. ",
        "conclusions": "Tom is allowed to move into an apartment in The Olive Garden with Fluffy.",
        "rationale": "from typing import Optional\n\nclass ManagedBuilding:\n    def __init__(self, name: str, allows_pets: Optional[bool] = None, monthly_rent: Optional[int] = None, deposit_required: Optional[bool] = None, deposit_amount: Optional[int] = None):\n        self.name = name\n        self.allows_pets = allows_pets\n        self.monthly_rent = monthly_rent\n        self.deposit_required = deposit_required\n        self.deposit_amount = deposit_amount\n\nclass Person:\n    def __init__(self, name: str, has_pet: Optional[bool] = None, can_rent: Optional[bool] = None):\n        self.name = name\n        self.has_pet = has_pet\n        self.can_rent = can_rent\n\ndef apply_premises(building: ManagedBuilding, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Pets are allowed in some managed buildings.\n    if building.name == \"The Olive Garden\" and building.allows_pets is None:\n        building.allows_pets = True\n        changed = True\n\n    # Premise 2: A deposit is required to rent an apartment in a managed building.\n    if building.name == \"The Olive Garden\" and building.deposit_required is None:\n        building.deposit_required = True\n        changed = True\n\n    # Premise 3: The security deposit can be either equal to the monthly rent at a managed building or more.\n    if building.name == \"The Olive Garden\" and building.deposit_amount is None:\n        building.deposit_amount = 2000\n        changed = True\n\n    # Premise 4: Fluffy is Tom's cat.\n    # Premise 5: Cats are pets.\n    if person.name == \"Tom\" and person.has_pet is None:\n        person.has_pet = True\n        changed = True\n\n    # Premise 6: The Olive Garden is a managed building.\n    # This is given and does not change the state.\n\n    # Premise 7: The monthly rent at the Olive Garden is $2000.\n    # This is given and does not change the state.\n\n    # Premise 8: $2000 is more than $1500.\n    # This is given and does not change the state.\n\n    # Premise 9: Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n    if person.name == \"Tom\" and person.can_rent is None and building.allows_pets is True and building.deposit_amount is not None and building.deposit_amount <= 1500:\n        person.can_rent = True\n        changed = True\n\n    # Premise 10: If a managed building allows pets, then people are allowed to move in with a pet.\n    if building.name == \"The Olive Garden\" and building.allows_pets is True and person.can_rent is None:\n        person.can_rent = True\n        changed = True\n\n    return changed\n\ndef run_inference(building: ManagedBuilding, person: Person):\n    while apply_premises(building, person):\n        pass\n\ndef check_conclusion(building: ManagedBuilding, person: Person) -> str:\n    run_inference(building, person)\n    if person.can_rent is True:\n        return \"True\"\n    elif person.can_rent is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    building = ManagedBuilding(\n        name=\"The Olive Garden\",\n        allows_pets=None,\n        monthly_rent=2000,\n        deposit_required=None,\n        deposit_amount=None\n    )\n    person = Person(\n        name=\"Tom\",\n        has_pet=None,\n        can_rent=None\n    )\n    return check_conclusion(building, person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is allowed to move into an apartment in The Olive Garden with Fluffy?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. \n</premises>\n<conclusion>\nTom is allowed to move into an apartment in The Olive Garden with Fluffy.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Tom is allowed to move into an apartment in The Olive Garden with Fluffy.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Pets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. ",
        "conclusions": "The security deposit at the Olive Garden is either $2000 or more.",
        "rationale": "from typing import Optional\n\nclass Building:\n    def __init__(self, name: str, is_managed: Optional[bool] = None, allows_pets: Optional[bool] = None):\n        self.name = name\n        self.is_managed = is_managed\n        self.allows_pets = allows_pets\n\nclass Apartment:\n    def __init__(self, building: Building, monthly_rent: Optional[int] = None, security_deposit: Optional[int] = None):\n        self.building = building\n        self.monthly_rent = monthly_rent\n        self.security_deposit = security_deposit\n\ndef apply_premises(building: Building, apartment: Apartment) -> bool:\n    changed = False\n\n    # Premise 1: Pets are allowed in some managed buildings.\n    # We do not know if The Olive Garden is one of them.\n    if building.name == \"The Olive Garden\" and building.is_managed is None:\n        building.is_managed = True\n        changed = True\n\n    # Premise 2: A deposit is required to rent an apartment in a managed building.\n    # This is already assumed in the setup, no need to change.\n\n    # Premise 3: The security deposit can be either equal to the monthly rent at a managed building or more.\n    if building.name == \"The Olive Garden\" and building.is_managed is True and apartment.security_deposit is None:\n        apartment.security_deposit = 2000\n        changed = True\n\n    # Premise 4: $2000 is more than $1500.\n    # This is already assumed in the setup, no need to change.\n\n    # Premise 5: Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n    # This does not affect the security deposit directly, so no change needed.\n\n    # Premise 6: If a managed building allows pets, then people are allowed to move in with a pet.\n    if building.name == \"The Olive Garden\" and building.is_managed is True and building.allows_pets is None:\n        building.allows_pets = True\n        changed = True\n\n    return changed\n\ndef run_inference(building: Building, apartment: Apartment):\n    while apply_premises(building, apartment):\n        pass\n\ndef check_conclusion(building: Building, apartment: Apartment) -> str:\n    run_inference(building, apartment)\n    if building.name == \"The Olive Garden\" and building.is_managed is True:\n        if apartment.security_deposit == 2000:\n            return \"True\"\n        elif apartment.security_deposit > 2000:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    building = Building(name=\"The Olive Garden\")\n    apartment = Apartment(building=building, monthly_rent=2000)\n    return check_conclusion(building, apartment)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The security deposit at the Olive Garden is either $2000 or more?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. \n</premises>\n<conclusion>\nThe security deposit at the Olive Garden is either $2000 or more.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The security deposit at the Olive Garden is either $2000 or more.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. ",
        "conclusions": "The Harvard Weekly Book club has legal obligations.",
        "rationale": "from typing import Optional\n\nclass Organization:\n    def __init__(self,\n                 is_business: Optional[bool] = None,\n                 is_company: Optional[bool] = None,\n                 is_private_company: Optional[bool] = None,\n                 is_legal_entity: Optional[bool] = None,\n                 created_under_law: Optional[bool] = None,\n                 has_legal_obligations: Optional[bool] = None):\n        self.is_business = is_business\n        self.is_company = is_company\n        self.is_private_company = is_private_company\n        self.is_legal_entity = is_legal_entity\n        self.created_under_law = created_under_law\n        self.has_legal_obligations = has_legal_obligations\n\ndef apply_premises(organization: Organization) -> bool:\n    changed = False\n\n    # Premise 1: All business organizations are legal entities.\n    if organization.is_business is True and organization.is_legal_entity is not True:\n        organization.is_legal_entity = True\n        changed = True\n\n    # Premise 2: All companies are business organizations.\n    if organization.is_company is True and organization.is_business is not True:\n        organization.is_business = True\n        changed = True\n\n    # Premise 3: All private companies are companies.\n    if organization.is_private_company is True and organization.is_company is not True:\n        organization.is_company = True\n        changed = True\n\n    # Premise 4: All legal entities are created under law.\n    if organization.is_legal_entity is True and organization.created_under_law is not True:\n        organization.created_under_law = True\n        changed = True\n\n    # Premise 5: All legal entities have legal obligations.\n    if organization.is_legal_entity is True and organization.has_legal_obligations is not True:\n        organization.has_legal_obligations = True\n        changed = True\n\n    # Premise 6: If the Harvard Weekly Book Club is created under law, then it is not a private company.\n    # We assume the Harvard Weekly Book Club is the organization in question.\n    if organization.name == \"Harvard Weekly Book Club\":\n        if organization.created_under_law is True and organization.is_private_company is not False:\n            organization.is_private_company = False\n            changed = True\n\n    return changed\n\ndef run_inference(organization: Organization):\n    while apply_premises(organization):\n        pass\n\ndef check_conclusion(organization: Organization) -> str:\n    run_inference(organization)\n    if organization.name == \"Harvard Weekly Book Club\":\n        if organization.has_legal_obligations is True:\n            return \"True\"\n        elif organization.has_legal_obligations is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    organization = Organization(\n        is_business=None,\n        is_company=None,\n        is_private_company=None,\n        is_legal_entity=None,\n        created_under_law=None,\n        has_legal_obligations=None,\n        name=\"Harvard Weekly Book Club\"\n    )\n    return check_conclusion(organization)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Harvard Weekly Book club has legal obligations?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. \n</premises>\n<conclusion>\nThe Harvard Weekly Book club has legal obligations.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The Harvard Weekly Book club has legal obligations.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. ",
        "conclusions": "The Harvard Weekly Book club has legal obligations and is a private company.",
        "rationale": "from typing import Optional\n\nclass Organization:\n    def __init__(self,\n                 is_business: Optional[bool] = None,\n                 is_company: Optional[bool] = None,\n                 is_private_company: Optional[bool] = None,\n                 is_legal_entity: Optional[bool] = None,\n                 created_under_law: Optional[bool] = None,\n                 has_legal_obligations: Optional[bool] = None):\n        self.is_business = is_business\n        self.is_company = is_company\n        self.is_private_company = is_private_company\n        self.is_legal_entity = is_legal_entity\n        self.created_under_law = created_under_law\n        self.has_legal_obligations = has_legal_obligations\n\ndef apply_premises(organization: Organization) -> bool:\n    changed = False\n\n    # Premise 1: All business organizations are legal entities.\n    if organization.is_business is True and organization.is_legal_entity is not True:\n        organization.is_legal_entity = True\n        changed = True\n\n    # Premise 2: All companies are business organizations.\n    if organization.is_company is True and organization.is_business is not True:\n        organization.is_business = True\n        changed = True\n\n    # Premise 3: All private companies are companies.\n    if organization.is_private_company is True and organization.is_company is not True:\n        organization.is_company = True\n        changed = True\n\n    # Premise 4: All legal entities are created under law.\n    if organization.is_legal_entity is True and organization.created_under_law is not True:\n        organization.created_under_law = True\n        changed = True\n\n    # Premise 5: All legal entities have legal obligations.\n    if organization.is_legal_entity is True and organization.has_legal_obligations is not True:\n        organization.has_legal_obligations = True\n        changed = True\n\n    # Premise 6: If the Harvard Weekly Book Club is created under law, then it is not a private company.\n    if organization.name == \"Harvard Weekly Book Club\" and organization.created_under_law is True and organization.is_private_company is not False:\n        organization.is_private_company = False\n        changed = True\n\n    return changed\n\ndef run_inference(organization: Organization):\n    while apply_premises(organization):\n        pass\n\ndef check_conclusion(organization: Organization) -> str:\n    run_inference(organization)\n    # Conclusion: The Harvard Weekly Book club has legal obligations and is a private company.\n    if organization.name == \"Harvard Weekly Book Club\":\n        if organization.has_legal_obligations is True and organization.is_private_company is True:\n            return \"True\"\n        elif organization.has_legal_obligations is False or organization.is_private_company is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    organization = Organization(\n        is_business=None,\n        is_company=None,\n        is_private_company=None,\n        is_legal_entity=None,\n        created_under_law=None,\n        has_legal_obligations=None,\n        name=\"Harvard Weekly Book Club\"\n    )\n    return check_conclusion(organization)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Harvard Weekly Book club has legal obligations and is a private company?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. \n</premises>\n<conclusion>\nThe Harvard Weekly Book club has legal obligations and is a private company.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The Harvard Weekly Book club has legal obligations and is a private company.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. ",
        "conclusions": "If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.",
        "rationale": "from typing import Optional\n\nclass Organization:\n    def __init__(self,\n                 is_business: Optional[bool] = None,\n                 is_company: Optional[bool] = None,\n                 is_private_company: Optional[bool] = None,\n                 is_created_under_law: Optional[bool] = None,\n                 has_legal_obligations: Optional[bool] = None):\n        self.is_business = is_business\n        self.is_company = is_company\n        self.is_private_company = is_private_company\n        self.is_created_under_law = is_created_under_law\n        self.has_legal_obligations = has_legal_obligations\n\ndef apply_premises(organization: Organization) -> bool:\n    changed = False\n\n    # Premise 1: All business organizations are legal entities.\n    if organization.is_business is True and organization.is_company is None:\n        organization.is_company = True\n        changed = True\n\n    # Premise 2: All companies are business organizations.\n    if organization.is_company is True and organization.is_business is None:\n        organization.is_business = True\n        changed = True\n\n    # Premise 3: All private companies are companies.\n    if organization.is_private_company is True and organization.is_company is None:\n        organization.is_company = True\n        changed = True\n\n    # Premise 4: All legal entities are created under law.\n    if organization.is_company is True and organization.is_created_under_law is None:\n        organization.is_created_under_law = True\n        changed = True\n\n    # Premise 5: All legal entities have legal obligations.\n    if organization.is_company is True and organization.has_legal_obligations is None:\n        organization.has_legal_obligations = True\n        changed = True\n\n    # Premise 6: If the Harvard Weekly Book Club is created under law, then it is not a private company.\n    if organization.is_created_under_law is True and organization.is_private_company is not False:\n        organization.is_private_company = False\n        changed = True\n\n    return changed\n\ndef run_inference(organization: Organization):\n    while apply_premises(organization):\n        pass\n\ndef check_conclusion(organization: Organization) -> str:\n    run_inference(organization)\n    # Conclusion: If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.\n    if organization.is_private_company is True:\n        if organization.has_legal_obligations is None or organization.is_created_under_law is None:\n            return \"Uncertain\"\n        if organization.has_legal_obligations is True or organization.is_created_under_law is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    organization = Organization(\n        is_business=None,\n        is_company=None,\n        is_private_company=None,\n        is_created_under_law=None,\n        has_legal_obligations=None\n    )\n    return check_conclusion(organization)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. \n</premises>\n<conclusion>\nIf the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Animals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.",
        "conclusions": "Harry is a queen bee.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 is_invertebrate: Optional[bool] = None,\n                 is_vertebrate: Optional[bool] = None,\n                 has_backbone: Optional[bool] = None,\n                 reproduces_by_mating: Optional[bool] = None,\n                 is_queen_bee: Optional[bool] = None):\n        self.is_invertebrate = is_invertebrate\n        self.is_vertebrate = is_vertebrate\n        self.has_backbone = has_backbone\n        self.reproduces_by_mating = reproduces_by_mating\n        self.is_queen_bee = is_queen_bee\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Animals are either invertebrates or vertebrates.\n    if animal.is_invertebrate is None and animal.is_vertebrate is None:\n        animal.is_invertebrate = True\n        animal.is_vertebrate = False\n        changed = True\n\n    # Premise 2: All animals with backbones reproduce by male-and-female mating.\n    if animal.has_backbone is True and animal.reproduces_by_mating is not True:\n        animal.reproduces_by_mating = True\n        changed = True\n\n    # Premise 3: All vertebrate animals have a backbone.\n    if animal.is_vertebrate is True and animal.has_backbone is not True:\n        animal.has_backbone = True\n        changed = True\n\n    # Premise 4: All bees do not reproduce by male-and-female mating.\n    if animal.is_invertebrate is True and animal.reproduces_by_mating is True:\n        animal.reproduces_by_mating = False\n        changed = True\n\n    # Premise 5: All queen bees are bees.\n    if animal.is_queen_bee is None and animal.is_invertebrate is True:\n        animal.is_queen_bee = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    if animal.is_queen_bee is None:\n        return \"Uncertain\"\n    elif animal.is_queen_bee is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    animal = Animal(\n        is_invertebrate=None,\n        is_vertebrate=None,\n        has_backbone=None,\n        reproduces_by_mating=None,\n        is_queen_bee=None\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Harry is a queen bee?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAnimals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.\n</premises>\n<conclusion>\nHarry is a queen bee.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Harry is a queen bee.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Animals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.",
        "conclusions": "Harry is an invertebrate or a queen bee.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, is_invertebrate: Optional[bool] = None, has_backbone: Optional[bool] = None, is_queen_bee: Optional[bool] = None):\n        self.is_invertebrate = is_invertebrate\n        self.has_backbone = has_backbone\n        self.is_queen_bee = is_queen_bee\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Animals are either invertebrates or vertebrates.\n    if animal.is_invertebrate is None and animal.has_backbone is None:\n        animal.is_invertebrate = True\n        changed = True\n\n    # Premise 2: All animals with backbones reproduce by male-and-female mating.\n    # This premise does not affect the invertebrate or vertebrate classification.\n\n    # Premise 3: All vertebrate animals have a backbone.\n    if animal.is_invertebrate is False and animal.has_backbone is None:\n        animal.has_backbone = True\n        changed = True\n\n    # Premise 4: All bees do not reproduce by male-and-female mating.\n    # This premise does not affect the invertebrate or vertebrate classification.\n\n    # Premise 5: All queen bees are bees.\n    # This premise does not affect the invertebrate or vertebrate classification.\n\n    # Premise 6: Harry is a bee.\n    if animal.name == \"Harry\" and animal.is_queen_bee is None:\n        animal.is_queen_bee = False\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: Harry is an invertebrate or a queen bee.\n    if animal.is_invertebrate is not None or animal.is_queen_bee is not None:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    animal = Animal(name=\"Harry\", is_invertebrate=None, has_backbone=None, is_queen_bee=None)\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Harry is an invertebrate or a queen bee?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAnimals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.\n</premises>\n<conclusion>\nHarry is an invertebrate or a queen bee.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Harry is an invertebrate or a queen bee.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Animals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.",
        "conclusions": "If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 is_invertebrate: Optional[bool] = None,\n                 is_vertebrate: Optional[bool] = None,\n                 has_backbone: Optional[bool] = None,\n                 is_queen: Optional[bool] = None):\n        self.is_invertebrate = is_invertebrate\n        self.is_vertebrate = is_vertebrate\n        self.has_backbone = has_backbone\n        self.is_queen = is_queen\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Animals are either invertebrates or vertebrates.\n    if animal.is_invertebrate is None and animal.is_vertebrate is None:\n        animal.is_invertebrate = True\n        animal.is_vertebrate = False\n        changed = True\n\n    # Premise 2: All animals with backbones reproduce by male-and-female mating.\n    if animal.has_backbone is True and animal.is_queen is not None and animal.is_queen is True:\n        animal.is_queen = False  # All bees do not reproduce by male-and-female mating.\n        changed = True\n\n    # Premise 3: All vertebrate animals have a backbone.\n    if animal.is_vertebrate is True and animal.has_backbone is not True:\n        animal.has_backbone = True\n        changed = True\n\n    # Premise 4: All bees do not reproduce by male-and-female mating.\n    if animal.is_queen is True and animal.is_invertebrate is None:\n        animal.is_invertebrate = False\n        changed = True\n\n    # Premise 5: All queen bees are bees.\n    if animal.is_queen is True and animal.is_invertebrate is None:\n        animal.is_invertebrate = False\n        changed = True\n\n    # Premise 6: Harry is a bee.\n    if animal.name == \"Harry\" and animal.is_queen is None and animal.is_invertebrate is None:\n        animal.is_queen = True\n        animal.is_invertebrate = False\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    if animal.name == \"Harry\":\n        if (animal.is_vertebrate and animal.has_backbone) or (not animal.is_vertebrate and not animal.has_backbone):\n            if animal.is_invertebrate is False and animal.is_queen is False:\n                return \"True\"\n            else:\n                return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    animal = Animal(\n        is_invertebrate=None,\n        is_vertebrate=None,\n        has_backbone=None,\n        is_queen=None,\n        name=\"Harry\"\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAnimals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.\n</premises>\n<conclusion>\nIf Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers",
        "conclusions": "Luke spends a lot of time hanging out and playing with his siblings.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_baby_multiple_birth: Optional[bool] = None,\n                 lives_with_strangers: Optional[bool] = None,\n                 spends_time_with_siblings: Optional[bool] = None):\n        self.is_baby_multiple_birth = is_baby_multiple_birth\n        self.lives_with_strangers = lives_with_strangers\n        self.spends_time_with_siblings = spends_time_with_siblings\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\n    if person.is_baby_multiple_birth is True and person.spends_time_with_siblings is not True:\n        person.spends_time_with_siblings = True\n        changed = True\n\n    # Premise 2: If people have siblings who were born together, then they were born in a multiple birth.\n    if person.is_baby_multiple_birth is None and person.spends_time_with_siblings is True:\n        person.is_baby_multiple_birth = True\n        changed = True\n\n    # Premise 3: If people complain often about annoying siblings, then they have siblings who were born together.\n    # This premise does not directly affect our current variables, so no change here.\n\n    # Premise 4: If people live at home, then they do not live with strangers.\n    if person.lives_with_strangers is True and person.spends_time_with_siblings is not False:\n        person.spends_time_with_siblings = False\n        changed = True\n\n    # Premise 5: If people spend a lot of time hanging out with and playing with their siblings, then they often live at home.\n    if person.spends_time_with_siblings is True and person.lives_with_strangers is not False:\n        person.lives_with_strangers = False\n        changed = True\n\n    # Premise 6: Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\n    if person.is_baby_multiple_birth is None and person.lives_with_strangers is None:\n        person.is_baby_multiple_birth = True\n        person.lives_with_strangers = True\n        changed = True\n    if person.is_baby_multiple_birth is False and person.lives_with_strangers is False:\n        person.is_baby_multiple_birth = False\n        person.lives_with_strangers = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.spends_time_with_siblings is True:\n        return \"True\"\n    elif person.spends_time_with_siblings is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        is_baby_multiple_birth=None,\n        lives_with_strangers=None,\n        spends_time_with_siblings=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Luke spends a lot of time hanging out and playing with his siblings?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPeople who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\n</premises>\n<conclusion>\nLuke spends a lot of time hanging out and playing with his siblings.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Luke spends a lot of time hanging out and playing with his siblings.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers",
        "conclusions": "Luke complains often about annoying siblings.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_multiple_birth: Optional[bool] = None,\n                 lives_with_strangers: Optional[bool] = None,\n                 complains_about_siblings: Optional[bool] = None):\n        self.is_multiple_birth = is_multiple_birth\n        self.lives_with_strangers = lives_with_strangers\n        self.complains_about_siblings = complains_about_siblings\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\n    if person.is_multiple_birth is True and person.complains_about_siblings is not False:\n        person.complains_about_siblings = False\n        changed = True\n\n    # Premise 2: If people have siblings who were born together, then they were born in a multiple birth.\n    if person.complains_about_siblings is not False and person.is_multiple_birth is not True:\n        person.is_multiple_birth = True\n        changed = True\n\n    # Premise 3: If people complain often about annoying siblings, then they have siblings who were born together.\n    if person.complains_about_siblings is True and person.is_multiple_birth is not True:\n        person.is_multiple_birth = True\n        changed = True\n\n    # Premise 4: If people live at home, then they do not live with strangers.\n    # No action needed for this premise as it doesn't affect the other attributes directly.\n\n    # Premise 5: If people spend a lot of time hanging out with and playing with their siblings, then they often live at home.\n    if person.complains_about_siblings is not False and person.lives_with_strangers is True:\n        person.lives_with_strangers = False\n        changed = True\n\n    # Premise 6: Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\n    if person.is_multiple_birth is not None and person.lives_with_strangers is not None:\n        if (person.is_multiple_birth is True and person.lives_with_strangers is True) or (person.is_multiple_birth is False and person.lives_with_strangers is False):\n            changed = True\n        else:\n            person.is_multiple_birth = None\n            person.lives_with_strangers = None\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.complains_about_siblings is True:\n        return \"True\"\n    elif person.complains_about_siblings is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        is_multiple_birth=None,\n        lives_with_strangers=None,\n        complains_about_siblings=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Luke complains often about annoying siblings?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPeople who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\n</premises>\n<conclusion>\nLuke complains often about annoying siblings.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Luke complains often about annoying siblings.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers",
        "conclusions": "Luke is neither born in a multiple birth nor complains often about annoying siblings.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, is_multiple_birth: Optional[bool] = None, complains: Optional[bool] = None, lives_with_strangers: Optional[bool] = None):\n        self.is_multiple_birth = is_multiple_birth\n        self.complains = complains\n        self.lives_with_strangers = lives_with_strangers\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\n    if person.is_multiple_birth is True and person.complains is None:\n        person.complains = False\n        changed = True\n\n    # Premise 2: If people have siblings who were born together, then they were born in a multiple birth.\n    if person.complains is None and person.lives_with_strangers is None:\n        person.is_multiple_birth = True\n        person.complains = False\n        changed = True\n\n    # Premise 3: If people complain often about annoying siblings, then they have siblings who were born together.\n    if person.complains is True and person.is_multiple_birth is None:\n        person.is_multiple_birth = True\n        changed = True\n\n    # Premise 4: If people live at home, then they do not live with strangers.\n    if person.lives_with_strangers is True and person.is_multiple_birth is None:\n        person.is_multiple_birth = False\n        changed = True\n\n    # Premise 5: If people spend a lot of time hanging out with and playing with their siblings, then they often live at home.\n    if person.is_multiple_birth is True and person.lives_with_strangers is None:\n        person.lives_with_strangers = False\n        changed = True\n\n    # Premise 6: Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\n    if (person.is_multiple_birth is True and person.lives_with_strangers is True) or (person.is_multiple_birth is False and person.lives_with_strangers is False):\n        if person.is_multiple_birth is None:\n            person.is_multiple_birth = True\n            changed = True\n        if person.lives_with_strangers is None:\n            person.lives_with_strangers = False\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Luke is neither born in a multiple birth nor complains often about annoying siblings.\n    if person.is_multiple_birth is None or person.complains is None:\n        return \"Uncertain\"\n    if person.is_multiple_birth is False and person.complains is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        is_multiple_birth=None,\n        complains=None,\n        lives_with_strangers=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Luke is neither born in a multiple birth nor complains often about annoying siblings?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPeople who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\n</premises>\n<conclusion>\nLuke is neither born in a multiple birth nor complains often about annoying siblings.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Luke is neither born in a multiple birth nor complains often about annoying siblings.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "It costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.",
        "conclusions": "ETS provides financial aid to Tom.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 lives_in_single_parent_family: Optional[bool] = None,\n                 has_few_resources: Optional[bool] = None,\n                 is_applying_for_GRE: Optional[bool] = None):\n        self.name = name\n        self.lives_in_single_parent_family = lives_in_single_parent_family\n        self.has_few_resources = has_few_resources\n        self.is_applying_for_GRE = is_applying_for_GRE\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: It costs $205 to take the GRE test, which is cheaper than $300.\n    # This premise does not affect the conclusion directly.\n\n    # Premise 2: ETS provides financial aid to those GRE applicants who prove economic hardship.\n    # This premise provides the condition for receiving financial aid.\n\n    # Premise 3: Those living in single-parent families or having few resources available to them can prove economic hardship.\n    # This premise gives the conditions for proving economic hardship.\n\n    # Premise 4: Tom lives in a single-parent family.\n    if person.name == \"Tom\":\n        if person.lives_in_single_parent_family is None:\n            person.lives_in_single_parent_family = True\n            changed = True\n\n    # Premise 5: Tom's dad has been out of work, and Tom has few resources available to them.\n    if person.name == \"Tom\":\n        if person.has_few_resources is None:\n            person.has_few_resources = True\n            changed = True\n\n    # Premise 6: Tom is applying to take the GRE test.\n    if person.name == \"Tom\":\n        if person.is_applying_for_GRE is None:\n            person.is_applying_for_GRE = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: ETS provides financial aid to Tom.\n    # To prove economic hardship, Tom must live in a single-parent family or have few resources.\n    # Since both conditions are met, he can prove economic hardship.\n    if person.lives_in_single_parent_family is True or person.has_few_resources is True:\n        if person.is_applying_for_GRE is True:\n            return \"True\"\n    return \"False\"\n\ndef func():\n    person = Person(\n        name=\"Tom\",\n        lives_in_single_parent_family=None,\n        has_few_resources=None,\n        is_applying_for_GRE=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: ETS provides financial aid to Tom?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIt costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.\n</premises>\n<conclusion>\nETS provides financial aid to Tom.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? ETS provides financial aid to Tom.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "It costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.",
        "conclusions": "It costs below US $300 to take the GRE test.",
        "rationale": "from typing import Optional\n\nclass GRETest:\n    def __init__(self, cost: Optional[int] = None):\n        self.cost = cost\n\ndef apply_premises(test: GRETest) -> bool:\n    changed = False\n\n    # Premise 1: It costs $205 to take the GRE test, which is cheaper than $300.\n    if test.cost is None:\n        test.cost = 205\n        changed = True\n\n    return changed\n\ndef run_inference(test: GRETest):\n    while apply_premises(test):\n        pass\n\ndef check_conclusion(test: GRETest) -> str:\n    run_inference(test)\n    if test.cost < 300:\n        return \"True\"\n    elif test.cost >= 300:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    test = GRETest()\n    return check_conclusion(test)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: It costs below US $300 to take the GRE test?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIt costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.\n</premises>\n<conclusion>\nIt costs below US $300 to take the GRE test.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? It costs below US $300 to take the GRE test.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "It costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.",
        "conclusions": "No one taking the GRE test has financial aid provided to them by something.",
        "rationale": "from typing import Optional\n\nclass GREApplicant:\n    def __init__(self,\n                 name: str,\n                 living_situation: Optional[str] = None,\n                 has_resources: Optional[bool] = None,\n                 financial_aid: Optional[bool] = None,\n                 test_cost: Optional[int] = None):\n        self.name = name\n        self.living_situation = living_situation\n        self.has_resources = has_resources\n        self.financial_aid = financial_aid\n        self.test_cost = test_cost\n\ndef apply_premises(applicant: GREApplicant) -> bool:\n    changed = False\n\n    # Premise 1: ETS provides financial aid to those GRE applicants who prove economic hardship.\n    if applicant.name == \"Tom\" and applicant.living_situation == \"single-parent family\" and applicant.has_resources is False:\n        applicant.financial_aid = True\n        changed = True\n\n    # Premise 2: Those living in single-parent families or having few resources available to them can prove economic hardship.\n    if applicant.name == \"Tom\" and (applicant.living_situation == \"single-parent family\" or applicant.has_resources is False):\n        applicant.financial_aid = True\n        changed = True\n\n    return changed\n\ndef run_inference(applicant: GREApplicant):\n    while apply_premises(applicant):\n        pass\n\ndef check_conclusion(applicant: GREApplicant) -> str:\n    run_inference(applicant)\n    if applicant.financial_aid is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    applicant = GREApplicant(\n        name=\"Tom\",\n        living_situation=\"single-parent family\",\n        has_resources=False,\n        financial_aid=None,\n        test_cost=205\n    )\n    return check_conclusion(applicant)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No one taking the GRE test has financial aid provided to them by something?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIt costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.\n</premises>\n<conclusion>\nNo one taking the GRE test has financial aid provided to them by something.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? No one taking the GRE test has financial aid provided to them by something.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly",
        "conclusions": "Peter is notably tidy.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 spills_food: Optional[bool] = None,\n                 is_clean: Optional[bool] = None,\n                 is_notably_tidy: Optional[bool] = None):\n        self.spills_food = spills_food\n        self.is_clean = is_clean\n        self.is_notably_tidy = is_notably_tidy\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people spill a lot of food on their clothing, then they are not notably tidy.\n    if person.spills_food is True and person.is_notably_tidy is not False:\n        person.is_notably_tidy = False\n        changed = True\n\n    # Premise 2: All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n    # This premise does not directly update person attributes, but we use it for context.\n\n    # Premise 3: If people are cleanly, then they are notably tidy.\n    if person.is_clean is True and person.is_notably_tidy is not True:\n        person.is_notably_tidy = True\n        changed = True\n\n    # Premise 4: If people value order and spotlessness, then they are cleanly.\n    # This premise does not directly update person attributes, but we use it for context.\n\n    # Premise 5: All people whose families prioritize order and spotlessness themselves value order and spotlessness.\n    # This premise does not directly update person attributes, but we use it for context.\n\n    # Premise 6: Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly.\n    if person.spills_food is None and person.is_clean is None:\n        person.spills_food = True\n        person.is_clean = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.is_notably_tidy is True:\n        return \"True\"\n    elif person.is_notably_tidy is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        spills_food=None,\n        is_clean=None,\n        is_notably_tidy=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter is notably tidy?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\n</premises>\n<conclusion>\nPeter is notably tidy.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Peter is notably tidy.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly",
        "conclusions": "Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 spills_food: Optional[bool] = None,\n                 is_clean: Optional[bool] = None,\n                 is_clumsy_fooie: Optional[bool] = None,\n                 goes_out_frequently: Optional[bool] = None,\n                 family_prioritizes_order: Optional[bool] = None):\n        self.spills_food = spills_food\n        self.is_clean = is_clean\n        self.is_clumsy_fooie = is_clumsy_fooie\n        self.goes_out_frequently = goes_out_frequently\n        self.family_prioritizes_order = family_prioritizes_order\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people spill a lot of food on their clothing, then they are not notably tidy.\n    if person.spills_food is True and person.is_clean is not False:\n        person.is_clean = False\n        changed = True\n\n    # Premise 2: All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n    if person.is_clumsy_fooie is True and person.goes_out_frequently is True and person.spills_food is not True:\n        person.spills_food = True\n        changed = True\n\n    # Premise 3: If people are cleanly, then they are notably tidy.\n    if person.is_clean is True and person.is_clean is not True:\n        person.is_clean = True\n        changed = True\n\n    # Premise 4: If people value order and spotlessness, then they are cleanly.\n    if person.family_prioritizes_order is True and person.is_clean is not True:\n        person.is_clean = True\n        changed = True\n\n    # Premise 5: All people whose families prioritize order and spotlessness themselves value order and spotlessness.\n    if person.family_prioritizes_order is True and person.family_prioritizes_order is not True:\n        person.family_prioritizes_order = True\n        changed = True\n\n    # Premise 6: Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly.\n    if (person.spills_food is True and person.is_clean is True) or (person.spills_food is False and person.is_clean is False):\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Peter is either a clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.\n    if (person.is_clumsy_fooie is True and person.goes_out_frequently is True) or (person.family_prioritizes_order is True):\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        spills_food=None,\n        is_clean=None,\n        is_clumsy_fooie=None,\n        goes_out_frequently=None,\n        family_prioritizes_order=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter is either a clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\n</premises>\n<conclusion>\nPeter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly",
        "conclusions": "Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 spills_food: Optional[bool] = None,\n                 is_clean: Optional[bool] = None,\n                 is_clumsy_foodie: Optional[bool] = None,\n                 goes_out_frequently: Optional[bool] = None,\n                 family_prioritizes_order: Optional[bool] = None):\n        self.spills_food = spills_food\n        self.is_clean = is_clean\n        self.is_clumsy_foodie = is_clumsy_foodie\n        self.goes_out_frequently = goes_out_frequently\n        self.family_prioritizes_order = family_prioritizes_order\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people spill a lot of food on their clothing, then they are not notably tidy.\n    if person.spills_food is True and person.is_clean is not False:\n        person.is_clean = False\n        changed = True\n\n    # Premise 2: All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n    if person.is_clumsy_foodie is True and person.goes_out_frequently is True and person.spills_food is not True:\n        person.spills_food = True\n        changed = True\n\n    # Premise 3: If people are cleanly, then they are notably tidy.\n    if person.is_clean is True and person.is_clean is not True:\n        person.is_clean = True\n        changed = True\n\n    # Premise 4: If people value order and spotlessness, then they are cleanly.\n    if person.is_clean is not True and person.family_prioritizes_order is True:\n        person.is_clean = True\n        changed = True\n\n    # Premise 5: All people whose families prioritize order and spotlessness themselves value order and spotlessness.\n    if person.family_prioritizes_order is True and person.family_prioritizes_order is not True:\n        person.family_prioritizes_order = True\n        changed = True\n\n    # Premise 6: Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly.\n    if (person.spills_food is True and person.is_clean is True) or (person.spills_food is not True and person.is_clean is not True):\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.\n    if person.is_clumsy_foodie is True and person.goes_out_frequently is True and person.family_prioritizes_order is True:\n        return \"True\"\n    elif person.is_clumsy_foodie is not True or person.goes_out_frequently is not True or person.family_prioritizes_order is not True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        spills_food=None,\n        is_clean=None,\n        is_clumsy_foodie=None,\n        goes_out_frequently=None,\n        family_prioritizes_order=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\n</premises>\n<conclusion>\nPeter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All fir trees are evergreens.\nSome objects of worship are fir trees.",
        "conclusions": "Some evergreens are not objects of worship.",
        "rationale": "from typing import Optional\n\nclass Tree:\n    def __init__(self, is_fir: Optional[bool] = None, is_evergreen: Optional[bool] = None):\n        self.is_fir = is_fir\n        self.is_evergreen = is_evergreen\n\nclass ObjectOfWorship:\n    def __init__(self, is_fir: Optional[bool] = None):\n        self.is_fir = is_fir\n\ndef apply_premises(tree: Tree, object_of_worship: ObjectOfWorship) -> bool:\n    changed = False\n\n    # Premise 1: All fir trees are evergreens.\n    if tree.is_fir is True and tree.is_evergreen is not True:\n        tree.is_evergreen = True\n        changed = True\n\n    # Premise 2: Some objects of worship are fir trees.\n    if object_of_worship.is_fir is None:\n        object_of_worship.is_fir = True\n        changed = True\n\n    return changed\n\ndef run_inference(tree: Tree, object_of_worship: ObjectOfWorship):\n    while apply_premises(tree, object_of_worship):\n        pass\n\ndef check_conclusion(tree: Tree, object_of_worship: ObjectOfWorship) -> str:\n    run_inference(tree, object_of_worship)\n    # Conclusion: Some evergreens are not objects of worship.\n    if tree.is_evergreen is True and object_of_worship.is_fir is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    tree = Tree(is_fir=None, is_evergreen=None)\n    object_of_worship = ObjectOfWorship(is_fir=None)\n    return check_conclusion(tree, object_of_worship)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some evergreens are not objects of worship?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll fir trees are evergreens.\nSome objects of worship are fir trees.\n</premises>\n<conclusion>\nSome evergreens are not objects of worship.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Some evergreens are not objects of worship.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "The Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.",
        "conclusions": "Juan de Onate visited a mountain range in New Mexico.",
        "rationale": "from typing import Optional\n\nclass MountainRange:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass Person:\n    def __init__(self, name: str, visited: Optional[str] = None):\n        self.name = name\n        self.visited = visited\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: The Picuris Mountains are a mountain range in New Mexico or Texas.\n    picuris_mountain_range = MountainRange(\"Picuris Mountains\", location=None)\n    if picuris_mountain_range.location is None:\n        picuris_mountain_range.location = \"New Mexico or Texas\"\n        changed = True\n\n    # Premise 2: Juan de Onate visited the Picuris Mountains.\n    juan_de_onate = Person(\"Juan de Onate\", visited=None)\n    if juan_de_onate.visited is None:\n        juan_de_onate.visited = \"Picuris Mountains\"\n        changed = True\n\n    # Premise 3: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n    # No change needed for this premise.\n\n    # Premise 4: There are no mountain ranges in Texas that have mines that have been donated.\n    if picuris_mountain_range.location == \"Texas\":\n        picuris_mountain_range.location = \"New Mexico\"\n        changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: Juan de Onate visited a mountain range in New Mexico.\n    if juan_de_onate.visited == \"Picuris Mountains\" and picuris_mountain_range.location == \"New Mexico\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    global picuris_mountain_range, juan_de_onate\n    picuris_mountain_range = MountainRange(\"Picuris Mountains\")\n    juan_de_onate = Person(\"Juan de Onate\")\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Juan de Onate visited a mountain range in New Mexico?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.\n</premises>\n<conclusion>\nJuan de Onate visited a mountain range in New Mexico.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Juan de Onate visited a mountain range in New Mexico.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "The Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.",
        "conclusions": "Juan de Onate visited a mountain range in Texas.",
        "rationale": "from typing import Optional\n\nclass MountainRange:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 visited: Optional[str] = None):\n        self.name = name\n        self.visited = visited\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: The Picuris Mountains are a mountain range in New Mexico or Texas.\n    picuris_mtns = MountainRange(\"Picuris Mountains\")\n    if picuris_mtns.location is None:\n        picuris_mtns.location = \"New Mexico or Texas\"\n        changed = True\n\n    # Premise 2: Juan de Onate visited the Picuris Mountains.\n    onate = Person(\"Juan de Onate\")\n    if onate.visited is None:\n        onate.visited = \"Picuris Mountains\"\n        changed = True\n\n    # Premise 3: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n    # No change needed for this premise as it does not affect the location.\n\n    # Premise 4: There are no mountain ranges in Texas that have mines that have been donated.\n    if \"Texas\" in picuris_mtns.location and \"donated\" in onate.visited:\n        onate.visited = None\n        picuris_mtns.location = None\n        changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    onate = Person(\"Juan de Onate\")\n    if onate.visited is None:\n        return \"Uncertain\"\n    if \"Texas\" in onate.visited:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Juan de Onate visited a mountain range in Texas?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.\n</premises>\n<conclusion>\nJuan de Onate visited a mountain range in Texas.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Juan de Onate visited a mountain range in Texas.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "The Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.",
        "conclusions": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
        "rationale": "from typing import Optional\n\nclass MountainRange:\n    def __init__(self, name: str, state: Optional[str] = None):\n        self.name = name\n        self.state = state\n\nclass Mine:\n    def __init__(self, name: str, location: Optional[MountainRange] = None, donated: Optional[bool] = None):\n        self.name = name\n        self.location = location\n        self.donated = donated\n\nclass Person:\n    def __init__(self, name: str, visited: Optional[MountainRange] = None):\n        self.name = name\n        self.visited = visited\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: The Picuris Mountains are a mountain range in New Mexico or Texas.\n    picuris = MountainRange(\"Picuris Mountains\", state=None)\n    if picuris.name == \"Picuris Mountains\":\n        if picuris.state != \"New Mexico\" and picuris.state != \"Texas\":\n            picuris.state = \"New Mexico\"  # Default to New Mexico if not specified\n            changed = True\n\n    # Premise 2: Juan de Onate visited the Picuris Mountains.\n    # No need to update anything here as it doesn't affect the mine location.\n\n    # Premise 3: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n    harding_mine = Mine(\"Harding Pegmatite Mine\", location=None, donated=None)\n    if harding_mine.name == \"Harding Pegmatite Mine\":\n        if harding_mine.donated is None:\n            harding_mine.donated = True\n            changed = True\n        if harding_mine.location is None:\n            harding_mine.location = picuris\n            changed = True\n\n    # Premise 4: There are no mountain ranges in Texas that have mines that have been donated.\n    if picuris.state == \"Texas\":\n        if picuris.name == \"Picuris Mountains\":\n            if picuris.name == \"Picuris Mountains\" and harding_mine.donated is True:\n                harding_mine.location = None  # Remove the mine from the Picuris Mountains\n                changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    if harding_mine.location is None:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    run_inference()\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Harding Pegmatite Mine is not located in a mountain range in New Mexico?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.\n</premises>\n<conclusion>\nThe Harding Pegmatite Mine is not located in a mountain range in New Mexico.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The Harding Pegmatite Mine is not located in a mountain range in New Mexico.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.",
        "conclusions": "Peter is shorter than a man in Michael's class.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_man: bool, taller_than: Optional[str] = None, can_jump: Optional[bool] = None):\n        self.name = name\n        self.is_man = is_man\n        self.taller_than = taller_than\n        self.can_jump = can_jump\n\ndef apply_premises(persons: dict) -> bool:\n    changed = False\n\n    # Premise 1: If a man is taller than another man, the taller one can block the other's shooting.\n    for man1, man2 in persons.items():\n        if man1.is_man and man2.is_man and man1.taller_than == man2.name:\n            man2.can_jump = False\n            changed = True\n\n    # Premise 2: Michael is a man who is taller than everyone else in his class.\n    if persons[\"Michael\"].is_man:\n        for person in persons.values():\n            if person.is_man and person.name != \"Michael\":\n                person.taller_than = \"Michael\"\n                changed = True\n\n    # Premise 3: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\n    for man1, man2 in persons.items():\n        if man1.is_man and man2.is_man and man1.taller_than == man2.name:\n            for man2, man3 in persons.items():\n                if man2.is_man and man3.is_man and man2.taller_than == man3.name:\n                    man1.taller_than = man3.name\n                    changed = True\n\n    # Premise 4: Peter is a man who is taller than Michael.\n    if persons[\"Peter\"].is_man and persons[\"Michael\"].is_man:\n        if persons[\"Peter\"].taller_than is None:\n            persons[\"Peter\"].taller_than = \"Michael\"\n            changed = True\n\n    # Premise 5: Michael can block any shooting from a person as long as the person does not jump when shooting.\n    for person in persons.values():\n        if person.name != \"Michael\" and person.can_jump is None:\n            person.can_jump = False\n\n    # Premise 6: Michael cannot block Windy's shooting.\n    if persons[\"Michael\"].name == \"Michael\" and persons[\"Windy\"].name == \"Windy\":\n        persons[\"Windy\"].can_jump = True\n\n    # Premise 7: Every shooter who can jump when shooting is a great shooter.\n    for person in persons.values():\n        if person.can_jump is True:\n            person.is_great_shooter = True\n\n    return changed\n\ndef run_inference(persons: dict):\n    while apply_premises(persons):\n        pass\n\ndef check_conclusion(persons: dict) -> str:\n    run_inference(persons)\n    for person in persons.values():\n        if person.name == \"Peter\" and person.taller_than is None:\n            return \"False\"\n    return \"Uncertain\"\n\ndef func():\n    persons = {\n        \"Michael\": Person(name=\"Michael\", is_man=True),\n        \"Peter\": Person(name=\"Peter\", is_man=True),\n        \"Windy\": Person(name=\"Windy\", is_man=False),\n    }\n    return check_conclusion(persons)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter is shorter than a man in Michael's class?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.\n</premises>\n<conclusion>\nPeter is shorter than a man in Michael's class.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Peter is shorter than a man in Michael's class.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.",
        "conclusions": "Windy is a great shooter.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_man: Optional[bool] = None,\n                 is_taller_than: Optional[list] = None,\n                 can_jump: Optional[bool] = None,\n                 is_great_shooter: Optional[bool] = None):\n        self.name = name\n        self.is_man = is_man\n        self.is_taller_than = is_taller_than if is_taller_than is not None else []\n        self.can_jump = can_jump\n        self.is_great_shooter = is_great_shooter\n\ndef apply_premises(persons: list[Person]) -> bool:\n    changed = False\n\n    # Premise 1: If a man is taller than another man, the taller one can block the other's shooting.\n    for i, p1 in enumerate(persons):\n        for j, p2 in enumerate(persons):\n            if i != j and p1.is_man is True and p2.is_man is True and p1.name in p2.is_taller_than:\n                p2.can_jump = False\n                changed = True\n\n    # Premise 2: Michael is a man who is taller than everyone else in his class.\n    for p in persons:\n        if p.name == \"Michael\":\n            p.is_man = True\n            p.is_taller_than = [p.name for p in persons if p.name != \"Michael\"]\n            changed = True\n\n    # Premise 3: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\n    for p1 in persons:\n        for p2 in persons:\n            if p1.name in p2.is_taller_than and p2.name in p1.is_taller_than:\n                if p1.name not in p2.is_taller_than:\n                    p2.is_taller_than.append(p1.name)\n                    changed = True\n\n    # Premise 4: Peter is a man who is taller than Michael.\n    for p in persons:\n        if p.name == \"Peter\":\n            p.is_man = True\n            p.is_taller_than = [\"Michael\"]\n            changed = True\n\n    # Premise 5: Michael can block any shooting from a person as long as the person does not jump when shooting.\n    # This premise doesn't directly affect is_great_shooter but is used to understand Michael's blocking ability.\n\n    # Premise 6: Michael cannot block Windy's shooting.\n    for p in persons:\n        if p.name == \"Windy\":\n            p.can_jump = True\n            changed = True\n\n    # Premise 7: Every shooter who can jump when shooting is a great shooter.\n    for p in persons:\n        if p.can_jump is True:\n            p.is_great_shooter = True\n            changed = True\n\n    return changed\n\ndef run_inference(persons: list[Person]):\n    while apply_premises(persons):\n        pass\n\ndef check_conclusion(persons: list[Person]) -> str:\n    run_inference(persons)\n    for p in persons:\n        if p.name == \"Windy\":\n            if p.is_great_shooter is True:\n                return \"True\"\n            elif p.is_great_shooter is False:\n                return \"False\"\n            else:\n                return \"Uncertain\"\n\ndef func():\n    persons = [\n        Person(name=\"Michael\"),\n        Person(name=\"Peter\"),\n        Person(name=\"Windy\")\n    ]\n    return check_conclusion(persons)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Windy is a great shooter?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.\n</premises>\n<conclusion>\nWindy is a great shooter.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Windy is a great shooter.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.",
        "conclusions": "Peter can block Windy's shooting.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, can_jump: Optional[bool] = None, is_great_shooter: Optional[bool] = None):\n        self.name = name\n        self.can_jump = can_jump\n        self.is_great_shooter = is_great_shooter\n\ndef apply_premises(persons: list[Person]) -> bool:\n    changed = False\n\n    # Premise 1: If a man is taller than another man, the taller one can block the other's shooting.\n    for i in range(len(persons)):\n        for j in range(i+1, len(persons)):\n            if persons[i].name != persons[j].name:\n                if persons[i].name > persons[j].name:\n                    persons[i].can_jump = True\n                else:\n                    persons[j].can_jump = True\n                changed = True\n\n    # Premise 2: Michael is a man who is taller than everyone else in his class.\n    for person in persons:\n        if person.name == \"Michael\":\n            person.is_great_shooter = False\n            person.can_jump = False\n            changed = True\n\n    # Premise 3: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\n    for i in range(len(persons)):\n        for j in range(len(persons)):\n            if persons[i].name != persons[j].name and persons[i].name > persons[j].name:\n                for k in range(len(persons)):\n                    if persons[j].name != persons[k].name and persons[j].name > persons[k].name:\n                        if persons[i].name > persons[k].name:\n                            changed = True\n\n    # Premise 4: Peter is a man who is taller than Michael.\n    for person in persons:\n        if person.name == \"Peter\":\n            person.is_great_shooter = False\n            person.can_jump = True\n            changed = True\n\n    # Premise 5: Michael can block any shooting from a person as long as the person does not jump when shooting.\n    # This premise does not change any attribute values directly.\n\n    # Premise 6: Michael cannot block Windy's shooting.\n    for person in persons:\n        if person.name == \"Windy\":\n            person.is_great_shooter = True\n            person.can_jump = True\n            changed = True\n\n    # Premise 7: Every shooter who can jump when shooting is a great shooter.\n    for person in persons:\n        if person.name == \"Windy\":\n            if person.can_jump:\n                person.is_great_shooter = True\n                changed = True\n\n    return changed\n\ndef run_inference(persons: list[Person]):\n    while apply_premises(persons):\n        pass\n\ndef check_conclusion(persons: list[Person]) -> str:\n    run_inference(persons)\n    for person in persons:\n        if person.name == \"Peter\":\n            if person.can_jump and not person.is_great_shooter:\n                return \"True\"\n            else:\n                return \"False\"\n    return \"Uncertain\"\n\ndef func():\n    persons = [\n        Person(name=\"Michael\"),\n        Person(name=\"Peter\"),\n        Person(name=\"Windy\")\n    ]\n    return check_conclusion(persons)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter can block Windy's shooting?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.\n</premises>\n<conclusion>\nPeter can block Windy's shooting.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Peter can block Windy's shooting.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.",
        "conclusions": "Barutin Cove is named after all islands in Antarctica.",
        "rationale": "from typing import Optional\n\nclass Place:\n    def __init__(self, name: str, located_in: Optional[str] = None):\n        self.name = name\n        self.located_in = located_in\n\nclass Cove(Place):\n    def __init__(self, name: str, named_after: Optional[str] = None):\n        super().__init__(name=name)\n        self.named_after = named_after\n\ndef apply_premises(cove: Cove, islands: dict) -> bool:\n    changed = False\n\n    # Premise 1: Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\n    if cove.name == \"Barutin Cove\" and cove.named_after is None:\n        cove.named_after = \"Barutin\"\n        changed = True\n\n    # Premise 2: Barutin Cove is on the southwest coast of Snow Island.\n    if cove.name == \"Barutin Cove\" and cove.located_in is None:\n        cove.located_in = \"Snow Island\"\n        changed = True\n\n    # Premise 3: Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\n    if cove.located_in == \"Snow Island\":\n        cove.located_in = \"South Shetland Islands\"\n        changed = True\n    if islands[\"Greenwich Island\"].located_in is None:\n        islands[\"Greenwich Island\"].located_in = \"South Shetland Islands\"\n        changed = True\n    if islands[\"Deception Island\"].located_in is None:\n        islands[\"Deception Island\"].located_in = \"South Shetland Islands\"\n        changed = True\n\n    # Premise 4: Antarctica is located on the South Shetland Islands.\n    if cove.located_in == \"South Shetland Islands\":\n        cove.located_in = \"Antarctica\"\n        changed = True\n    if islands[\"Greenwich Island\"].located_in == \"South Shetland Islands\":\n        islands[\"Greenwich Island\"].located_in = \"Antarctica\"\n        changed = True\n    if islands[\"Deception Island\"].located_in == \"South Shetland Islands\":\n        islands[\"Deception Island\"].located_in = \"Antarctica\"\n        changed = True\n\n    # Premise 5: If place A is located in place B and place B is located in place C, then place A is located in place C.\n    if cove.located_in == \"South Shetland Islands\" and cove.located_in != \"Antarctica\":\n        cove.located_in = \"Antarctica\"\n        changed = True\n    if islands[\"Greenwich Island\"].located_in == \"South Shetland Islands\" and islands[\"Greenwich Island\"].located_in != \"Antarctica\":\n        islands[\"Greenwich Island\"].located_in = \"Antarctica\"\n        changed = True\n    if islands[\"Deception Island\"].located_in == \"South Shetland Islands\" and islands[\"Deception Island\"].located_in != \"Antarctica\":\n        islands[\"Deception Island\"].located_in = \"Antarctica\"\n        changed = True\n\n    return changed\n\ndef run_inference(cove: Cove, islands: dict):\n    while apply_premises(cove, islands):\n        pass\n\ndef check_conclusion(cove: Cove, islands: dict) -> str:\n    run_inference(cove, islands)\n    # Conclusion: Barutin Cove is named after all islands in Antarctica.\n    # We need to check if Barutin Cove is named after all islands in Antarctica.\n    if cove.named_after is None:\n        return \"Uncertain\"\n    if cove.named_after != \"Barutin\":\n        return \"False\"\n    if cove.located_in == \"Antarctica\":\n        if \"Greenwich Island\" in islands and islands[\"Greenwich Island\"].located_in == \"Antarctica\":\n            if cove.named_after == islands[\"Greenwich Island\"].named_after:\n                if \"Deception Island\" in islands and islands[\"Deception Island\"].located_in == \"Antarctica\":\n                    if cove.named_after == islands[\"Deception Island\"].named_after:\n                        return \"True\"\n    return \"False\"\n\ndef func():\n    cove = Cove(name=\"Barutin Cove\")\n    islands = {\n        \"Greenwich Island\": Place(name=\"Greenwich Island\"),\n        \"Deception Island\": Place(name=\"Deception Island\")\n    }\n    return check_conclusion(cove, islands)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Barutin Cove is named after all islands in Antarctica?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBarutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.\n</premises>\n<conclusion>\nBarutin Cove is named after all islands in Antarctica.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Barutin Cove is named after all islands in Antarctica.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.",
        "conclusions": "There is at least one cove in Antarctica named after a place in Bulgaria.",
        "rationale": "from typing import Optional\n\nclass Place:\n    def __init__(self, name: str, is_cove: Optional[bool] = None, located_in: Optional[str] = None):\n        self.name = name\n        self.is_cove = is_cove\n        self.located_in = located_in\n\nclass NamedAfter:\n    def __init__(self, cove: Optional[str] = None, place_in_bulgaria: Optional[str] = None):\n        self.cove = cove\n        self.place_in_bulgaria = place_in_bulgaria\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\n    barutin_cove = Place(name=\"Barutin Cove\", is_cove=True, located_in=\"Southwest coast of Snow Island\")\n    barutin = Place(name=\"Barutin\", is_cove=False, located_in=\"Bulgaria\")\n    named_after = NamedAfter(cove=\"Barutin Cove\", place_in_bulgaria=\"Barutin\")\n\n    # Premise 2: Barutin Cove is on the southwest coast of Snow Island.\n    if barutin_cove.located_in != \"Southwest coast of Snow Island\":\n        barutin_cove.located_in = \"Southwest coast of Snow Island\"\n        changed = True\n\n    # Premise 3: Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\n    snow_island = Place(name=\"Snow Island\", is_cove=False, located_in=\"South Shetland Islands\")\n    greenwich_island = Place(name=\"Greenwich Island\", is_cove=False, located_in=\"South Shetland Islands\")\n    deception_island = Place(name=\"Deception Island\", is_cove=False, located_in=\"South Shetland Islands\")\n\n    # Premise 4: Antarctica is located on the South Shetland Islands.\n    antarctica = Place(name=\"Antarctica\", is_cove=False, located_in=\"South Shetland Islands\")\n\n    # Premise 5: If place A is located in place B and place B is located in place C, then place A is located in place C.\n    if (snow_island.located_in == \"South Shetland Islands\" and\n        antarctica.located_in == \"South Shetland Islands\"):\n        antarctica.located_in = \"South Shetland Islands\"\n        changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Check if there is at least one cove in Antarctica named after a place in Bulgaria.\n    for place in [barutin_cove, snow_island, greenwich_island, deception_island, antarctica]:\n        if place.is_cove and place.located_in == \"Antarctica\" and named_after.cove == place.name and named_after.place_in_bulgaria == \"Barutin\":\n            return \"True\"\n    return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: There is at least one cove in Antarctica named after a place in Bulgaria?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBarutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.\n</premises>\n<conclusion>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? There is at least one cove in Antarctica named after a place in Bulgaria.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.",
        "conclusions": "Barutin Cove is not located in Antarctica.",
        "rationale": "from typing import Optional\n\nclass Place:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass Location:\n    def __init__(self, name: str, parent: Optional[str] = None):\n        self.name = name\n        self.parent = parent\n\nclass Relation:\n    def __init__(self, place_a: str, place_b: str, place_c: str):\n        self.place_a = place_a\n        self.place_b = place_b\n        self.place_c = place_c\n\ndef apply_premises():\n    barutin_cove = Place(\"Barutin Cove\", \"Southwest coast of Snow Island\")\n    snow_island = Place(\"Snow Island\", \"South Shetland Islands\")\n    greenwich_island = Place(\"Greenwich Island\", \"South Shetland Islands\")\n    deception_island = Place(\"Deception Island\", \"South Shetland Islands\")\n    antarctica = Place(\"Antarctica\", \"South Shetland Islands\")\n\n    south_shetland_islands = Location(\"South Shetland Islands\", None)\n    south_west_coast_of_snow_island = Location(\"Southwest coast of Snow Island\", \"Snow Island\")\n\n    relations = [\n        Relation(\"Snow Island\", \"South Shetland Islands\", \"Antarctica\"),\n        Relation(\"Greenwich Island\", \"South Shetland Islands\", \"Antarctica\"),\n        Relation(\"Deception Island\", \"South Shetland Islands\", \"Antarctica\"),\n        Relation(\"South Shetland Islands\", \"South Shetland Islands\", \"Antarctica\")\n    ]\n\n    def update_location(place: Place, location: Location):\n        if place.location is None:\n            place.location = location.name\n        else:\n            place.location = f\"{place.location}, {location.name}\"\n\n    def apply_relations(relations):\n        for relation in relations:\n            if relation.place_a == \"South Shetland Islands\":\n                update_location(south_shetland_islands, Location(relation.place_b, relation.place_c))\n            elif relation.place_b == \"South Shetland Islands\":\n                update_location(south_shetland_islands, Location(relation.place_a, relation.place_c))\n            elif relation.place_c == \"South Shetland Islands\":\n                update_location(south_shetland_islands, Location(relation.place_a, relation.place_b))\n\n    apply_relations(relations)\n\n    # Update locations based on given premises\n    update_location(barutin_cove, south_west_coast_of_snow_island)\n    update_location(snow_island, south_shetland_islands)\n    update_location(antarctica, south_shetland_islands)\n\ndef check_conclusion():\n    apply_premises()\n    if \"Antarctica\" in barutin_cove.location:\n        return \"False\"\n    else:\n        return \"True\"\n\nbarutin_cove = None\n\ndef func():\n    global barutin_cove\n    barutin_cove = Place(\"Barutin Cove\", None)\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Barutin Cove is not located in Antarctica?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBarutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.\n</premises>\n<conclusion>\nBarutin Cove is not located in Antarctica.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Barutin Cove is not located in Antarctica.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some affection is love.\nSome love is positive.",
        "conclusions": "Some affection is positive.",
        "rationale": "from typing import Optional\n\nclass Affection:\n    def __init__(self, is_positive: Optional[bool] = None):\n        self.is_positive = is_positive\n\nclass Love:\n    def __init__(self, is_positive: Optional[bool] = None):\n        self.is_positive = is_positive\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Some affection is love.\n    affection = Affection(is_positive=None)\n    love = Love(is_positive=None)\n    if affection.is_positive is None:\n        affection.is_positive = True\n        changed = True\n    if love.is_positive is None:\n        love.is_positive = True\n        changed = True\n\n    # Premise 2: Some love is positive.\n    if love.is_positive is None:\n        love.is_positive = True\n        changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: Some affection is positive.\n    if affection.is_positive is None:\n        return \"Uncertain\"\n    if affection.is_positive:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    affection = Affection()\n    love = Love()\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some affection is positive?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome affection is love.\nSome love is positive.\n</premises>\n<conclusion>\nSome affection is positive.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Some affection is positive.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. ",
        "conclusions": "John's car is a Tesla Model 3.",
        "rationale": "from typing import Optional\n\nclass Car:\n    def __init__(self, is_tesla_model_3: Optional[bool] = None, is_single_seat: Optional[bool] = None):\n        self.is_tesla_model_3 = is_tesla_model_3\n        self.is_single_seat = is_single_seat\n\ndef apply_premises(car: Car) -> bool:\n    changed = False\n\n    # Premise 1: If something can transport multiple passengers, then they are not one-seaters.\n    # This premise does not directly affect the car attributes, so it's not used.\n\n    # Premise 2: All Tesla Model 3 can transport multiple passengers.\n    if car.is_tesla_model_3 is None:\n        car.is_tesla_model_3 = True\n        changed = True\n\n    # Premise 3: All single-seat electric cars are one-seaters.\n    # This premise does not directly affect the car attributes, so it's not used.\n\n    # Premise 4: All Solo EV cars are single-seat electric cars.\n    # This premise does not directly affect the car attributes, so it's not used.\n\n    # Premise 5: If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car.\n    if car.is_tesla_model_3 is False:\n        car.is_tesla_model_3 = False\n        changed = True\n\n    return changed\n\ndef run_inference(car: Car):\n    while apply_premises(car):\n        pass\n\ndef check_conclusion(car: Car) -> str:\n    run_inference(car)\n    if car.is_tesla_model_3 is True:\n        return \"True\"\n    elif car.is_tesla_model_3 is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    car = Car(is_tesla_model_3=None, is_single_seat=None)\n    return check_conclusion(car)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John's car is a Tesla Model 3?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \n</premises>\n<conclusion>\nJohn's car is a Tesla Model 3.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? John's car is a Tesla Model 3.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. ",
        "conclusions": "John's car is a Solo EV.",
        "rationale": "from typing import Optional\n\nclass Car:\n    def __init__(self, is_tesla_model_3: Optional[bool] = None,\n                 is_single_seat: Optional[bool] = None,\n                 is_solo_ev: Optional[bool] = None):\n        self.is_tesla_model_3 = is_tesla_model_3\n        self.is_single_seat = is_single_seat\n        self.is_solo_ev = is_solo_ev\n\ndef apply_premises(car: Car) -> bool:\n    changed = False\n\n    # Premise 1: If something can transport multiple passengers, then they are not one-seaters.\n    # This premise is not directly applicable to a specific car, so no change is made.\n    \n    # Premise 2: All Tesla Model 3 can transport multiple passengers.\n    if car.is_tesla_model_3 is None and car.is_solo_ev is None:\n        car.is_tesla_model_3 = True\n        changed = True\n\n    # Premise 3: All single-seat electric cars are one-seaters.\n    if car.is_single_seat is None and car.is_solo_ev is None:\n        car.is_single_seat = True\n        changed = True\n\n    # Premise 4: All Solo EV cars are single-seat electric cars.\n    if car.is_solo_ev is None:\n        car.is_solo_ev = True\n        changed = True\n\n    # Premise 5: If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car.\n    if car.is_tesla_model_3 is False and car.is_single_seat is True:\n        car.is_solo_ev = False\n        changed = True\n\n    return changed\n\ndef run_inference(car: Car):\n    while apply_premises(car):\n        pass\n\ndef check_conclusion(car: Car) -> str:\n    run_inference(car)\n    if car.is_solo_ev is True:\n        return \"True\"\n    elif car.is_solo_ev is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    car = Car(is_tesla_model_3=None, is_single_seat=None, is_solo_ev=None)\n    return check_conclusion(car)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John's car is a Solo EV?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \n</premises>\n<conclusion>\nJohn's car is a Solo EV.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? John's car is a Solo EV.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. ",
        "conclusions": "John's car is not a Solo EV.",
        "rationale": "from typing import Optional\n\nclass Car:\n    def __init__(self,\n                 is_tesla_model_3: Optional[bool] = None,\n                 is_single_seat: Optional[bool] = None,\n                 is_solo_ev: Optional[bool] = None):\n        self.is_tesla_model_3 = is_tesla_model_3\n        self.is_single_seat = is_single_seat\n        self.is_solo_ev = is_solo_ev\n\ndef apply_premises(car: Car) -> bool:\n    changed = False\n\n    # Premise 1: If something can transport multiple passengers, then they are not one-seaters.\n    # All Tesla Model 3 can transport multiple passengers.\n    if car.is_tesla_model_3 is not None and car.is_tesla_model_3 is True:\n        if car.is_single_seat is not None and car.is_single_seat is True:\n            return False\n        car.is_single_seat = False\n        changed = True\n\n    # Premise 2: All Tesla Model 3 can transport multiple passengers.\n    if car.is_tesla_model_3 is None:\n        car.is_tesla_model_3 = True\n        changed = True\n\n    # Premise 3: All single-seat electric cars are one-seaters.\n    if car.is_single_seat is not None and car.is_single_seat is True:\n        if car.is_tesla_model_3 is not None and car.is_tesla_model_3 is False:\n            car.is_solo_ev = True\n            changed = True\n\n    # Premise 4: All Solo EV cars are single-seat electric cars.\n    if car.is_solo_ev is not None and car.is_solo_ev is True:\n        car.is_single_seat = True\n        changed = True\n\n    # Premise 5: If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car.\n    if car.is_tesla_model_3 is not None and car.is_tesla_model_3 is False:\n        if car.is_single_seat is not None and car.is_single_seat is True:\n            return False\n        car.is_single_seat = False\n        car.is_solo_ev = False\n        changed = True\n\n    return changed\n\ndef run_inference(car: Car):\n    while apply_premises(car):\n        pass\n\ndef check_conclusion(car: Car) -> str:\n    run_inference(car)\n    if car.is_solo_ev is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    car = Car(\n        is_tesla_model_3=None,\n        is_single_seat=None,\n        is_solo_ev=None\n    )\n    return check_conclusion(car)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John's car is not a Solo EV?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \n</premises>\n<conclusion>\nJohn's car is not a Solo EV.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? John's car is not a Solo EV.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. ",
        "conclusions": "Rock is a monkey.",
        "rationale": "from typing import Optional\n\nclass Pet:\n    def __init__(self,\n                 is_monkey: Optional[bool] = None,\n                 is_bird: Optional[bool] = None,\n                 can_fly: Optional[bool] = None,\n                 has_wings: Optional[bool] = None,\n                 is_animal: Optional[bool] = None):\n        self.is_monkey = is_monkey\n        self.is_bird = is_bird\n        self.can_fly = can_fly\n        self.has_wings = has_wings\n        self.is_animal = is_animal\n\ndef apply_premises(pet: Pet) -> bool:\n    changed = False\n\n    # Premise 1: All of Peter's pets that are mammals are also animals.\n    # Premise 2: All monkeys are mammals.\n    # Premise 3: Peter's pets are all either monkeys or birds.\n    # Premise 4: Peter's birds can fly.\n    # Premise 5: All animals that are Peter's pets can breathe.\n    # Premise 6: If Peter's pet can fly, then it has wings.\n    # Premise 7: Rock is Peter's pet.\n    if pet.name == \"Rock\":\n        if pet.is_monkey is None:\n            pet.is_monkey = False\n            changed = True\n        if pet.is_bird is None:\n            pet.is_bird = False\n            changed = True\n        if pet.can_fly is None:\n            pet.can_fly = False\n            changed = True\n        if pet.has_wings is None:\n            pet.has_wings = False\n            changed = True\n        if pet.is_animal is None:\n            pet.is_animal = True\n            changed = True\n\n    # Premise 8: Rock can fly, or Rock is a bird, or Rock cannot breathe.\n    if pet.name == \"Rock\":\n        if pet.can_fly is not None and pet.is_bird is not None and pet.is_animal is not None and pet.has_wings is not None:\n            if pet.can_fly or pet.is_bird or not pet.is_animal:\n                if pet.is_monkey is None:\n                    pet.is_monkey = False\n                    changed = True\n                if pet.is_bird is None:\n                    pet.is_bird = True\n                    changed = True\n                if pet.can_fly is None:\n                    pet.can_fly = True\n                    changed = True\n                if pet.has_wings is None:\n                    pet.has_wings = True\n                    changed = True\n                if pet.is_animal is None:\n                    pet.is_animal = True\n                    changed = True\n\n    return changed\n\ndef run_inference(pet: Pet):\n    while apply_premises(pet):\n        pass\n\ndef check_conclusion(pet: Pet) -> str:\n    run_inference(pet)\n    if pet.is_monkey is True:\n        return \"True\"\n    elif pet.is_monkey is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    pet = Pet(\n        is_monkey=None,\n        is_bird=None,\n        can_fly=None,\n        has_wings=None,\n        is_animal=None\n    )\n    return check_conclusion(pet)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rock is a monkey?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. \n</premises>\n<conclusion>\nRock is a monkey.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Rock is a monkey.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. ",
        "conclusions": "Rock has wings.",
        "rationale": "from typing import Optional\n\nclass Pet:\n    def __init__(self,\n                 is_monkey: Optional[bool] = None,\n                 is_bird: Optional[bool] = None,\n                 can_fly: Optional[bool] = None,\n                 has_wings: Optional[bool] = None,\n                 is_animal: Optional[bool] = None):\n        self.is_monkey = is_monkey\n        self.is_bird = is_bird\n        self.can_fly = can_fly\n        self.has_wings = has_wings\n        self.is_animal = is_animal\n\ndef apply_premises(pet: Pet) -> bool:\n    changed = False\n\n    # Premise 1: All of Peter's pets that are mammals are also animals.\n    # Premise 2: All monkeys are mammals.\n    # Premise 3: Peter's pets are all either monkeys or birds.\n    if pet.is_monkey is not None or pet.is_bird is not None:\n        if pet.is_animal is None:\n            pet.is_animal = True\n            changed = True\n\n    # Premise 4: Peter's birds can fly.\n    if pet.is_bird is True and pet.can_fly is None:\n        pet.can_fly = True\n        changed = True\n\n    # Premise 5: All animals that are Peter's pets can breathe.\n    if pet.is_animal is True and pet.is_animal is not False:\n        if pet.can_fly is None:\n            pet.can_fly = True\n            changed = True\n\n    # Premise 6: If Peter's pet can fly, then it has wings.\n    if pet.can_fly is True and pet.has_wings is None:\n        pet.has_wings = True\n        changed = True\n\n    # Premise 7: Rock is Peter's pet.\n    if pet.name == \"Rock\":\n        if pet.is_monkey is None and pet.is_bird is None:\n            pet.is_monkey = False\n            pet.is_bird = True\n            changed = True\n\n    # Premise 8: Rock can fly, or Rock is a bird, or Rock cannot breathe.\n    # Since we know Rock is a bird (from premise 7), we can infer Rock can fly or Rock cannot breathe.\n    if pet.name == \"Rock\":\n        if pet.can_fly is None and pet.is_bird is True:\n            pet.can_fly = True\n            changed = True\n\n    return changed\n\ndef run_inference(pet: Pet):\n    while apply_premises(pet):\n        pass\n\ndef check_conclusion(pet: Pet) -> str:\n    run_inference(pet)\n    if pet.name == \"Rock\" and pet.has_wings is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    pet = Pet(\n        is_monkey=None,\n        is_bird=None,\n        can_fly=None,\n        has_wings=None,\n        is_animal=None\n    )\n    pet.name = \"Rock\"\n    return check_conclusion(pet)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rock has wings?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. \n</premises>\n<conclusion>\nRock has wings.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Rock has wings.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. ",
        "conclusions": "Rock does not have wings.",
        "rationale": "from typing import Optional\n\nclass Pet:\n    def __init__(self,\n                 is_monkey: Optional[bool] = None,\n                 is_bird: Optional[bool] = None,\n                 can_fly: Optional[bool] = None,\n                 has_wings: Optional[bool] = None,\n                 can_breathe: Optional[bool] = None):\n        self.is_monkey = is_monkey\n        self.is_bird = is_bird\n        self.can_fly = can_fly\n        self.has_wings = has_wings\n        self.can_breathe = can_breathe\n\ndef apply_premises(pet: Pet) -> bool:\n    changed = False\n\n    # Premise 1: All of Peter's pets that are mammals are also animals.\n    # This premise does not provide new information as all pets are either monkeys or birds.\n    \n    # Premise 2: All monkeys are mammals.\n    if pet.is_monkey is None:\n        pet.is_monkey = True\n        changed = True\n    \n    # Premise 3: Peter's pets are all either monkeys or birds.\n    if pet.is_bird is None:\n        pet.is_bird = not pet.is_monkey\n        changed = True\n\n    # Premise 4: Peter's birds can fly.\n    if pet.is_bird is True and pet.can_fly is None:\n        pet.can_fly = True\n        changed = True\n\n    # Premise 5: All animals that are Peter's pets can breathe.\n    if pet.can_breathe is None:\n        pet.can_breathe = True\n        changed = True\n\n    # Premise 6: If Peter's pet can fly, then it has wings.\n    if pet.can_fly is True and pet.has_wings is None:\n        pet.has_wings = True\n        changed = True\n\n    # Premise 7: Rock is Peter's pet.\n    if pet.name != \"Rock\":\n        pet.name = \"Rock\"\n        changed = True\n\n    # Premise 8: Rock can fly, or Rock is a bird, or Rock cannot breathe.\n    if pet.name == \"Rock\" and (pet.can_fly is None or pet.is_bird is None or pet.can_breathe is None):\n        if pet.can_fly is None:\n            pet.can_fly = True\n            changed = True\n        if pet.is_bird is None:\n            pet.is_bird = True\n            changed = True\n        if pet.can_breathe is None:\n            pet.can_breathe = False\n            changed = True\n\n    return changed\n\ndef run_inference(pet: Pet):\n    while apply_premises(pet):\n        pass\n\ndef check_conclusion(pet: Pet) -> str:\n    run_inference(pet)\n    # Conclusion: Rock does not have wings.\n    if pet.name == \"Rock\":\n        if pet.has_wings is None:\n            return \"Uncertain\"\n        elif pet.has_wings is False:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    pet = Pet()\n    return check_conclusion(pet)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rock does not have wings?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. \n</premises>\n<conclusion>\nRock does not have wings.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Rock does not have wings.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. ",
        "conclusions": "John has a larger family.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_engaged: Optional[bool] = None,\n                 makes_wedding_plans: Optional[bool] = None,\n                 invites_to_ceremony: Optional[bool] = None,\n                 has_well_attended_wedding: Optional[bool] = None,\n                 has_larger_family: Optional[bool] = None):\n        self.is_engaged = is_engaged\n        self.makes_wedding_plans = makes_wedding_plans\n        self.invites_to_ceremony = invites_to_ceremony\n        self.has_well_attended_wedding = has_well_attended_wedding\n        self.has_larger_family = has_larger_family\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who make wedding plans are people who are engaged.\n    if person.makes_wedding_plans is True and person.is_engaged is not True:\n        person.is_engaged = True\n        changed = True\n\n    # Premise 2: All people who invite others to come to their ceremony make wedding plans.\n    if person.invites_to_ceremony is True and person.makes_wedding_plans is not True:\n        person.makes_wedding_plans = True\n        changed = True\n\n    # Premise 3: Anyone who has a well-attended wedding invites others to come to their ceremony.\n    if person.has_well_attended_wedding is True and person.invites_to_ceremony is not True:\n        person.invites_to_ceremony = True\n        changed = True\n\n    # Premise 4: Some people that have well-attended weddings have larger families.\n    # This does not provide a direct update but can be used to infer possibilities.\n    if person.has_well_attended_wedding is True and person.has_larger_family is not True:\n        person.has_larger_family = True\n        changed = True\n\n    # Premise 5: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n    if person.name == \"John\" and person.is_engaged is True:\n        if person.invites_to_ceremony is not False:\n            person.invites_to_ceremony = False\n            changed = True\n        if person.makes_wedding_plans is not False:\n            person.makes_wedding_plans = False\n            changed = True\n\n    # Premise 6: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\n    if person.name == \"John\" and person.has_larger_family is True:\n        if person.has_well_attended_wedding is not True and person.invites_to_ceremony is not True:\n            person.has_well_attended_wedding = True\n            person.invites_to_ceremony = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"John\":\n        if person.has_larger_family is True:\n            return \"True\"\n        elif person.has_larger_family is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n\ndef func():\n    person = Person(\n        is_engaged=None,\n        makes_wedding_plans=None,\n        invites_to_ceremony=None,\n        has_well_attended_wedding=None,\n        has_larger_family=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John has a larger family?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \n</premises>\n<conclusion>\nJohn has a larger family.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? John has a larger family.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. ",
        "conclusions": "John does not have a larger family.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_engaged: Optional[bool] = None,\n                 makes_wedding_plans: Optional[bool] = None,\n                 invites_ceremony: Optional[bool] = None,\n                 has_well_attended_wedding: Optional[bool] = None,\n                 has_larger_family: Optional[bool] = None):\n        self.is_engaged = is_engaged\n        self.makes_wedding_plans = makes_wedding_plans\n        self.invites_ceremony = invites_ceremony\n        self.has_well_attended_wedding = has_well_attended_wedding\n        self.has_larger_family = has_larger_family\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who make wedding plans are people who are engaged.\n    if person.makes_wedding_plans is True and person.is_engaged is not True:\n        person.is_engaged = True\n        changed = True\n\n    # Premise 2: All people who invite others to come to their ceremony make wedding plans.\n    if person.invites_ceremony is True and person.makes_wedding_plans is not True:\n        person.makes_wedding_plans = True\n        changed = True\n\n    # Premise 3: Anyone who has a well-attended wedding invites others to come to their ceremony.\n    if person.has_well_attended_wedding is True and person.invites_ceremony is not True:\n        person.invites_ceremony = True\n        changed = True\n\n    # Premise 4: Some people that have well-attended weddings have larger families.\n    # This does not force a specific person to have a well-attended wedding and larger family.\n    # So we only note that it is possible.\n    \n    # Premise 5: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n    if person.name == \"John\" and person.is_engaged is True and (person.invites_ceremony is True or person.makes_wedding_plans is True):\n        person.invites_ceremony = False\n        person.makes_wedding_plans = False\n        changed = True\n\n    # Premise 6: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\n    if person.name == \"John\" and person.has_larger_family is True and (person.has_well_attended_wedding is not True and person.invites_ceremony is not True):\n        person.has_well_attended_wedding = True\n        person.invites_ceremony = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"John\" and person.has_larger_family is not True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        is_engaged=None,\n        makes_wedding_plans=None,\n        invites_ceremony=None,\n        has_well_attended_wedding=None,\n        has_larger_family=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John does not have a larger family?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \n</premises>\n<conclusion>\nJohn does not have a larger family.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? John does not have a larger family.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. ",
        "conclusions": "John is engaged.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_engaged: Optional[bool] = None,\n                 makes_wedding_plans: Optional[bool] = None,\n                 invites_ceremony: Optional[bool] = None,\n                 has_well_attended_wedding: Optional[bool] = None,\n                 has_larger_family: Optional[bool] = None):\n        self.is_engaged = is_engaged\n        self.makes_wedding_plans = makes_wedding_plans\n        self.invites_ceremony = invites_ceremony\n        self.has_well_attended_wedding = has_well_attended_wedding\n        self.has_larger_family = has_larger_family\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who make wedding plans are people who are engaged.\n    if person.makes_wedding_plans is True and person.is_engaged is not True:\n        person.is_engaged = True\n        changed = True\n\n    # Premise 2: All people who invite others to come to their ceremony make wedding plans.\n    if person.invites_ceremony is True and person.makes_wedding_plans is not True:\n        person.makes_wedding_plans = True\n        changed = True\n\n    # Premise 3: Anyone who has a well-attended wedding invites others to come to their ceremony.\n    if person.has_well_attended_wedding is True and person.invites_ceremony is not True:\n        person.invites_ceremony = True\n        changed = True\n\n    # Premise 4: Some people that have well-attended weddings have larger families.\n    # This premise does not directly affect the attributes of a specific person.\n    # It is used to validate the truth of the conclusion indirectly.\n\n    # Premise 5: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n    if person.name == \"John\" and person.is_engaged is True and person.invites_ceremony is not False:\n        person.invites_ceremony = False\n        person.makes_wedding_plans = False\n        changed = True\n\n    # Premise 6: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\n    if person.name == \"John\" and person.has_larger_family is True and (person.has_well_attended_wedding is not True and person.invites_ceremony is not True):\n        person.has_well_attended_wedding = True\n        person.invites_ceremony = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"John\" and person.is_engaged is True:\n        return \"True\"\n    elif person.name == \"John\" and person.is_engaged is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    john = Person(name=\"John\")\n    return check_conclusion(john)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John is engaged?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \n</premises>\n<conclusion>\nJohn is engaged.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? John is engaged.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. ",
        "conclusions": "John neither has a larger family nor does he invite others to his wedding.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_engaged: Optional[bool] = None,\n                 makes_wedding_plans: Optional[bool] = None,\n                 invites_others: Optional[bool] = None,\n                 has_well_attended_wedding: Optional[bool] = None,\n                 has_larger_family: Optional[bool] = None):\n        self.is_engaged = is_engaged\n        self.makes_wedding_plans = makes_wedding_plans\n        self.invites_others = invites_others\n        self.has_well_attended_wedding = has_well_attended_wedding\n        self.has_larger_family = has_larger_family\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who make wedding plans are people who are engaged.\n    if person.makes_wedding_plans is True and person.is_engaged is not True:\n        person.is_engaged = True\n        changed = True\n\n    # Premise 2: All people who invite others to come to their ceremony make wedding plans.\n    if person.invites_others is True and person.makes_wedding_plans is not True:\n        person.makes_wedding_plans = True\n        changed = True\n\n    # Premise 3: Anyone who has a well-attended wedding invites others to come to their ceremony.\n    if person.has_well_attended_wedding is True and person.invites_others is not True:\n        person.invites_others = True\n        changed = True\n\n    # Premise 4: Some people that have well-attended weddings have larger families.\n    # This only tells us that at least one person with a well-attended wedding has a larger family,\n    # so it does not force that all such people must have a larger family.\n    # We will use this information in the contrapositive form later.\n\n    # Premise 5: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n    if person.name == \"John\" and person.is_engaged is True and person.invites_others is not False:\n        person.invites_others = False\n        changed = True\n    if person.name == \"John\" and person.is_engaged is True and person.makes_wedding_plans is not False:\n        person.makes_wedding_plans = False\n        changed = True\n\n    # Premise 6: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\n    if person.name == \"John\" and person.has_larger_family is True:\n        if person.has_well_attended_wedding is not True and person.invites_others is not True:\n            return False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: John neither has a larger family nor does he invite others to his wedding.\n    # If both have_larger_family and invites_others are None, then we cannot determine the conclusion.\n    if person.has_larger_family is None or person.invites_others is None:\n        return \"Uncertain\"\n    if person.has_larger_family is False and person.invites_others is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"John\",\n        is_engaged=None,\n        makes_wedding_plans=None,\n        invites_others=None,\n        has_well_attended_wedding=None,\n        has_larger_family=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John neither has a larger family nor does he invite others to his wedding?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \n</premises>\n<conclusion>\nJohn neither has a larger family nor does he invite others to his wedding.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? John neither has a larger family nor does he invite others to his wedding.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.",
        "conclusions": "Platypuses are mammals with no teeth.",
        "rationale": "from typing import Optional\n\nclass Mammal:\n    def __init__(self, has_teeth: Optional[bool] = None):\n        self.has_teeth = has_teeth\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Some mammals have teeth.\n    # This premise is not specific and does not change the state of any object directly.\n\n    # Premise 2: Platypuses have no teeth.\n    if Mammal.has_teeth is None:\n        Mammal.has_teeth = False\n        changed = True\n\n    # Premise 3: Platypuses are mammals.\n    if Mammal.is_mammal is None:\n        Mammal.is_mammal = True\n        changed = True\n\n    # Premise 4: Humans have teeth.\n    # This premise is not relevant to the specific state of platypuses.\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: Platypuses are mammals with no teeth.\n    if Mammal.is_mammal is True and Mammal.has_teeth is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Platypuses are mammals with no teeth?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.\n</premises>\n<conclusion>\nPlatypuses are mammals with no teeth.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Platypuses are mammals with no teeth.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.",
        "conclusions": "Platypuses are reptiles.",
        "rationale": "from typing import Optional\n\nclass Platypus:\n    def __init__(self,\n                 has_teeth: Optional[bool] = None,\n                 is_mammal: Optional[bool] = None,\n                 is_reptile: Optional[bool] = None):\n        self.has_teeth = has_teeth\n        self.is_mammal = is_mammal\n        self.is_reptile = is_reptile\n\ndef apply_premises(platypus: Platypus) -> bool:\n    changed = False\n\n    # Premise 1: Some mammals have teeth.\n    if platypus.is_mammal is None:\n        platypus.is_mammal = True\n        changed = True\n\n    # Premise 2: Platypuses have no teeth.\n    if platypus.is_mammal is True:\n        if platypus.has_teeth is None:\n            platypus.has_teeth = False\n            changed = True\n\n    # Premise 3: Platypuses are mammals.\n    if platypus.is_mammal is False:\n        if platypus.is_mammal is None:\n            platypus.is_mammal = True\n            changed = True\n\n    # Premise 4: Humans have teeth.\n    # This does not provide information about platypuses being reptiles.\n    return changed\n\ndef run_inference(platypus: Platypus):\n    while apply_premises(platypus):\n        pass\n\ndef check_conclusion(platypus: Platypus) -> str:\n    run_inference(platypus)\n    # Conclusion: Platypuses are reptiles.\n    if platypus.is_reptile is not None:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    platypus = Platypus(\n        has_teeth=None,\n        is_mammal=None,\n        is_reptile=None\n    )\n    return check_conclusion(platypus)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Platypuses are reptiles?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.\n</premises>\n<conclusion>\nPlatypuses are reptiles.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Platypuses are reptiles.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.",
        "conclusions": "Humans are mammals.",
        "rationale": "from typing import Optional\n\nclass Mammal:\n    def __init__(self, has_teeth: Optional[bool] = None, is_mammal: Optional[bool] = None):\n        self.has_teeth = has_teeth\n        self.is_mammal = is_mammal\n\ndef apply_premises(mammal: Mammal) -> bool:\n    changed = False\n\n    # Premise 1: Some mammals have teeth.\n    if mammal.is_mammal is None:\n        mammal.is_mammal = True  # At least one mammal has teeth, so there is at least one mammal.\n        changed = True\n\n    # Premise 2: Platypuses have no teeth.\n    if mammal.is_mammal is True and mammal.has_teeth is None:\n        mammal.has_teeth = False  # At least one mammal (platypus) does not have teeth.\n        changed = True\n\n    # Premise 3: Platypuses are mammals.\n    if mammal.is_mammal is None:\n        mammal.is_mammal = True  # Platypuses are mammals.\n        changed = True\n\n    # Premise 4: Humans have teeth.\n    if mammal.is_mammal is None and mammal.has_teeth is False:\n        mammal.has_teeth = True  # Humans have teeth.\n        changed = True\n\n    return changed\n\ndef run_inference(mammal: Mammal):\n    while apply_premises(mammal):\n        pass\n\ndef check_conclusion(mammal: Mammal) -> str:\n    run_inference(mammal)\n    # Conclusion: Humans are mammals.\n    if mammal.is_mammal is True:\n        return \"True\"\n    elif mammal.is_mammal is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    mammal = Mammal(has_teeth=None, is_mammal=None)\n    return check_conclusion(mammal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Humans are mammals?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.\n</premises>\n<conclusion>\nHumans are mammals.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Humans are mammals.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Plungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.",
        "conclusions": "Space sucks.",
        "rationale": "from typing import Optional\n\nclass Item:\n    def __init__(self, name: str, sucks: Optional[bool] = None):\n        self.name = name\n        self.sucks = sucks\n\ndef apply_premises(items: dict) -> bool:\n    changed = False\n\n    # Premise 1: Plungers suck.\n    if items.get(\"plunger\", {}).get(\"sucks\") is None:\n        items[\"plunger\"] = {\"sucks\": True}\n        changed = True\n\n    # Premise 2: Vacuums suck.\n    if items.get(\"vacuum\", {}).get(\"sucks\") is None:\n        items[\"vacuum\"] = {\"sucks\": True}\n        changed = True\n\n    # Premise 3: Vampires suck.\n    if items.get(\"vampire\", {}).get(\"sucks\") is None:\n        items[\"vampire\"] = {\"sucks\": True}\n        changed = True\n\n    # Premise 4: Space is a vacuum.\n    if items.get(\"space\", {}).get(\"sucks\") is None:\n        items[\"space\"] = {\"sucks\": items.get(\"vacuum\", {}).get(\"sucks\", False)}\n        changed = True\n\n    # Premise 5: A duster is a household appliance that doesn't suck.\n    if items.get(\"duster\", {}).get(\"sucks\") is None:\n        items[\"duster\"] = {\"sucks\": False}\n        changed = True\n\n    return changed\n\ndef run_inference(items: dict):\n    while apply_premises(items):\n        pass\n\ndef check_conclusion(items: dict) -> str:\n    run_inference(items)\n    if items.get(\"space\", {}).get(\"sucks\") is True:\n        return \"True\"\n    elif items.get(\"space\", {}).get(\"sucks\") is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    items = {\n        \"plunger\": {},\n        \"vacuum\": {},\n        \"vampire\": {},\n        \"space\": {},\n        \"duster\": {}\n    }\n    return check_conclusion(items)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Space sucks?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</premises>\n<conclusion>\nSpace sucks.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Space sucks.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Plungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.",
        "conclusions": "Space is a vampire.",
        "rationale": "from typing import Optional\n\nclass Entity:\n    def __init__(self, name: str, sucks: Optional[bool] = None, is_vampire: Optional[bool] = None):\n        self.name = name\n        self.sucks = sucks\n        self.is_vampire = is_vampire\n\ndef apply_premises(entities: dict) -> bool:\n    changed = False\n\n    # Premise 1: Plungers suck.\n    if entities['plunger'].sucks is None:\n        entities['plunger'].sucks = True\n        changed = True\n\n    # Premise 2: Vacuums suck.\n    if entities['vacuum'].sucks is None:\n        entities['vacuum'].sucks = True\n        changed = True\n\n    # Premise 3: Vampires suck.\n    if entities['vampire'].sucks is None:\n        entities['vampire'].sucks = True\n        changed = True\n\n    # Premise 4: Space is a vacuum.\n    if entities['space'].sucks is None and entities['space'].is_vampire is None:\n        entities['space'].sucks = True\n        entities['space'].is_vampire = False\n        changed = True\n\n    # Premise 5: A duster is a household appliance that doesn't suck.\n    if entities['duster'].sucks is None:\n        entities['duster'].sucks = False\n        changed = True\n\n    return changed\n\ndef run_inference(entities: dict):\n    while apply_premises(entities):\n        pass\n\ndef check_conclusion(entities: dict) -> str:\n    run_inference(entities)\n    if entities['space'].is_vampire is True:\n        return \"True\"\n    elif entities['space'].is_vampire is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initialize entities\n    entities = {\n        'plunger': Entity(name='plunger', sucks=None, is_vampire=None),\n        'vacuum': Entity(name='vacuum', sucks=None, is_vampire=None),\n        'vampire': Entity(name='vampire', sucks=None, is_vampire=None),\n        'space': Entity(name='space', sucks=None, is_vampire=None),\n        'duster': Entity(name='duster', sucks=None, is_vampire=None)\n    }\n    return check_conclusion(entities)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Space is a vampire?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</premises>\n<conclusion>\nSpace is a vampire.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Space is a vampire.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Plungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.",
        "conclusions": "If something is a household appliance, it sucks.",
        "rationale": "from typing import Optional\n\nclass Thing:\n    def __init__(self, name: str, is_household_appliance: Optional[bool] = None, sucks: Optional[bool] = None):\n        self.name = name\n        self.is_household_appliance = is_household_appliance\n        self.sucks = sucks\n\ndef apply_premises(thing: Thing) -> bool:\n    changed = False\n\n    # Premise 1: Plungers suck.\n    if thing.name == \"plunger\" and thing.sucks is None:\n        thing.sucks = True\n        changed = True\n\n    # Premise 2: Vacuums suck.\n    if thing.name == \"vacuum\" and thing.sucks is None:\n        thing.sucks = True\n        changed = True\n\n    # Premise 3: Vampires suck.\n    if thing.name == \"vampire\" and thing.sucks is None:\n        thing.sucks = True\n        changed = True\n\n    # Premise 4: Space is a vacuum.\n    # This premise does not directly update the sucking status but provides context.\n    if thing.name == \"space\" and thing.sucks is None:\n        thing.sucks = True\n        changed = True\n\n    # Premise 5: A duster is a household appliance that doesn't suck.\n    if thing.name == \"duster\" and thing.is_household_appliance is None:\n        thing.is_household_appliance = True\n        changed = True\n    if thing.name == \"duster\" and thing.sucks is None:\n        thing.sucks = False\n        changed = True\n\n    return changed\n\ndef run_inference(things: list[Thing]):\n    while any(apply_premises(thing) for thing in things):\n        pass\n\ndef check_conclusion(things: list[Thing]) -> str:\n    run_inference(things)\n    for thing in things:\n        if thing.is_household_appliance is True and thing.sucks is False:\n            return \"False\"\n    return \"True\"\n\ndef func():\n    things = [\n        Thing(name=\"plunger\"),\n        Thing(name=\"vacuum\"),\n        Thing(name=\"vampire\"),\n        Thing(name=\"space\"),\n        Thing(name=\"duster\")\n    ]\n    return check_conclusion(things)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If something is a household appliance, it sucks?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</premises>\n<conclusion>\nIf something is a household appliance, it sucks.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If something is a household appliance, it sucks.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nUnsupervised learning algorithms do not require labeled data.\nThe state-of-the-art text summarization model is trained with machine learning algorithms.\nReinforcement learning is not used to train the state-of-the-art text summarization model.\nThe Machine Learning algorithm for training text summarization models requires labeled data.",
        "conclusions": "Supervised learning is used to train the state-of-the-art text summarization model.",
        "rationale": "from typing import Optional\n\nclass MachineLearningAlgorithms:\n    def __init__(self,\n                 supervised: Optional[bool] = None,\n                 unsupervised: Optional[bool] = None,\n                 reinforcement: Optional[bool] = None):\n        self.supervised = supervised\n        self.unsupervised = unsupervised\n        self.reinforcement = reinforcement\n\ndef apply_premises(algorithms: MachineLearningAlgorithms) -> bool:\n    changed = False\n\n    # Premise 1: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n    if algorithms.supervised is None and algorithms.unsupervised is None and algorithms.reinforcement is None:\n        algorithms.supervised = True\n        algorithms.unsupervised = True\n        algorithms.reinforcement = True\n        changed = True\n\n    # Premise 2: Unsupervised learning algorithms do not require labeled data.\n    if algorithms.unsupervised is True:\n        changed = True\n\n    # Premise 3: The state-of-the-art text summarization model is trained with machine learning algorithms.\n    if algorithms.supervised is None and algorithms.unsupervised is None and algorithms.reinforcement is None:\n        algorithms.supervised = True\n        algorithms.unsupervised = True\n        algorithms.reinforcement = True\n        changed = True\n\n    # Premise 4: Reinforcement learning is not used to train the state-of-the-art text summarization model.\n    if algorithms.reinforcement is True:\n        algorithms.reinforcement = False\n        changed = True\n\n    # Premise 5: The Machine Learning algorithm for training text summarization models requires labeled data.\n    if algorithms.supervised is None and algorithms.unsupervised is None and algorithms.reinforcement is None:\n        algorithms.supervised = True\n        algorithms.unsupervised = False\n        algorithms.reinforcement = False\n        changed = True\n\n    return changed\n\ndef run_inference(algorithms: MachineLearningAlgorithms):\n    while apply_premises(algorithms):\n        pass\n\ndef check_conclusion(algorithms: MachineLearningAlgorithms) -> str:\n    run_inference(algorithms)\n    if algorithms.supervised is True:\n        return \"True\"\n    elif algorithms.supervised is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    algorithms = MachineLearningAlgorithms(\n        supervised=None,\n        unsupervised=None,\n        reinforcement=None\n    )\n    return check_conclusion(algorithms)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Supervised learning is used to train the state-of-the-art text summarization model?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nMachine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nUnsupervised learning algorithms do not require labeled data.\nThe state-of-the-art text summarization model is trained with machine learning algorithms.\nReinforcement learning is not used to train the state-of-the-art text summarization model.\nThe Machine Learning algorithm for training text summarization models requires labeled data.\n</premises>\n<conclusion>\nSupervised learning is used to train the state-of-the-art text summarization model.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Supervised learning is used to train the state-of-the-art text summarization model.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nUnsupervised learning algorithms do not require labeled data.\nThe state-of-the-art text summarization model is trained with machine learning algorithms.\nReinforcement learning is not used to train the state-of-the-art text summarization model.\nThe Machine Learning algorithm for training text summarization models requires labeled data.",
        "conclusions": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
        "rationale": "from typing import Optional\n\nclass MachineLearningAlgorithms:\n    def __init__(self,\n                 supervised: Optional[bool] = None,\n                 unsupervised: Optional[bool] = None,\n                 reinforcement: Optional[bool] = None):\n        self.supervised = supervised\n        self.unsupervised = unsupervised\n        self.reinforcement = reinforcement\n\nclass StateOfTheArtTextSummarizationModel:\n    def __init__(self,\n                 training_algorithm: Optional[MachineLearningAlgorithms] = None):\n        self.training_algorithm = training_algorithm\n\ndef apply_premises(model: StateOfTheArtTextSummarizationModel) -> bool:\n    changed = False\n\n    # Premise 1: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n    # This premise does not change the state of the model, so it is ignored for inference.\n\n    # Premise 2: Unsupervised learning algorithms do not require labeled data.\n    # This premise does not change the state of the model, so it is ignored for inference.\n\n    # Premise 3: The state-of-the-art text summarization model is trained with machine learning algorithms.\n    if model.training_algorithm is None:\n        model.training_algorithm = MachineLearningAlgorithms()\n        changed = True\n\n    # Premise 4: Reinforcement learning is not used to train the state-of-the-art text summarization model.\n    if model.training_algorithm is not None:\n        if model.training_algorithm.reinforcement is None:\n            model.training_algorithm.reinforcement = False\n            changed = True\n\n    # Premise 5: The Machine Learning algorithm for training text summarization models requires labeled data.\n    # Since unsupervised learning does not require labeled data, it cannot be used to train the model.\n    if model.training_algorithm is not None:\n        if model.training_algorithm.unsupervised is None:\n            model.training_algorithm.unsupervised = False\n            changed = True\n\n    return changed\n\ndef run_inference(model: StateOfTheArtTextSummarizationModel):\n    while apply_premises(model):\n        pass\n\ndef check_conclusion(model: StateOfTheArtTextSummarizationModel) -> str:\n    run_inference(model)\n    # Conclusion: Unsupervised learning is used to train the state-of-the-art text summarization model.\n    if model.training_algorithm is not None and model.training_algorithm.unsupervised is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    model = StateOfTheArtTextSummarizationModel()\n    return check_conclusion(model)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Unsupervised learning is used to train the state-of-the-art text summarization model?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nMachine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nUnsupervised learning algorithms do not require labeled data.\nThe state-of-the-art text summarization model is trained with machine learning algorithms.\nReinforcement learning is not used to train the state-of-the-art text summarization model.\nThe Machine Learning algorithm for training text summarization models requires labeled data.\n</premises>\n<conclusion>\nUnsupervised learning is used to train the state-of-the-art text summarization model.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Unsupervised learning is used to train the state-of-the-art text summarization model.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. ",
        "conclusions": "\"Hachi: A dog's Tale\" is rated General Audience.",
        "rationale": "from typing import Optional\n\nclass Film:\n    def __init__(self,\n                 is_family_friendly_animated: Optional[bool] = None,\n                 is_general_audience: Optional[bool] = None,\n                 is_appropriate_all_ages: Optional[bool] = None,\n                 contains_excessive_content: Optional[bool] = None,\n                 can_children_watch_without_guidance: Optional[bool] = None):\n        self.is_family_friendly_animated = is_family_friendly_animated\n        self.is_general_audience = is_general_audience\n        self.is_appropriate_all_ages = is_appropriate_all_ages\n        self.contains_excessive_content = contains_excessive_content\n        self.can_children_watch_without_guidance = can_children_watch_without_guidance\n\ndef apply_premises(film: Film) -> bool:\n    changed = False\n\n    # Premise 1: If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\n    if film.is_appropriate_all_ages is True and film.can_children_watch_without_guidance is not True:\n        film.can_children_watch_without_guidance = True\n        changed = True\n\n    # Premise 2: If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\n    if film.contains_excessive_content is True and film.can_children_watch_without_guidance is not False:\n        film.can_children_watch_without_guidance = False\n        changed = True\n\n    # Premise 3: If a film is rated General Audience, then it is appropriate for people of all ages.\n    if film.is_general_audience is True and film.is_appropriate_all_ages is not True:\n        film.is_appropriate_all_ages = True\n        changed = True\n\n    # Premise 4: All family-friendly animated films are rated General Audience.\n    if film.is_family_friendly_animated is True and film.is_general_audience is not True:\n        film.is_general_audience = True\n        changed = True\n\n    # Premise 5: All movies in the Frozen series are family-friendly animated films.\n    # This premise does not directly affect the state of the film object.\n\n    # Premise 6: \"Hachi: A dog's Tale\" is a film.\n    # This premise does not directly affect the state of the film object.\n\n    # Premise 7: \"Hachi: A dog's Tale\" is either a family-friendly animated film or is appropriate for people of all ages.\n    if (film.is_family_friendly_animated is True or film.is_appropriate_all_ages is True) and film.is_family_friendly_animated is None and film.is_appropriate_all_ages is None:\n        film.is_family_friendly_animated = True  # Assume it is family-friendly animated for inference\n        film.is_appropriate_all_ages = True\n        changed = True\n\n    return changed\n\ndef run_inference(film: Film):\n    while apply_premises(film):\n        pass\n\ndef check_conclusion(film: Film) -> str:\n    run_inference(film)\n    if film.is_general_audience is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    film = Film(\n        is_family_friendly_animated=None,\n        is_general_audience=None,\n        is_appropriate_all_ages=None,\n        contains_excessive_content=None,\n        can_children_watch_without_guidance=None\n    )\n    return check_conclusion(film)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 'Hachi: A dog's Tale' is rated General Audience?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. \n</premises>\n<conclusion>\n\"Hachi: A dog's Tale\" is rated General Audience.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? \"Hachi: A dog's Tale\" is rated General Audience.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. ",
        "conclusions": "\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.",
        "rationale": "from typing import Optional\n\nclass Film:\n    def __init__(self,\n                 is_all_ages: Optional[bool] = None,\n                 contains_excessive_content: Optional[bool] = None,\n                 is_frozen_series: Optional[bool] = None,\n                 is_family_animated: Optional[bool] = None,\n                 is_general_audience: Optional[bool] = None):\n        self.is_all_ages = is_all_ages\n        self.contains_excessive_content = contains_excessive_content\n        self.is_frozen_series = is_frozen_series\n        self.is_family_animated = is_family_animated\n        self.is_general_audience = is_general_audience\n\ndef apply_premises(film: Film) -> bool:\n    changed = False\n\n    # Premise 1: If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\n    if film.is_all_ages is True and film.contains_excessive_content is not False:\n        film.contains_excessive_content = False\n        changed = True\n\n    # Premise 2: If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\n    if film.contains_excessive_content is True and film.is_all_ages is not False:\n        film.is_all_ages = False\n        changed = True\n\n    # Premise 3: If a film is rated General Audience, then it is appropriate for people of all ages.\n    if film.is_general_audience is True and film.is_all_ages is not True:\n        film.is_all_ages = True\n        changed = True\n\n    # Premise 4: All family-friendly animated films are rated General Audience.\n    if film.is_family_animated is True and film.is_general_audience is not True:\n        film.is_general_audience = True\n        changed = True\n\n    # Premise 5: All movies in the Frozen series are family-friendly animated films.\n    if film.is_frozen_series is True and film.is_family_animated is not True:\n        film.is_family_animated = True\n        changed = True\n\n    # Premise 6: \"Hachi: A dog's Tale\" is a film.\n    # No changes are made here as it is a fact.\n\n    # Premise 7: \"Hachi: A dog's Tale\" is either a family-friendly animated film or is appropriate for people of all ages.\n    if film.name == \"Hachi: A dog's Tale\":\n        if film.is_family_animated is None and film.is_all_ages is None:\n            film.is_family_animated = True\n            film.is_all_ages = True\n            changed = True\n\n    return changed\n\ndef run_inference(film: Film):\n    while apply_premises(film):\n        pass\n\ndef check_conclusion(film: Film) -> str:\n    run_inference(film)\n    # Conclusion: \"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.\n    if film.name == \"Hachi: A dog's Tale\":\n        if film.contains_excessive_content is None:\n            return \"Uncertain\"\n        if film.is_frozen_series is None:\n            return \"Uncertain\"\n        if film.contains_excessive_content is True or film.is_frozen_series is True or (film.contains_excessive_content is True and film.is_frozen_series is True):\n            return \"True\"\n        else:\n            return \"False\"\n\ndef func():\n    film = Film(\n        is_all_ages=None,\n        contains_excessive_content=None,\n        is_frozen_series=None,\n        is_family_animated=None,\n        is_general_audience=None\n    )\n    return check_conclusion(film)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 'Hachi: A dog's Tale' contains excessive erotic and violent content or is in the 'Frozen' series or both?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. \n</premises>\n<conclusion>\n\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? \"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. ",
        "conclusions": "\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.",
        "rationale": "from typing import Optional\n\nclass Film:\n    def __init__(self,\n                 is_all_ages: Optional[bool] = None,\n                 contains_erotic_violent_content: Optional[bool] = None,\n                 is_frozen_series: Optional[bool] = None,\n                 is_family_animated: Optional[bool] = None,\n                 is_general_audience: Optional[bool] = None):\n        self.is_all_ages = is_all_ages\n        self.contains_erotic_violent_content = contains_erotic_violent_content\n        self.is_frozen_series = is_frozen_series\n        self.is_family_animated = is_family_animated\n        self.is_general_audience = is_general_audience\n\ndef apply_premises(film: Film) -> bool:\n    changed = False\n\n    # Premise 1: If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\n    if film.is_all_ages is True and film.is_all_ages is not True:\n        film.is_all_ages = True\n        changed = True\n\n    # Premise 2: If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\n    if film.contains_erotic_violent_content is True and film.is_all_ages is not False:\n        film.is_all_ages = False\n        changed = True\n\n    # Premise 3: If a film is rated General Audience, then it is appropriate for people of all ages.\n    if film.is_general_audience is True and film.is_all_ages is not True:\n        film.is_all_ages = True\n        changed = True\n\n    # Premise 4: All family-friendly animated films are rated General Audience.\n    if film.is_family_animated is True and film.is_general_audience is not True:\n        film.is_general_audience = True\n        changed = True\n\n    # Premise 5: All movies in the Frozen series are family-friendly animated films.\n    if film.is_frozen_series is True and film.is_family_animated is not True:\n        film.is_family_animated = True\n        changed = True\n\n    # Premise 6: \"Hachi: A dog's Tale\" is a film.\n    # No change needed as it is already assumed.\n\n    # Premise 7: \"Hachi: A dog's Tale\" is either a family-friendly animated film or is appropriate for people of all ages.\n    if film.is_family_animated is None and film.is_all_ages is None:\n        film.is_family_animated = True\n        film.is_all_ages = True\n        changed = True\n\n    return changed\n\ndef run_inference(film: Film):\n    while apply_premises(film):\n        pass\n\ndef check_conclusion(film: Film) -> str:\n    run_inference(film)\n    # Conclusion: \"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.\n    if (film.contains_erotic_violent_content is True and film.is_frozen_series is True) or (film.contains_erotic_violent_content is False and film.is_frozen_series is False):\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    film = Film(\n        is_all_ages=None,\n        contains_erotic_violent_content=None,\n        is_frozen_series=None,\n        is_family_animated=None,\n        is_general_audience=None\n    )\n    return check_conclusion(film)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 'Hachi: A dog's Tale' either contains excessive erotic and violent content and is a film in the 'Frozen' series, or it neither contains excessive erotic and violent content nor is a film in the 'Frozen' series?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. \n</premises>\n<conclusion>\n\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? \"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred back in the 1920s to resemble the aurochs.\nHeck cattle are animals.\nAurochs are animals.\nSome animals to be bred back resemble extinct animals.",
        "conclusions": "Some Heck cattle are artificially selected.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, name: str, is_extinct: Optional[bool] = None):\n        self.name = name\n        self.is_extinct = is_extinct\n\nclass HeckCattle(Animal):\n    def __init__(self, is_bred_back: Optional[bool] = None, is_artificially_selected: Optional[bool] = None):\n        super().__init__(name=\"Heck cattle\")\n        self.is_bred_back = is_bred_back\n        self.is_artificially_selected = is_artificially_selected\n\ndef apply_premises(heck_cattle: HeckCattle) -> bool:\n    changed = False\n\n    # Premise 1: Heck cattle were bred back in the 1920s to resemble the aurochs.\n    if heck_cattle.is_bred_back is None:\n        heck_cattle.is_bred_back = True\n        changed = True\n\n    # Premise 2: Heck cattle are animals.\n    # No change needed as it's a given fact.\n\n    # Premise 3: Aurochs are animals.\n    # No change needed as it's a given fact.\n\n    # Premise 4: Some animals to be bred back resemble extinct animals.\n    # This does not directly affect the state of Heck cattle being bred back or artificially selected.\n\n    return changed\n\ndef run_inference(heck_cattle: HeckCattle):\n    while apply_premises(heck_cattle):\n        pass\n\ndef check_conclusion(heck_cattle: HeckCattle) -> str:\n    run_inference(heck_cattle)\n    # Conclusion: Some Heck cattle are artificially selected.\n    if heck_cattle.is_bred_back is True and heck_cattle.is_artificially_selected is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    heck_cattle = HeckCattle(is_bred_back=None, is_artificially_selected=None)\n    return check_conclusion(heck_cattle)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some Heck cattle are artificially selected?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred back in the 1920s to resemble the aurochs.\nHeck cattle are animals.\nAurochs are animals.\nSome animals to be bred back resemble extinct animals.\n</premises>\n<conclusion>\nSome Heck cattle are artificially selected.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Some Heck cattle are artificially selected.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred back in the 1920s to resemble the aurochs.\nHeck cattle are animals.\nAurochs are animals.\nSome animals to be bred back resemble extinct animals.",
        "conclusions": "Aurochs are extinct.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 name: str,\n                 is_extinct: Optional[bool] = None,\n                 is_bred_back: Optional[bool] = None,\n                 resembles_extinct: Optional[bool] = None):\n        self.name = name\n        self.is_extinct = is_extinct\n        self.is_bred_back = is_bred_back\n        self.resembles_extinct = resembles_extinct\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\n    # No need to update any attributes here as this is a general statement.\n\n    # Premise 2: Heck cattle were bred back in the 1920s to resemble the aurochs.\n    if animal.name == \"Heck cattle\":\n        if animal.is_bred_back is None:\n            animal.is_bred_back = True\n            changed = True\n        if animal.resembles_extinct is None:\n            animal.resembles_extinct = True\n            changed = True\n\n    # Premise 3: Heck cattle are animals.\n    if animal.name == \"Heck cattle\":\n        if animal.is_bred_back is None:\n            animal.is_bred_back = True\n            changed = True\n        if animal.resembles_extinct is None:\n            animal.resembles_extinct = True\n            changed = True\n\n    # Premise 4: Aurochs are animals.\n    if animal.name == \"Aurochs\":\n        if animal.is_bred_back is None:\n            animal.is_bred_back = False\n            changed = True\n        if animal.resembles_extinct is None:\n            animal.resembles_extinct = True\n            changed = True\n\n    # Premise 5: Some animals to be bred back resemble extinct animals.\n    if animal.name == \"Heck cattle\":\n        if animal.resembles_extinct is True and animal.is_bred_back is True:\n            if animal.is_extinct is None:\n                animal.is_extinct = False\n                changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    if animal.name == \"Aurochs\":\n        if animal.is_extinct is None:\n            return \"Uncertain\"\n        elif animal.is_extinct is True:\n            return \"True\"\n        else:\n            return \"False\"\n\ndef func():\n    aurochs = Animal(name=\"Aurochs\")\n    return check_conclusion(aurochs)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Aurochs are extinct?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred back in the 1920s to resemble the aurochs.\nHeck cattle are animals.\nAurochs are animals.\nSome animals to be bred back resemble extinct animals.\n</premises>\n<conclusion>\nAurochs are extinct.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Aurochs are extinct.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "Vladimir is a Russian federation official",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 us_citizenship: Optional[bool] = None,\n                 taiwanese_citizenship: Optional[bool] = None,\n                 can_register_to_vote: Optional[bool] = None,\n                 is_russian_federation_official: Optional[bool] = None,\n                 is_manager_at_gazprom: Optional[bool] = None):\n        self.name = name\n        self.us_citizenship = us_citizenship\n        self.taiwanese_citizenship = taiwanese_citizenship\n        self.can_register_to_vote = can_register_to_vote\n        self.is_russian_federation_official = is_russian_federation_official\n        self.is_manager_at_gazprom = is_manager_at_gazprom\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    # This premise does not affect the conclusion about Vladimir being a Russian Federation official.\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    if person.name == \"Vladimir\" and person.us_citizenship is True and person.can_register_to_vote is not True:\n        person.can_register_to_vote = True\n        changed = True\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    if person.name == \"Vladimir\" and person.us_citizenship is None and person.taiwanese_citizenship is None:\n        person.us_citizenship = True\n        person.taiwanese_citizenship = False\n        changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    if person.name == \"Vladimir\" and person.is_russian_federation_official is True and person.taiwanese_citizenship is True:\n        person.taiwanese_citizenship = False\n        changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    if person.name == \"Vladimir\" and person.taiwanese_citizenship is True:\n        person.taiwanese_citizenship = False\n        changed = True\n    if person.name == \"Vladimir\" and person.is_manager_at_gazprom is True:\n        person.is_manager_at_gazprom = False\n        changed = True\n\n    # Premise 6: Ekaterina can register to vote in the United States, or she is a Russian federation official.\n    # This premise does not directly affect Vladimir's status as a Russian Federation official.\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Vladimir\" and person.is_russian_federation_official is None:\n        return \"Uncertain\"\n    elif person.is_russian_federation_official is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"Vladimir\",\n        us_citizenship=None,\n        taiwanese_citizenship=None,\n        can_register_to_vote=None,\n        is_russian_federation_official=None,\n        is_manager_at_gazprom=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Vladimir is a Russian federation official?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</premises>\n<conclusion>\nVladimir is a Russian federation official\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Vladimir is a Russian federation official\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "Vladimir is not a Russian federation official",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 us_citizenship: Optional[bool] = None,\n                 taiwanese_citizenship: Optional[bool] = None,\n                 can_register_vote: Optional[bool] = None,\n                 is_russian_official: Optional[bool] = None,\n                 is_manager_gazprom: Optional[bool] = None):\n        self.name = name\n        self.us_citizenship = us_citizenship\n        self.taiwanese_citizenship = taiwanese_citizenship\n        self.can_register_vote = can_register_vote\n        self.is_russian_official = is_russian_official\n        self.is_manager_gazprom = is_manager_gazprom\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    # This premise is not directly used in the inference, but we keep it for completeness.\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    if person.us_citizenship is True and person.can_register_vote is None:\n        person.can_register_vote = True\n        changed = True\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    if person.us_citizenship is None and person.taiwanese_citizenship is None:\n        person.us_citizenship = False\n        person.taiwanese_citizenship = False\n        changed = True\n    if person.us_citizenship is None and person.taiwanese_citizenship is True:\n        person.us_citizenship = False\n        changed = True\n    if person.us_citizenship is True and person.taiwanese_citizenship is None:\n        person.taiwanese_citizenship = False\n        changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    if person.is_russian_official is True and person.taiwanese_citizenship is True:\n        person.taiwanese_citizenship = False\n        changed = True\n        person.is_russian_official = False\n        changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    if person.name == \"Vladimir\":\n        if person.taiwanese_citizenship is None:\n            person.taiwanese_citizenship = False\n            changed = True\n        if person.is_manager_gazprom is None:\n            person.is_manager_gazprom = False\n            changed = True\n\n    # Premise 6: Ekaterina can register to vote in the United States, or she is a Russian federation official.\n    if person.name == \"Ekaterina\":\n        if person.can_register_vote is None and person.is_russian_official is None:\n            person.can_register_vote = True\n            person.is_russian_official = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Vladimir\":\n        if person.is_russian_official is None:\n            return \"Uncertain\"\n        if person.is_russian_official is False:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Vladimir\",\n        us_citizenship=None,\n        taiwanese_citizenship=None,\n        can_register_vote=None,\n        is_russian_official=None,\n        is_manager_gazprom=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Vladimir is not a Russian federation official?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</premises>\n<conclusion>\nVladimir is not a Russian federation official\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Vladimir is not a Russian federation official\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 has_us_citizenship: Optional[bool] = None,\n                 has_taiwanese_citizenship: Optional[bool] = None,\n                 is_russian_official: Optional[bool] = None,\n                 is_manager_at_gazprom: Optional[bool] = None,\n                 can_vote: Optional[bool] = None):\n        self.has_us_citizenship = has_us_citizenship\n        self.has_taiwanese_citizenship = has_taiwanese_citizenship\n        self.is_russian_official = is_russian_official\n        self.is_manager_at_gazprom = is_manager_at_gazprom\n        self.can_vote = can_vote\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    if person.can_vote is not None:\n        person.can_vote = True\n        changed = True\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    if person.has_us_citizenship is True and person.has_us_citizenship is not None:\n        person.can_vote = True\n        changed = True\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    if person.has_us_citizenship is None and person.has_taiwanese_citizenship is None:\n        person.has_us_citizenship = True\n        person.has_taiwanese_citizenship = False\n        changed = True\n    elif person.has_us_citizenship is None and person.has_taiwanese_citizenship is True:\n        person.has_us_citizenship = False\n        person.has_taiwanese_citizenship = True\n        changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    if person.is_russian_official is True and person.has_taiwanese_citizenship is True:\n        person.has_taiwanese_citizenship = False\n        changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    # No direct implication for Ekaterina based on this premise.\n\n    # Premise 6: Ekaterina can register to vote in the United States, or she is a Russian federation official.\n    if person.name == \"Ekaterina\":\n        if person.is_russian_official is None and person.can_vote is True:\n            person.is_russian_official = True\n            changed = True\n        elif person.is_russian_official is None and person.can_vote is False:\n            person.is_russian_official = False\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Ekaterina\":\n        if person.can_vote is True or person.is_manager_at_gazprom is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        has_us_citizenship=None,\n        has_taiwanese_citizenship=None,\n        is_russian_official=None,\n        is_manager_at_gazprom=None,\n        can_vote=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</premises>\n<conclusion>\nEkaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 us_citizenship: Optional[bool] = None,\n                 taiwanese_citizenship: Optional[bool] = None,\n                 can_register: Optional[bool] = None,\n                 is_gazprom_manager: Optional[bool] = None,\n                 can_vote: Optional[bool] = None):\n        self.name = name\n        self.us_citizenship = us_citizenship\n        self.taiwanese_citizenship = taiwanese_citizenship\n        self.can_register = can_register\n        self.is_gazprom_manager = is_gazprom_manager\n        self.can_vote = can_vote\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    if person.can_register is True and person.can_vote is not True:\n        person.can_vote = True\n        changed = True\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    if person.us_citizenship is True and person.can_register is not True:\n        person.can_register = True\n        changed = True\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    if person.us_citizenship is None and person.taiwanese_citizenship is None:\n        person.us_citizenship = True\n        changed = True\n    if person.us_citizenship is None and person.taiwanese_citizenship is True:\n        person.us_citizenship = False\n        changed = True\n    if person.us_citizenship is True and person.taiwanese_citizenship is None:\n        person.taiwanese_citizenship = False\n        changed = True\n    if person.us_citizenship is False and person.taiwanese_citizenship is None:\n        person.taiwanese_citizenship = True\n        changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    if person.taiwanese_citizenship is True and person.us_citizenship is False:\n        person.us_citizenship = True\n        changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    if person.name == \"Vladimir\":\n        if person.taiwanese_citizenship is True:\n            person.taiwanese_citizenship = False\n            changed = True\n        if person.is_gazprom_manager is True:\n            person.is_gazprom_manager = False\n            changed = True\n\n    # Premise 6: Ekaterina she can register to vote in the United States, or she is a Russian federation official.\n    if person.name == \"Ekaterina\":\n        if person.can_register is None and person.us_citizenship is True:\n            person.can_register = True\n            changed = True\n        if person.can_register is None and person.us_citizenship is False:\n            person.can_register = False\n            changed = True\n        if person.can_register is None and person.is_gazprom_manager is True:\n            person.can_register = False\n            changed = True\n        if person.can_register is None and person.is_gazprom_manager is False:\n            person.can_register = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.\n    if person.name == \"Ekaterina\":\n        if person.can_vote is True:\n            return \"True\"\n    if person.name == \"Vladimir\":\n        if person.is_gazprom_manager is True:\n            return \"True\"\n    return \"False\"\n\ndef func():\n    person = Person(\n        name=\"Ekaterina\",\n        us_citizenship=None,\n        taiwanese_citizenship=None,\n        can_register=None,\n        is_gazprom_manager=None,\n        can_vote=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</premises>\n<conclusion>\nEkaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, has_us_citizenship: Optional[bool] = None, has_taiwanese_citizenship: Optional[bool] = None, is_gazprom_manager: Optional[bool] = None, can_register_to_vote: Optional[bool] = None):\n        self.name = name\n        self.has_us_citizenship = has_us_citizenship\n        self.has_taiwanese_citizenship = has_taiwanese_citizenship\n        self.is_gazprom_manager = is_gazprom_manager\n        self.can_register_to_vote = can_register_to_vote\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    if person.name == \"Vladimir\" and person.can_register_to_vote is not None:\n        if person.can_register_to_vote and person.can_participate_in_election is None:\n            person.can_participate_in_election = True\n            changed = True\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    if person.has_us_citizenship is True and person.can_register_to_vote is None:\n        person.can_register_to_vote = True\n        changed = True\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    if person.has_us_citizenship is None and person.has_taiwanese_citizenship is not None:\n        person.has_us_citizenship = not person.has_taiwanese_citizenship\n        changed = True\n    elif person.has_taiwanese_citizenship is None and person.has_us_citizenship is not None:\n        person.has_taiwanese_citizenship = not person.has_us_citizenship\n        changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    if person.name == \"Vladimir\" and person.has_taiwanese_citizenship is True:\n        person.has_taiwanese_citizenship = False\n        changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    if person.name == \"Vladimir\" and person.has_taiwanese_citizenship is None:\n        person.has_taiwanese_citizenship = False\n        changed = True\n    if person.name == \"Vladimir\" and person.is_gazprom_manager is None:\n        person.is_gazprom_manager = False\n        changed = True\n\n    # Premise 6: Ekaterina she can register to vote in the United States, or she is a Russian federation official.\n    if person.name == \"Ekaterina\" and person.can_register_to_vote is None:\n        person.can_register_to_vote = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.\n    if person.name == \"Ekaterina\" and person.can_register_to_vote is True and person.name == \"Vladimir\" and person.can_participate_in_election is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    vladimir = Person(\n        name=\"Vladimir\",\n        has_us_citizenship=None,\n        has_taiwanese_citizenship=None,\n        is_gazprom_manager=None,\n        can_register_to_vote=None\n    )\n    ekaterina = Person(\n        name=\"Ekaterina\",\n        has_us_citizenship=None,\n        has_taiwanese_citizenship=None,\n        is_gazprom_manager=None,\n        can_register_to_vote=None\n    )\n    return check_conclusion(ekaterina)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</premises>\n<conclusion>\nIt is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "New Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.",
        "conclusions": "Neapolitan Chronicles is an English book.",
        "rationale": "from typing import Optional\n\nclass PublishingHouse:\n    def __init__(self, name: str, specialty: Optional[str] = None):\n        self.name = name\n        self.specialty = specialty\n\nclass Book:\n    def __init__(self,\n                 name: str,\n                 publisher: Optional[PublishingHouse] = None,\n                 language: Optional[str] = None,\n                 translated_from: Optional[str] = None):\n        self.name = name\n        self.publisher = publisher\n        self.language = language\n        self.translated_from = translated_from\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: New Vessel Press is a publishing house specializing in translating foreign literature into English.\n    new_vessel_press = PublishingHouse(name=\"New Vessel Press\", specialty=\"translating foreign literature into English\")\n\n    # Premise 2: All of New Vessel Press's published books are in English.\n    # This sets the language for any book published by New Vessel Press to English.\n    def set_language(book: Book):\n        if book.publisher == new_vessel_press and book.language is None:\n            book.language = \"English\"\n            nonlocal changed\n            changed = True\n\n    # Premise 3: Neapolitan Chronicles is a book published by New Vessel Press.\n    neapolitan_chronicles = Book(name=\"Neapolitan Chronicles\", publisher=new_vessel_press)\n\n    # Premise 4: Neapolitan Chronicles was translated from Italian.\n    neapolitan_chronicles.translated_from = \"Italian\"\n\n    # Apply the premises\n    set_language(neapolitan_chronicles)\n\n    # Premise 5: Palace of Flies is a book published by New Vessel Press.\n    palace_of_flies = Book(name=\"Palace of Flies\", publisher=new_vessel_press)\n\n    return changed\n\ndef run_inference():\n    apply_premises()\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: Neapolitan Chronicles is an English book.\n    if neapolitan_chronicles.language == \"English\":\n        return \"True\"\n    elif neapolitan_chronicles.language is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Neapolitan Chronicles is an English book?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNew Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.\n</premises>\n<conclusion>\nNeapolitan Chronicles is an English book.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Neapolitan Chronicles is an English book.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "New Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.",
        "conclusions": "Harry Potter was published by New Vessel Press.",
        "rationale": "from typing import Optional\n\nclass PublishingHouse:\n    def __init__(self, name: str, specialty: Optional[str] = None, books: Optional[list] = None):\n        self.name = name\n        self.specialty = specialty\n        self.books = books if books is not None else []\n\nclass Book:\n    def __init__(self, title: str, publisher: Optional[PublishingHouse] = None):\n        self.title = title\n        self.publisher = publisher\n\ndef apply_premises():\n    new_vessel_press = PublishingHouse(name=\"New Vessel Press\", specialty=\"translating foreign literature into English\")\n    \n    # Adding books to New Vessel Press\n    neapolitan_chronicles = Book(title=\"Neapolitan Chronicles\", publisher=new_vessel_press)\n    palace_of_flies = Book(title=\"Palace of Flies\", publisher=new_vessel_press)\n    new_vessel_press.books.extend([neapolitan_chronicles, palace_of_flies])\n\n    return new_vessel_press\n\ndef check_conclusion(new_vessel_press):\n    if \"Harry Potter\" in [book.title for book in new_vessel_press.books]:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    new_vessel_press = apply_premises()\n    return check_conclusion(new_vessel_press)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Harry Potter was published by New Vessel Press?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNew Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.\n</premises>\n<conclusion>\nHarry Potter was published by New Vessel Press.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Harry Potter was published by New Vessel Press.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "New Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.",
        "conclusions": "Palace of Flies was translated from Italian.",
        "rationale": "from typing import Optional\n\nclass PublishingHouse:\n    def __init__(self, name: str, specializes_in: Optional[str] = None):\n        self.name = name\n        self.specializes_in = specializes_in\n\nclass Book:\n    def __init__(self,\n                 name: str,\n                 publisher: Optional[PublishingHouse] = None,\n                 language: Optional[str] = None):\n        self.name = name\n        self.publisher = publisher\n        self.language = language\n\ndef apply_premises(press: PublishingHouse, book1: Book, book2: Book) -> bool:\n    changed = False\n\n    # Premise 1: New Vessel Press is a publishing house specializing in translating foreign literature into English.\n    if press.name == \"New Vessel Press\" and press.specializes_in is None:\n        press.specializes_in = \"translating foreign literature into English\"\n        changed = True\n\n    # Premise 2: All of New Vessel Press's published books are in English.\n    if press.name == \"New Vessel Press\":\n        if book1.publisher == press and book1.language is None:\n            book1.language = \"English\"\n            changed = True\n        if book2.publisher == press and book2.language is None:\n            book2.language = \"English\"\n            changed = changed or True\n\n    # Premise 3: Neapolitan Chronicles is a book published by New Vessel Press.\n    # and Premise 4: Neapolitan Chronicles was translated from Italian.\n    if book1.name == \"Neapolitan Chronicles\" and book1.publisher == press:\n        if book1.language is None:\n            book1.language = \"Italian\"\n            changed = True\n        if book1.language != \"Italian\":\n            return False  # Contradiction\n\n    # Premise 5: Palace of Flies is a book published by New Vessel Press.\n    if book2.name == \"Palace of Flies\" and book2.publisher == press:\n        if book2.language is None:\n            book2.language = \"Unknown\"\n            changed = True\n\n    return changed\n\ndef run_inference(press: PublishingHouse, book1: Book, book2: Book):\n    while apply_premises(press, book1, book2):\n        pass\n\ndef check_conclusion(book2: Book) -> str:\n    run_inference(press, book1, book2)\n    if book2.name == \"Palace of Flies\":\n        if book2.language == \"Italian\":\n            return \"True\"\n        elif book2.language == \"English\":\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    press = PublishingHouse(name=\"New Vessel Press\")\n    book1 = Book(name=\"Neapolitan Chronicles\", publisher=press)\n    book2 = Book(name=\"Palace of Flies\", publisher=press)\n    return check_conclusion(book2)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Palace of Flies was translated from Italian?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNew Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.\n</premises>\n<conclusion>\nPalace of Flies was translated from Italian.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Palace of Flies was translated from Italian.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. ",
        "conclusions": "The mixture contains carbon.",
        "rationale": "from typing import Optional\n\nclass Mixture:\n    def __init__(self,\n                 is_chemical_compound: Optional[bool] = None,\n                 contains_only_one_element: Optional[bool] = None,\n                 contains_carbon: Optional[bool] = None):\n        self.is_chemical_compound = is_chemical_compound\n        self.contains_only_one_element = contains_only_one_element\n        self.contains_carbon = contains_carbon\n\ndef apply_premises(mixture: Mixture) -> bool:\n    changed = False\n\n    # Premise 1: All hydrocarbons are organic compounds.\n    if mixture.contains_carbon is None:\n        mixture.contains_carbon = True  # All organic compounds contain carbon.\n        changed = True\n\n    # Premise 2: All alkanes are hydrocarbons.\n    # This premise does not directly affect the mixture's properties.\n\n    # Premise 3: All organic compounds are chemical compounds.\n    if mixture.is_chemical_compound is None:\n        mixture.is_chemical_compound = True\n        changed = True\n\n    # Premise 4: All organic compounds contain carbon.\n    # This premise is already covered by Premise 1.\n\n    # Premise 5: No chemical compounds contain only one element.\n    if mixture.is_chemical_compound is True and mixture.contains_only_one_element is True:\n        mixture.contains_only_one_element = False\n        changed = True\n\n    # Premise 6: The mixture either both is a chemical compound and contains only one element, or neither.\n    # If the mixture is a chemical compound and contains only one element, it contradicts Premise 5.\n    if mixture.is_chemical_compound is True and mixture.contains_only_one_element is True:\n        mixture.is_chemical_compound = False\n        changed = True\n\n    return changed\n\ndef run_inference(mixture: Mixture):\n    while apply_premises(mixture):\n        pass\n\ndef check_conclusion(mixture: Mixture) -> str:\n    run_inference(mixture)\n    if mixture.contains_carbon is True:\n        return \"True\"\n    elif mixture.contains_carbon is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    mixture = Mixture(\n        is_chemical_compound=None,\n        contains_only_one_element=None,\n        contains_carbon=None\n    )\n    return check_conclusion(mixture)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The mixture contains carbon?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. \n</premises>\n<conclusion>\nThe mixture contains carbon.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The mixture contains carbon.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. ",
        "conclusions": "The mixture is an alkane and contains carbon.",
        "rationale": "from typing import Optional\n\nclass Compound:\n    def __init__(self,\n                 is_organic: Optional[bool] = None,\n                 is_hydrocarbon: Optional[bool] = None,\n                 is_alkane: Optional[bool] = None,\n                 contains_only_one_element: Optional[bool] = None,\n                 contains_carbon: Optional[bool] = None,\n                 is_a_mixture: Optional[bool] = None):\n        self.is_organic = is_organic\n        self.is_hydrocarbon = is_hydrocarbon\n        self.is_alkane = is_alkane\n        self.contains_only_one_element = contains_only_one_element\n        self.contains_carbon = contains_carbon\n        self.is_a_mixture = is_a_mixture\n\ndef apply_premises(compound: Compound) -> bool:\n    changed = False\n\n    # Premise 1: All hydrocarbons are organic compounds.\n    if compound.is_hydrocarbon is True and compound.is_organic is not True:\n        compound.is_organic = True\n        changed = True\n\n    # Premise 2: All alkanes are hydrocarbons.\n    if compound.is_alkane is True and compound.is_hydrocarbon is not True:\n        compound.is_hydrocarbon = True\n        changed = True\n\n    # Premise 3: All organic compounds are chemical compounds.\n    if compound.is_organic is True and compound.is_a_mixture is not True:\n        compound.is_a_mixture = True\n        changed = True\n\n    # Premise 4: All organic compounds contain carbon.\n    if compound.is_organic is True and compound.contains_carbon is not True:\n        compound.contains_carbon = True\n        changed = True\n\n    # Premise 5: No chemical compounds contain only one element.\n    if compound.is_a_mixture is False and compound.contains_only_one_element is not False:\n        compound.contains_only_one_element = False\n        changed = True\n\n    # Premise 6: The mixture either both is a chemical compound and contains only one element, or neither.\n    if compound.is_a_mixture is True and compound.contains_only_one_element is not None:\n        compound.contains_only_one_element = False\n        changed = True\n\n    return changed\n\ndef run_inference(compound: Compound):\n    while apply_premises(compound):\n        pass\n\ndef check_conclusion(compound: Compound) -> str:\n    run_inference(compound)\n    # Conclusion: The mixture is an alkane and contains carbon.\n    if compound.is_alkane is True and compound.contains_carbon is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    compound = Compound(\n        is_organic=None,\n        is_hydrocarbon=None,\n        is_alkane=None,\n        contains_only_one_element=None,\n        contains_carbon=None,\n        is_a_mixture=None\n    )\n    return check_conclusion(compound)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The mixture is an alkane and contains carbon?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. \n</premises>\n<conclusion>\nThe mixture is an alkane and contains carbon.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The mixture is an alkane and contains carbon.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. ",
        "conclusions": "If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.",
        "rationale": "from typing import Optional\n\nclass Mixture:\n    def __init__(self, contains_one_element: Optional[bool] = None, contains_carbon: Optional[bool] = None):\n        self.contains_one_element = contains_one_element  # True if it contains only one element, False otherwise, None if unknown\n        self.contains_carbon = contains_carbon  # True if it contains carbon, False otherwise, None if unknown\n\ndef apply_premises(mixture: Mixture) -> bool:\n    changed = False\n\n    # Premise 1: All hydrocarbons are organic compounds.\n    # Premise 2: All alkanes are hydrocarbons.\n    # Premise 3: All organic compounds are chemical compounds.\n    # Premise 4: All organic compounds contain carbon.\n    # Premise 5: No chemical compounds contain only one element.\n    # Premise 6: The mixture either both is a chemical compound and contains only one element, or neither.\n    if mixture.contains_one_element is True:\n        if mixture.contains_carbon is True:\n            # If the mixture contains only one element and carbon, it cannot be a chemical compound.\n            mixture.contains_carbon = False\n            changed = True\n        else:\n            # If the mixture contains only one element but no carbon, it cannot be a chemical compound.\n            mixture.contains_carbon = False\n            changed = True\n\n    # Premise 6: The mixture either both is a chemical compound and contains only one element, or neither.\n    if mixture.contains_one_element is True and mixture.contains_carbon is True:\n        # If the mixture contains only one element and carbon, it cannot be a chemical compound.\n        mixture.contains_carbon = False\n        changed = True\n    elif mixture.contains_one_element is True and mixture.contains_carbon is False:\n        # If the mixture contains only one element but no carbon, it cannot be a chemical compound.\n        mixture.contains_carbon = False\n        changed = True\n    elif mixture.contains_one_element is False:\n        # If the mixture does not contain only one element, it can still contain carbon and be a chemical compound.\n        if mixture.contains_carbon is True:\n            mixture.contains_carbon = True\n            changed = True\n\n    # Premise 7: If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.\n    # This is the conclusion we need to verify.\n\n    return changed\n\ndef run_inference(mixture: Mixture):\n    while apply_premises(mixture):\n        pass\n\ndef check_conclusion(mixture: Mixture) -> str:\n    run_inference(mixture)\n    if mixture.contains_one_element is True or mixture.contains_carbon is True:\n        # If the mixture contains only one element or contains carbon, it is neither a chemical compound nor an alkane.\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    mixture = Mixture(\n        contains_one_element=None,\n        contains_carbon=None\n    )\n    return check_conclusion(mixture)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. \n</premises>\n<conclusion>\nIf the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All humans are mortal.\nAll Greeks are humans.",
        "conclusions": "Some Greeks are mortal.",
        "rationale": "from typing import Optional\n\nclass Human:\n    def __init__(self, is_mortal: Optional[bool] = None):\n        self.is_mortal = is_mortal\n\nclass Greek(Human):\n    pass\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: All humans are mortal.\n    for human in Human.__subclasses__():\n        if human.is_mortal is None:\n            human.is_mortal = True\n            changed = True\n\n    # Premise 2: All Greeks are humans.\n    for greek in Greek.__subclasses__():\n        if greek.is_mortal is None:\n            greek.is_mortal = True\n            changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: Some Greeks are mortal.\n    # Since all Greeks are humans and all humans are mortal,\n    # it follows that some Greeks are mortal.\n    return \"True\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some Greeks are mortal?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll humans are mortal.\nAll Greeks are humans.\n</premises>\n<conclusion>\nSome Greeks are mortal.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Some Greeks are mortal.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "None of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.",
        "conclusions": "James has a part-time job offered by the university.",
        "rationale": "from typing import Optional\n\nclass Student:\n    def __init__(self,\n                 is_working_in_library: Optional[bool] = None,\n                 is_from_computer_science: Optional[bool] = None,\n                 has_part_time_job: Optional[bool] = None,\n                 is_taking_database_course: Optional[bool] = None,\n                 is_taking_class_with_david: Optional[bool] = None,\n                 is_working_in_lab: Optional[bool] = None):\n        self.is_working_in_library = is_working_in_library\n        self.is_from_computer_science = is_from_computer_science\n        self.has_part_time_job = has_part_time_job\n        self.is_taking_database_course = is_taking_database_course\n        self.is_taking_class_with_david = is_taking_class_with_david\n        self.is_working_in_lab = is_working_in_lab\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: None of the students who currently work in the library are from the computer science department.\n    if student.is_working_in_library is True and student.is_from_computer_science is not False:\n        student.is_from_computer_science = False\n        changed = True\n\n    # Premise 2: All of the students with part-time jobs offered by the university currently work in the library.\n    if student.has_part_time_job is True and student.is_working_in_library is not True:\n        student.is_working_in_library = True\n        changed = True\n\n    # Premise 3: All of the students who are taking the database course are from the computer science department.\n    if student.is_taking_database_course is True and student.is_from_computer_science is not True:\n        student.is_from_computer_science = True\n        changed = True\n\n    # Premise 4: All of the students taking a class with Professor David are taking the database course.\n    if student.is_taking_class_with_david is True and student.is_taking_database_course is not True:\n        student.is_taking_database_course = True\n        changed = True\n\n    # Premise 5: All students working in the lab are taking a class with Professor David.\n    if student.is_working_in_lab is True and student.is_taking_class_with_david is not True:\n        student.is_taking_class_with_david = True\n        changed = True\n\n    # Premise 6: James is a student working in the lab.\n    if student.name == \"James\" and student.is_working_in_lab is None:\n        student.is_working_in_lab = True\n        changed = True\n\n    # Premise 7: James doesn't work in the lab or have a part-time job offered by the university.\n    if student.name == \"James\":\n        if student.is_working_in_lab is True:\n            student.is_working_in_lab = False\n            changed = True\n        if student.has_part_time_job is True:\n            student.has_part_time_job = False\n            changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    # Conclusion: James has a part-time job offered by the university.\n    if student.name == \"James\":\n        if student.has_part_time_job is True:\n            return \"True\"\n        elif student.has_part_time_job is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n\ndef func():\n    student = Student(\n        is_working_in_library=None,\n        is_from_computer_science=None,\n        has_part_time_job=None,\n        is_taking_database_course=None,\n        is_taking_class_with_david=None,\n        is_working_in_lab=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James has a part-time job offered by the university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNone of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.\n</premises>\n<conclusion>\nJames has a part-time job offered by the university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? James has a part-time job offered by the university.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "None of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.",
        "conclusions": "James does not have a part-time job offered by the university.",
        "rationale": "from typing import Optional\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 works_in_library: Optional[bool] = None,\n                 from_computer_science: Optional[bool] = None,\n                 taking_database_course: Optional[bool] = None,\n                 taking_class_with_david: Optional[bool] = None,\n                 works_in_lab: Optional[bool] = None,\n                 has_part_time_job: Optional[bool] = None):\n        self.name = name\n        self.works_in_library = works_in_library\n        self.from_computer_science = from_computer_science\n        self.taking_database_course = taking_database_course\n        self.taking_class_with_david = taking_class_with_david\n        self.works_in_lab = works_in_lab\n        self.has_part_time_job = has_part_time_job\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: None of the students who currently work in the library are from the computer science department.\n    if student.works_in_library is True and student.from_computer_science is not False:\n        student.from_computer_science = False\n        changed = True\n\n    # Premise 2: All of the students with part-time jobs offered by the university currently work in the library.\n    if student.has_part_time_job is True and student.works_in_library is not True:\n        student.works_in_library = True\n        changed = True\n\n    # Premise 3: All of the students who are taking the database course are from the computer science department.\n    if student.taking_database_course is True and student.from_computer_science is not True:\n        student.from_computer_science = True\n        changed = True\n\n    # Premise 4: All of the students taking a class with Professor David are taking the database course.\n    if student.taking_class_with_david is True and student.taking_database_course is not True:\n        student.taking_database_course = True\n        changed = True\n\n    # Premise 5: All students working in the lab are taking a class with Professor David.\n    if student.works_in_lab is True and student.taking_class_with_david is not True:\n        student.taking_class_with_david = True\n        changed = True\n\n    # Premise 6: James is a student working in the lab.\n    if student.name == \"James\" and student.works_in_lab is None:\n        student.works_in_lab = True\n        changed = True\n\n    # Premise 7: James doesn't work in the lab or have a part-time job offered by the university.\n    if student.name == \"James\":\n        if student.works_in_lab is True:\n            student.works_in_lab = False\n            changed = True\n        if student.has_part_time_job is True:\n            student.has_part_time_job = False\n            changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    if student.name == \"James\":\n        if student.has_part_time_job is None:\n            return \"Uncertain\"\n        if student.has_part_time_job is False:\n            return \"True\"\n        else:\n            return \"False\"\n\ndef func():\n    student = Student(\n        name=\"James\",\n        works_in_library=None,\n        from_computer_science=None,\n        taking_database_course=None,\n        taking_class_with_david=None,\n        works_in_lab=None,\n        has_part_time_job=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James does not have a part-time job offered by the university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNone of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.\n</premises>\n<conclusion>\nJames does not have a part-time job offered by the university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? James does not have a part-time job offered by the university.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "None of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.",
        "conclusions": "James either takes the database course or has a part-time job offered by the university.",
        "rationale": "from typing import Optional\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 in_library: Optional[bool] = None,\n                 part_time_job: Optional[bool] = None,\n                 taking_database: Optional[bool] = None,\n                 taking_david_class: Optional[bool] = None,\n                 in_lab: Optional[bool] = None):\n        self.name = name\n        self.in_library = in_library\n        self.part_time_job = part_time_job\n        self.taking_database = taking_database\n        self.taking_david_class = taking_david_class\n        self.in_lab = in_lab\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: None of the students who currently work in the library are from the computer science department.\n    # This premise is not directly applicable to James, as we do not know if he is from the computer science department.\n\n    # Premise 2: All of the students with part-time jobs offered by the university currently work in the library.\n    # James does not have a part-time job, so this premise does not change anything about James.\n    if student.name == \"James\" and student.part_time_job is None:\n        student.part_time_job = False\n        changed = True\n\n    # Premise 3: All of the students who are taking the database course are from the computer science department.\n    # This premise is not directly applicable to James, as we do not know if he is from the computer science department.\n\n    # Premise 4: All of the students taking a class with Professor David are taking the database course.\n    if student.name == \"James\" and student.taking_david_class is None:\n        student.taking_david_class = False\n        changed = True\n\n    # Premise 5: All students working in the lab are taking a class with Professor David.\n    if student.name == \"James\" and student.in_lab is None:\n        student.in_lab = True\n        student.taking_david_class = True\n        changed = True\n\n    # Premise 6: James is a student working in the lab.\n    if student.name == \"James\":\n        if student.in_lab is None:\n            student.in_lab = True\n            changed = True\n\n    # Premise 7: James doesn't work in the lab or have a part-time job offered by the university.\n    if student.name == \"James\":\n        if student.in_lab is not False:\n            student.in_lab = False\n            changed = True\n        if student.part_time_job is not False:\n            student.part_time_job = False\n            changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    # Conclusion: James either takes the database course or has a part-time job offered by the university.\n    if student.taking_database is None or student.part_time_job is None:\n        return \"Uncertain\"\n    if student.taking_database or student.part_time_job:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    student = Student(\n        name=\"James\",\n        in_library=None,\n        part_time_job=None,\n        taking_database=None,\n        taking_david_class=None,\n        in_lab=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James either takes the database course or has a part-time job offered by the university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNone of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.\n</premises>\n<conclusion>\nJames either takes the database course or has a part-time job offered by the university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? James either takes the database course or has a part-time job offered by the university.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "None of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.",
        "conclusions": "James takes the database course.",
        "rationale": "from typing import Optional\n\nclass Student:\n    def __init__(self,\n                 is_from_computer_science: Optional[bool] = None,\n                 is_working_in_library: Optional[bool] = None,\n                 has_part_time_job: Optional[bool] = None,\n                 is_taking_database_course: Optional[bool] = None,\n                 is_working_in_lab: Optional[bool] = None,\n                 is_taking_class_with_professor_david: Optional[bool] = None):\n        self.is_from_computer_science = is_from_computer_science\n        self.is_working_in_library = is_working_in_library\n        self.has_part_time_job = has_part_time_job\n        self.is_taking_database_course = is_taking_database_course\n        self.is_working_in_lab = is_working_in_lab\n        self.is_taking_class_with_professor_david = is_taking_class_with_professor_david\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: None of the students who currently work in the library are from the computer science department.\n    if student.is_working_in_library is True and student.is_from_computer_science is not None:\n        student.is_from_computer_science = False\n        changed = True\n\n    # Premise 2: All of the students with part-time jobs offered by the university currently work in the library.\n    if student.has_part_time_job is True and student.is_working_in_library is not True:\n        student.is_working_in_library = True\n        changed = True\n\n    # Premise 3: All of the students who are taking the database course are from the computer science department.\n    if student.is_taking_database_course is True and student.is_from_computer_science is not True:\n        student.is_from_computer_science = True\n        changed = True\n\n    # Premise 4: All of the students taking a class with Professor David are taking the database course.\n    if student.is_taking_class_with_professor_david is True and student.is_taking_database_course is not True:\n        student.is_taking_database_course = True\n        changed = True\n\n    # Premise 5: All students working in the lab are taking a class with Professor David.\n    if student.is_working_in_lab is True and student.is_taking_class_with_professor_david is not True:\n        student.is_taking_class_with_professor_david = True\n        changed = True\n\n    # Premise 6: James is a student working in the lab.\n    if student.name == \"James\" and student.is_working_in_lab is not True:\n        student.is_working_in_lab = True\n        changed = True\n\n    # Premise 7: James doesn't work in the lab or have a part-time job offered by the university.\n    if student.name == \"James\":\n        if student.is_working_in_lab is True:\n            student.is_working_in_lab = False\n            changed = True\n        if student.has_part_time_job is True:\n            student.has_part_time_job = False\n            changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    # Conclusion: James takes the database course.\n    if student.is_taking_database_course is None:\n        return \"Uncertain\"\n    if student.is_taking_database_course is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    student = Student(\n        is_from_computer_science=None,\n        is_working_in_library=None,\n        has_part_time_job=None,\n        is_taking_database_course=None,\n        is_working_in_lab=None,\n        is_taking_class_with_professor_david=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James takes the database course?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNone of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.\n</premises>\n<conclusion>\nJames takes the database course.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? James takes the database course.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.",
        "conclusions": "If George likes music and has access to a program, he will compose.",
        "rationale": "from typing import Optional\n\nclass George:\n    def __init__(self,\n                 likes_music: Optional[bool] = None,\n                 has_access_to_program: Optional[bool] = None,\n                 wants_to_compose: Optional[bool] = None,\n                 can_compose: Optional[bool] = None,\n                 will_compose: Optional[bool] = None):\n        self.likes_music = likes_music\n        self.has_access_to_program = has_access_to_program\n        self.wants_to_compose = wants_to_compose\n        self.can_compose = can_compose\n        self.will_compose = will_compose\n\ndef apply_premises(george: George) -> bool:\n    changed = False\n\n    # Premise 1: If George likes music, he wants to compose.\n    if george.likes_music is True and george.wants_to_compose is not True:\n        george.wants_to_compose = True\n        changed = True\n\n    # Premise 2: If George has access to a program, he can compose.\n    if george.has_access_to_program is True and george.can_compose is not True:\n        george.can_compose = True\n        changed = True\n\n    # Premise 3: If George can compose and wants to compose, he will compose.\n    if george.can_compose is True and george.wants_to_compose is True and george.will_compose is not True:\n        george.will_compose = True\n        changed = True\n\n    return changed\n\ndef run_inference(george: George):\n    while apply_premises(george):\n        pass\n\ndef check_conclusion(george: George) -> str:\n    run_inference(george)\n    # Conclusion: If George likes music and has access to a program, he will compose.\n    if george.likes_music is True and george.has_access_to_program is True and george.will_compose is True:\n        return \"True\"\n    elif george.likes_music is True and george.has_access_to_program is True and george.will_compose is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    george = George(\n        likes_music=None,\n        has_access_to_program=None,\n        wants_to_compose=None,\n        can_compose=None,\n        will_compose=None\n    )\n    return check_conclusion(george)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If George likes music and has access to a program, he will compose?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.\n</premises>\n<conclusion>\nIf George likes music and has access to a program, he will compose.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If George likes music and has access to a program, he will compose.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.",
        "conclusions": "If George will not compose, George can not compose.",
        "rationale": "from typing import Optional\n\nclass George:\n    def __init__(self,\n                 likes_music: Optional[bool] = None,\n                 has_access_to_program: Optional[bool] = None,\n                 can_compose: Optional[bool] = None,\n                 wants_to_compose: Optional[bool] = None,\n                 will_compose: Optional[bool] = None):\n        self.likes_music = likes_music\n        self.has_access_to_program = has_access_to_program\n        self.can_compose = can_compose\n        self.wants_to_compose = wants_to_compose\n        self.will_compose = will_compose\n\ndef apply_premises(george: George) -> bool:\n    changed = False\n\n    # Premise 1: If George likes music, he wants to compose.\n    if george.likes_music is True and george.wants_to_compose is not True:\n        george.wants_to_compose = True\n        changed = True\n\n    # Premise 2: If George has access to a program, he can compose.\n    if george.has_access_to_program is True and george.can_compose is not True:\n        george.can_compose = True\n        changed = True\n\n    # Premise 3: If George can compose and wants to compose, he will compose.\n    if (george.can_compose is True and george.wants_to_compose is True and george.will_compose is not True):\n        george.will_compose = True\n        changed = True\n\n    return changed\n\ndef run_inference(george: George):\n    while apply_premises(george):\n        pass\n\ndef check_conclusion(george: George) -> str:\n    run_inference(george)\n    # Conclusion: If George will not compose, George can not compose.\n    if george.will_compose is False and george.can_compose is True:\n        return \"False\"\n    elif george.will_compose is False and george.can_compose is False:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions are unknown.\n    george = George(\n        likes_music=None,\n        has_access_to_program=None,\n        can_compose=None,\n        wants_to_compose=None,\n        will_compose=None\n    )\n    return check_conclusion(george)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If George will not compose, George can not compose?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.\n</premises>\n<conclusion>\nIf George will not compose, George can not compose.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If George will not compose, George can not compose.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "A hawk never swims. \nSome birds are hawks.",
        "conclusions": "All birds swim.",
        "rationale": "from typing import Optional\n\nclass Bird:\n    def __init__(self, is_hawk: Optional[bool] = None, swims: Optional[bool] = None):\n        self.is_hawk = is_hawk\n        self.swims = swims\n\ndef apply_premises(bird: Bird) -> bool:\n    changed = False\n\n    # Premise 1: A hawk never swims.\n    if bird.is_hawk is True and bird.swims is not False:\n        bird.swims = False\n        changed = True\n\n    # Premise 2: Some birds are hawks.\n    if bird.is_hawk is None and bird.swims is not None:\n        bird.is_hawk = True\n        changed = True\n\n    return changed\n\ndef run_inference(bird: Bird):\n    while apply_premises(bird):\n        pass\n\ndef check_conclusion(bird: Bird) -> str:\n    run_inference(bird)\n    # Conclusion: All birds swim.\n    if bird.swims is False:\n        return \"False\"\n    elif bird.swims is None:\n        return \"Uncertain\"\n    else:\n        return \"True\"\n\ndef func():\n    bird = Bird(is_hawk=None, swims=None)\n    return check_conclusion(bird)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: All birds swim?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nA hawk never swims. \nSome birds are hawks.\n</premises>\n<conclusion>\nAll birds swim.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? All birds swim.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.",
        "conclusions": "Breaking Bad is on Monday at 8 pm.",
        "rationale": "from typing import Optional\n\nclass Show:\n    def __init__(self,\n                 name: str,\n                 airing_time: Optional[str] = None,\n                 day: Optional[str] = None,\n                 gives_out_roses: Optional[bool] = None,\n                 is_bachelor_episode: Optional[bool] = None,\n                 portrays_real_people: Optional[bool] = None,\n                 is_reality_tv: Optional[bool] = None):\n        self.name = name\n        self.airs_at = airing_time\n        self.day = day\n        self.gives_out_roses = gives_out_roses\n        self.is_bachelor_episode = is_bachelor_episode\n        self.portrays_real_people = portrays_real_people\n        self.is_reality_tv = is_reality_tv\n\ndef apply_premises(show: Show) -> bool:\n    changed = False\n\n    # Premise 1: Some show airing at 8 pm on Monday gives out roses on TV.\n    # We need to check if Breaking Bad matches this description.\n    if show.name == \"Breaking Bad\":\n        if show.airs_at is None:\n            show.airs_at = \"8 pm\"\n            changed = True\n        if show.day is None:\n            show.day = \"Monday\"\n            changed = True\n        if show.gives_out_roses is None:\n            show.gives_out_roses = False\n            changed = True\n\n    # Premise 2: If a show gives out roses on TV, then the show is an episode of The Bachelor.\n    # Since Breaking Bad does not give out roses, this premise does not apply to it.\n    if show.gives_out_roses is True and show.is_bachelor_episode is None:\n        show.is_bachelor_episode = True\n        changed = True\n\n    # Premise 3: The Bachelor portrays the lives of real people.\n    # This premise does not apply to Breaking Bad.\n    if show.name == \"The Bachelor\" and show.portrays_real_people is None:\n        show.portrays_real_people = True\n        changed = True\n\n    # Premise 4: All shows portraying the lives of real people are reality TV shows.\n    # This premise does not apply to Breaking Bad.\n    if show.portrays_real_people is True and show.is_reality_tv is None:\n        show.is_reality_tv = True\n        changed = True\n\n    # Premise 5: Breaking Bad is a show.\n    # This premise does not change the attributes of Breaking Bad.\n    if show.name == \"Breaking Bad\" and show.is_reality_tv is None:\n        show.is_reality_tv = False\n        changed = True\n\n    # Premise 6: Breaking Bad is not a reality TV show.\n    # This premise does not change the attributes of Breaking Bad.\n    if show.name == \"Breaking Bad\" and show.is_reality_tv is None:\n        show.is_reality_tv = False\n        changed = True\n\n    return changed\n\ndef run_inference(show: Show):\n    while apply_premises(show):\n        pass\n\ndef check_conclusion(show: Show) -> str:\n    run_inference(show)\n    # Conclusion: Breaking Bad is on Monday at 8 pm.\n    if show.name == \"Breaking Bad\" and show.airs_at == \"8 pm\" and show.day == \"Monday\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    show = Show(name=\"Breaking Bad\")\n    return check_conclusion(show)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Breaking Bad is on Monday at 8 pm?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.\n</premises>\n<conclusion>\nBreaking Bad is on Monday at 8 pm.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Breaking Bad is on Monday at 8 pm.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.",
        "conclusions": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
        "rationale": "from typing import Optional\n\nclass Show:\n    def __init__(self,\n                 name: str,\n                 airs_at_8_pm_monday: Optional[bool] = None,\n                 gives_out_roses: Optional[bool] = None,\n                 is_bachelor_episode: Optional[bool] = None,\n                 portrays_real_people: Optional[bool] = None,\n                 is_reality_tv: Optional[bool] = None):\n        self.name = name\n        self.airs_at_8_pm_monday = airs_at_8_pm_monday\n        self.gives_out_roses = gives_out_roses\n        self.is_bachelor_episode = is_bachelor_episode\n        self.portrays_real_people = portrays_real_people\n        self.is_reality_tv = is_reality_tv\n\ndef apply_premises(show: Show) -> bool:\n    changed = False\n\n    # Premise 1: Some show airing at 8 pm on Monday gives out roses on TV.\n    # This does not provide specific information about Breaking Bad, so no update here.\n\n    # Premise 2: If a show gives out roses on TV, then the show is an episode of The Bachelor.\n    if show.gives_out_roses is True and show.is_bachelor_episode is None:\n        show.is_bachelor_episode = True\n        changed = True\n\n    # Premise 3: The Bachelor portrays the lives of real people.\n    if show.is_bachelor_episode is True and show.portrays_real_people is None:\n        show.portrays_real_people = True\n        changed = True\n\n    # Premise 4: All shows portraying the lives of real people are reality TV shows.\n    if show.portrays_real_people is True and show.is_reality_tv is None:\n        show.is_reality_tv = True\n        changed = True\n\n    # Premise 5: Breaking Bad is a show.\n    # This is a given fact, so no update here.\n\n    # Premise 6: Breaking Bad is not a reality TV show.\n    if show.name == \"Breaking Bad\" and show.is_reality_tv is None:\n        show.is_reality_tv = False\n        changed = True\n\n    return changed\n\ndef run_inference(show: Show):\n    while apply_premises(show):\n        pass\n\ndef check_conclusion(show: Show) -> str:\n    run_inference(show)\n    # Conclusion: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n    if show.name == \"Breaking Bad\":\n        if show.airs_at_8_pm_monday is None or show.gives_out_roses is None:\n            return \"Uncertain\"\n        if show.airs_at_8_pm_monday is True and show.gives_out_roses is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    show = Show(\n        name=\"Breaking Bad\",\n        airs_at_8_pm_monday=None,\n        gives_out_roses=None,\n        is_bachelor_episode=None,\n        portrays_real_people=None,\n        is_reality_tv=None\n    )\n    return check_conclusion(show)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.\n</premises>\n<conclusion>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.",
        "conclusions": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
        "rationale": "from typing import Optional\n\nclass Show:\n    def __init__(self,\n                 name: str,\n                 airing_time: Optional[str] = None,\n                 airing_day: Optional[str] = None,\n                 gives_roses: Optional[bool] = None,\n                 is_bachelors_episode: Optional[bool] = None,\n                 is_reality_tv: Optional[bool] = None):\n        self.name = name\n        self.airing_time = airing_time\n        self.airing_day = airing_day\n        self.gives_roses = gives_roses\n        self.is_bachelors_episode = is_bachelors_episode\n        self.is_reality_tv = is_reality_tv\n\ndef apply_premises(show: Show) -> bool:\n    changed = False\n\n    # Premise 1: Some show airing at 8 pm on Monday gives out roses on TV.\n    if show.name == \"Some show\" and show.airing_time == \"8 pm\" and show.airing_day == \"Monday\":\n        if show.gives_roses is None:\n            show.gives_roses = True\n            changed = True\n        if show.is_bachelors_episode is None:\n            show.is_bachelors_episode = True\n            changed = True\n\n    # Premise 2: If a show gives out roses on TV, then the show is an episode of The Bachelor.\n    if show.gives_roses is True and show.is_bachelors_episode is not True:\n        show.is_bachelors_episode = True\n        changed = True\n\n    # Premise 3: The Bachelor portrays the lives of real people.\n    if show.is_bachelors_episode is True and show.is_reality_tv is not True:\n        show.is_reality_tv = True\n        changed = True\n\n    # Premise 4: All shows portraying the lives of real people are reality TV shows.\n    if show.is_reality_tv is None and show.is_reality_tv is not False:\n        show.is_reality_tv = True\n        changed = True\n\n    # Premise 5: Breaking Bad is a show.\n    if show.name == \"Breaking Bad\" and show.is_reality_tv is None:\n        show.is_reality_tv = False\n        changed = True\n\n    # Premise 6: Breaking Bad is not a reality TV show.\n    if show.name == \"Breaking Bad\" and show.is_reality_tv is True:\n        show.is_reality_tv = False\n        changed = True\n\n    return changed\n\ndef run_inference(show: Show):\n    while apply_premises(show):\n        pass\n\ndef check_conclusion(show: Show) -> str:\n    run_inference(show)\n    # Conclusion: If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\n    if show.name == \"Breaking Bad\" and show.gives_roses is True and (show.airing_time != \"8 pm\" or show.airing_day != \"Monday\"):\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    show = Show(\n        name=\"Breaking Bad\",\n        airing_time=None,\n        airing_day=None,\n        gives_roses=None,\n        is_bachelors_episode=None,\n        is_reality_tv=None\n    )\n    return check_conclusion(show)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If roses are given out during Breaking Bad, then it is on Monday at 8 pm?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.\n</premises>\n<conclusion>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Heinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
        "conclusions": "Heinrich Schmidt was German or Russian or both.",
        "rationale": "from typing import Optional\n\nclass Politician:\n    def __init__(self,\n                 name: str,\n                 nationality: Optional[str] = None,\n                 is_german: Optional[bool] = None,\n                 is_russian: Optional[bool] = None):\n        self.name = name\n        self.nationality = nationality\n        self.is_german = is_german\n        self.is_russian = is_russian\n\ndef apply_premises(politician: Politician) -> bool:\n    changed = False\n\n    # Premise 1: Heinrich Schmidt was a German politician.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.is_german is None:\n            politician.is_german = True\n            changed = True\n\n    # Premise 2: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n    # This does not provide information about his Russian nationality.\n    return changed\n\ndef run_inference(politician: Politician):\n    while apply_premises(politician):\n        pass\n\ndef check_conclusion(politician: Politician) -> str:\n    run_inference(politician)\n    # Conclusion: Heinrich Schmidt was German or Russian or both.\n    if politician.is_german is True or politician.is_russian is True:\n        return \"True\"\n    elif politician.is_german is None or politician.is_russian is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    politician = Politician(\n        name=\"Heinrich Schmidt\",\n        is_german=None,\n        is_russian=None\n    )\n    return check_conclusion(politician)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Heinrich Schmidt was German or Russian or both?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nHeinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</premises>\n<conclusion>\nHeinrich Schmidt was German or Russian or both.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Heinrich Schmidt was German or Russian or both.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Heinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
        "conclusions": "Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
        "rationale": "from typing import Optional\n\nclass Politician:\n    def __init__(self,\n                 name: str,\n                 is_german: Optional[bool] = None,\n                 is_member_prussian_state_parliament: Optional[bool] = None,\n                 is_member_nazi_reichstag: Optional[bool] = None):\n        self.name = name\n        self.is_german = is_german\n        self.is_member_prussian_state_parliament = is_member_prussian_state_parliament\n        self.is_member_nazi_reichstag = is_member_nazi_reichstag\n\ndef apply_premises(politician: Politician) -> bool:\n    changed = False\n\n    # Premise 1: Heinrich Schmidt was a German politician.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.is_german is None:\n            politician.is_german = True\n            changed = True\n\n    # Premise 2: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.is_member_prussian_state_parliament is None:\n            politician.is_member_prussian_state_parliament = True\n            changed = True\n        if politician.is_member_nazi_reichstag is None:\n            politician.is_member_nazi_reichstag = True\n            changed = True\n\n    return changed\n\ndef run_inference(politician: Politician):\n    while apply_premises(politician):\n        pass\n\ndef check_conclusion(politician: Politician) -> str:\n    run_inference(politician)\n    # Conclusion: Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n    if politician.is_german is True and politician.is_member_prussian_state_parliament is True and politician.is_member_nazi_reichstag is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    politician = Politician(\n        name=\"Heinrich Schmidt\",\n        is_german=None,\n        is_member_prussian_state_parliament=None,\n        is_member_nazi_reichstag=None\n    )\n    return check_conclusion(politician)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nHeinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</premises>\n<conclusion>\nSome German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Heinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
        "conclusions": "No politicians are part of the Nazi Reichstag.",
        "rationale": "from typing import Optional\n\nclass Politician:\n    def __init__(self, name: str, is_part_of_nazi_reichstag: Optional[bool] = None):\n        self.name = name\n        self.is_part_of_nazi_reichstag = is_part_of_nazi_reichstag\n\ndef apply_premises(politician: Politician) -> bool:\n    changed = False\n\n    # Premise 1: Heinrich Schmidt was a German politician.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.is_part_of_nazi_reichstag is None:\n            politician.is_part_of_nazi_reichstag = False\n            changed = True\n\n    # Premise 2: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.is_part_of_nazi_reichstag is False:\n            politician.is_part_of_nazi_reichstag = True\n            changed = True\n\n    return changed\n\ndef run_inference(politician: Politician):\n    while apply_premises(politician):\n        pass\n\ndef check_conclusion(politician: Politician) -> str:\n    run_inference(politician)\n    if politician.is_part_of_nazi_reichstag is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    politician = Politician(name=\"Heinrich Schmidt\", is_part_of_nazi_reichstag=None)\n    return check_conclusion(politician)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No politicians are part of the Nazi Reichstag?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nHeinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</premises>\n<conclusion>\nNo politicians are part of the Nazi Reichstag.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? No politicians are part of the Nazi Reichstag.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.",
        "conclusions": "Colorectal cancer is a kind of severe cancer",
        "rationale": "from typing import Optional\n\nclass Disease:\n    def __init__(self, is_deadly: Optional[bool] = None, has_low_survival_rate: Optional[bool] = None):\n        self.is_deadly = is_deadly\n        self.has_low_survival_rate = has_low_survival_rate\n\nclass Cancer(Disease):\n    def __init__(self, is_severe: Optional[bool] = None):\n        super().__init__()\n        self.is_severe = is_severe\n\nclass BileDuctCancer(Cancer):\n    def __init__(self, is_severe: Optional[bool] = None, has_low_survival_rate: Optional[bool] = None):\n        super().__init__(is_severe)\n        self.has_low_survival_rate = has_low_survival_rate\n\nclass Cholangiocarcinoma(BileDuctCancer):\n    pass\n\nclass Flu:\n    def __init__(self, has_low_survival_rate: Optional[bool] = None):\n        self.has_low_survival_rate = has_low_survival_rate\n\nclass ColorectalCancer(Cancer):\n    pass\n\ndef apply_premises(disease: Disease, cancer: Cancer, bile_duct_cancer: BileDuctCancer, cholangiocarcinoma: Cholangiocarcinoma, flu: Flu, colorectal_cancer: ColorectalCancer) -> bool:\n    changed = False\n\n    # Premise 1: If something is a deadly disease, then it comes with a low survival rate.\n    if disease.is_deadly is True and disease.has_low_survival_rate is not True:\n        disease.has_low_survival_rate = True\n        changed = True\n\n    # Premise 2: Severe cancers are deadly diseases.\n    if cancer.is_severe is True and cancer.is_deadly is not True:\n        cancer.is_deadly = True\n        changed = True\n\n    # Premise 3: Bile duct cancer is a severe form of cancer.\n    if bile_duct_cancer.is_severe is not True and bile_duct_cancer.is_severe is not False:\n        bile_duct_cancer.is_severe = True\n        changed = True\n\n    # Premise 4: All Cholangiocarcinoma is bile duct cancer.\n    if isinstance(cholangiocarcinoma, BileDuctCancer) and not isinstance(cholangiocarcinoma, BileDuctCancer):\n        raise ValueError(\"Cholangiocarcinoma must be a BileDuctCancer instance\")\n    if isinstance(cholangiocarcinoma, BileDuctCancer) and cholangiocarcinoma.is_severe is not True:\n        cholangiocarcinoma.is_severe = True\n        changed = True\n\n    # Premise 5: Mild flu comes with a low survival rate.\n    if isinstance(flu, Flu) and flu.has_low_survival_rate is not True:\n        flu.has_low_survival_rate = True\n        changed = True\n\n    # Premise 6: Colorectal cancer is not both a bile duct cancer and with a low survival rate.\n    if isinstance(colorectal_cancer, BileDuctCancer) and colorectal_cancer.has_low_survival_rate is True:\n        raise ValueError(\"Colorectal cancer cannot be a bile duct cancer and have a low survival rate\")\n    if isinstance(colorectal_cancer, BileDuctCancer) and colorectal_cancer.is_severe is True:\n        raise ValueError(\"Colorectal cancer cannot be a severe bile duct cancer\")\n\n    return changed\n\ndef run_inference(disease: Disease, cancer: Cancer, bile_duct_cancer: BileDuctCancer, cholangiocarcinoma: Cholangiocarcinoma, flu: Flu, colorectal_cancer: ColorectalCancer):\n    while apply_premises(disease, cancer, bile_duct_cancer, cholangiocarcinoma, flu, colorectal_cancer):\n        pass\n\ndef check_conclusion(disease: Disease, cancer: Cancer, bile_duct_cancer: BileDuctCancer, cholangiocarcinoma: Cholangiocarcinoma, flu: Flu, colorectal_cancer: ColorectalCancer) -> str:\n    run_inference(disease, cancer, bile_duct_cancer, cholangiocarcinoma, flu, colorectal_cancer)\n    if colorectal_cancer.is_severe is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions\n    disease = Disease(is_deadly=None, has_low_survival_rate=None)\n    cancer = Cancer(is_severe=None)\n    bile_duct_cancer = BileDuctCancer(is_severe=None, has_low_survival_rate=None)\n    cholangiocarcinoma = Cholangiocarcinoma(is_severe=None, has_low_survival_rate=None)\n    flu = Flu(has_low_survival_rate=None)\n    colorectal_cancer = ColorectalCancer(is_severe=None)\n    return check_conclusion(disease, cancer, bile_duct_cancer, cholangiocarcinoma, flu, colorectal_cancer)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Colorectal cancer is a kind of severe cancer?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.\n</premises>\n<conclusion>\nColorectal cancer is a kind of severe cancer\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Colorectal cancer is a kind of severe cancer\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.",
        "conclusions": "If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.",
        "rationale": "from typing import Optional\n\nclass ColorectalCancer:\n    def __init__(self,\n                 is_bile_duct_cancer: Optional[bool] = None,\n                 is_cholangiocarcinoma: Optional[bool] = None,\n                 has_low_survival_rate: Optional[bool] = None,\n                 is_mild_flu: Optional[bool] = None):\n        self.is_bile_duct_cancer = is_bile_duct_cancer\n        self.is_cholangiocarcinoma = is_cholangiocarcinoma\n        self.has_low_survival_rate = has_low_survival_rate\n        self.is_mild_flu = is_mild_flu\n\ndef apply_premises(cancer: ColorectalCancer) -> bool:\n    changed = False\n\n    # Premise 1: If something is a deadly disease, then it comes with a low survival rate.\n    # Premise 2: Severe cancers are deadly diseases.\n    # Premise 3: Bile duct cancer is a severe form cancer.\n    # Premise 4: All Cholangiocarcinoma is bile duct cancer.\n    if cancer.is_cholangiocarcinoma is True and cancer.is_bile_duct_cancer is not True:\n        cancer.is_bile_duct_cancer = True\n        changed = True\n\n    # Premise 5: Mild flu comes with a low survival rate.\n    if cancer.is_mild_flu is None:\n        cancer.is_mild_flu = False\n        changed = True\n\n    # Premise 6: Colorectal cancer is not both a bile duct cancer and with a low survival rate.\n    if cancer.is_bile_duct_cancer is True and cancer.has_low_survival_rate is True:\n        cancer.is_bile_duct_cancer = False\n        changed = True\n\n    return changed\n\ndef run_inference(cancer: ColorectalCancer):\n    while apply_premises(cancer):\n        pass\n\ndef check_conclusion(cancer: ColorectalCancer) -> str:\n    run_inference(cancer)\n    # Conclusion: If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.\n    if cancer.is_bile_duct_cancer is None or cancer.is_cholangiocarcinoma is None or cancer.is_mild_flu is None:\n        return \"Uncertain\"\n    if (cancer.is_bile_duct_cancer is True or cancer.is_cholangiocarcinoma is True) and (cancer.is_bile_duct_cancer is not True or cancer.is_mild_flu is not True):\n        return \"False\"\n    if (cancer.is_bile_duct_cancer is True or cancer.is_cholangiocarcinoma is True) and cancer.is_bile_duct_cancer is True and cancer.is_mild_flu is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    cancer = ColorectalCancer(\n        is_bile_duct_cancer=None,\n        is_cholangiocarcinoma=None,\n        has_low_survival_rate=None,\n        is_mild_flu=None\n    )\n    return check_conclusion(cancer)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.\n</premises>\n<conclusion>\nIf colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "If something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.",
        "conclusions": "Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.",
        "rationale": "from typing import Optional\n\nclass Disease:\n    def __init__(self, name: str, is_deadly: Optional[bool] = None, survival_rate: Optional[str] = None):\n        self.name = name\n        self.is_deadly = is_deadly\n        self.survival_rate = survival_rate\n\nclass Cancer(Disease):\n    def __init__(self, name: str, is_severe: Optional[bool] = None):\n        super().__init__(name)\n        self.is_severe = is_severe\n\nclass BileDuctCancer(Cancer):\n    def __init__(self, name: str, is_severe: Optional[bool] = None):\n        super().__init__(name, is_severe)\n\nclass Cholangiocarcinoma(BileDuctCancer):\n    def __init__(self, name: str):\n        super().__init__(name)\n\nclass MildFlu(Disease):\n    def __init__(self, name: str):\n        super().__init__(name, survival_rate=\"low\")\n\nclass ColorectalCancer(Disease):\n    def __init__(self, name: str):\n        super().__init__(name)\n\ndef apply_premises(disease: Disease) -> bool:\n    changed = False\n\n    # Premise 1: If something is a deadly disease, then it comes with a low survival rate.\n    if disease.is_deadly is True and disease.survival_rate is None:\n        disease.survival_rate = \"low\"\n        changed = True\n\n    # Premise 2: Severe cancers are deadly diseases.\n    if isinstance(disease, Cancer) and disease.is_severe is True and disease.is_deadly is not True:\n        disease.is_deadly = True\n        changed = True\n\n    # Premise 3: Bile duct cancer is a severe form cancer.\n    if isinstance(disease, BileDuctCancer) and disease.is_severe is not True:\n        disease.is_severe = True\n        changed = True\n\n    # Premise 4: All Cholangiocarcinoma is bile duct cancer.\n    if isinstance(disease, Cholangiocarcinoma) and not isinstance(disease, BileDuctCancer):\n        disease.__class__ = BileDuctCancer\n        changed = True\n\n    # Premise 5: Mild flu comes with a low survival rate.\n    if isinstance(disease, MildFlu) and disease.survival_rate != \"low\":\n        disease.survival_rate = \"low\"\n        changed = True\n\n    # Premise 6: Colorectal cancer is not both a bile duct cancer and with a low survival rate.\n    if isinstance(disease, ColorectalCancer) and disease.survival_rate == \"low\" and disease.is_deadly is not True:\n        disease.survival_rate = None\n        disease.is_deadly = False\n        changed = True\n\n    return changed\n\ndef run_inference(disease: Disease):\n    while apply_premises(disease):\n        pass\n\ndef check_conclusion(disease: Disease) -> str:\n    run_inference(disease)\n    if isinstance(disease, Cholangiocarcinoma) and isinstance(disease, ColorectalCancer):\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    colorectal_cancer = ColorectalCancer(\"Colorectal Cancer\")\n    return check_conclusion(colorectal_cancer)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nIf something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.\n</premises>\n<conclusion>\nColorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.",
        "conclusions": "Taylor eats salads regularly.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 grows_up_health_conscious: Optional[bool] = None,\n                 disregards_physical_well_being: Optional[bool] = None,\n                 eats_salads: Optional[bool] = None,\n                 fulfills_daily_nutritional_intakes: Optional[bool] = None):\n        self.grows_up_health_conscious = grows_up_health_conscious\n        self.disregards_physical_well_being = disregards_physical_well_being\n        self.eats_salads = eats_salads\n        self.fulfills_daily_nutritional_intakes = fulfills_daily_nutritional_intakes\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who eat salads regularly are very conscious about their health and eating habits.\n    if person.eats_salads is True and person.grows_up_health_conscious is not True:\n        person.grows_up_health_conscious = True\n        changed = True\n\n    # Premise 2: All people who grew up in health-conscious childhood homes eat salads regularly.\n    if person.grows_up_health_conscious is True and person.eats_salads is not True:\n        person.eats_salads = True\n        changed = True\n\n    # Premise 3: All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\n    if person.fulfills_daily_nutritional_intakes is True and person.grows_up_health_conscious is not True:\n        person.grows_up_health_conscious = True\n        changed = True\n\n    # Premise 4: All people who disregard their physical well-being are not very conscious about their health and eating habits.\n    if person.disregards_physical_well_being is True and person.grows_up_health_conscious is not False:\n        person.grows_up_health_conscious = False\n        changed = True\n\n    # Premise 5: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n    # This premise is not directly used to infer anything about Taylor's eating habits.\n\n    # Premise 6: Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n    if person.grows_up_health_conscious is None and person.disregards_physical_well_being is None:\n        person.grows_up_health_conscious = False\n        person.disregards_physical_well_being = False\n        changed = True\n    elif person.grows_up_health_conscious is None and person.disregards_physical_well_being is True:\n        person.grows_up_health_conscious = False\n        changed = True\n    elif person.grows_up_health_conscious is True and person.disregards_physical_well_being is None:\n        person.disregards_physical_well_being = False\n        changed = True\n    elif person.grows_up_health_conscious is True and person.disregards_physical_well_being is True:\n        person.grows_up_health_conscious = True\n        person.disregards_physical_well_being = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.eats_salads is True:\n        return \"True\"\n    elif person.eats_salads is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        grows_up_health_conscious=None,\n        disregards_physical_well_being=None,\n        eats_salads=None,\n        fulfills_daily_nutritional_intakes=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Taylor eats salads regularly?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n</premises>\n<conclusion>\nTaylor eats salads regularly.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Taylor eats salads regularly.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.",
        "conclusions": "Taylor visits the gym at least once a day.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 eats_salads_regularly: Optional[bool] = None,\n                 conscious_health_eating: Optional[bool] = None,\n                 grew_up_health_conscious: Optional[bool] = None,\n                 fulfills_daily_nutrition: Optional[bool] = None,\n                 disregards_physical_wellbeing: Optional[bool] = None,\n                 visits_gym: Optional[bool] = None):\n        self.name = name\n        self.eats_salads_regularly = eats_salads_regularly\n        self.conscious_health_eating = conscious_health_eating\n        self.grew_up_health_conscious = grew_up_health_conscious\n        self.fulfills_daily_nutrition = fulfills_daily_nutrition\n        self.disregards_physical_wellbeing = disregards_physical_wellbeing\n        self.visits_gym = visits_gym\n\ndef apply_premises(taylor: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who eat salads regularly are very conscious about their health and eating habits.\n    if taylor.eats_salads_regularly is True and taylor.conscious_health_eating is not True:\n        taylor.conscious_health_eating = True\n        changed = True\n\n    # Premise 2: All people who grew up in health-conscious childhood homes eat salads regularly.\n    if taylor.grew_up_health_conscious is True and taylor.eats_salads_regularly is not True:\n        taylor.eats_salads_regularly = True\n        changed = True\n\n    # Premise 3: All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\n    if taylor.fulfills_daily_nutrition is True and taylor.grew_up_health_conscious is not True:\n        taylor.grew_up_health_conscious = True\n        changed = True\n\n    # Premise 4: All people who disregard their physical well-being are not very conscious about their health and eating habits.\n    if taylor.disregards_physical_wellbeing is True and taylor.conscious_health_eating is not False:\n        taylor.conscious_health_eating = False\n        changed = True\n\n    # Premise 5: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n    if taylor.visits_gym is True and taylor.fulfills_daily_nutrition is not True:\n        taylor.fulfills_daily_nutrition = True\n        changed = True\n\n    # Premise 6: Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n    if (taylor.grew_up_health_conscious is True and taylor.disregards_physical_wellbeing is True) or (taylor.grew_up_health_conscious is False and taylor.disregards_physical_wellbeing is False):\n        if taylor.grew_up_health_conscious is None:\n            taylor.grew_up_health_conscious = True\n            changed = True\n        if taylor.disregards_physical_wellbeing is None:\n            taylor.disregards_physical_wellbeing = False\n            changed = True\n\n    return changed\n\ndef run_inference(taylor: Person):\n    while apply_premises(taylor):\n        pass\n\ndef check_conclusion(taylor: Person) -> str:\n    run_inference(taylor)\n    if taylor.visits_gym is True:\n        return \"True\"\n    elif taylor.visits_gym is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    taylor = Person(\n        name=\"Taylor\",\n        eats_salads_regularly=None,\n        conscious_health_eating=None,\n        grew_up_health_conscious=None,\n        fulfills_daily_nutrition=None,\n        disregards_physical_wellbeing=None,\n        visits_gym=None\n    )\n    return check_conclusion(taylor)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Taylor visits the gym at least once a day?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n</premises>\n<conclusion>\nTaylor visits the gym at least once a day.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Taylor visits the gym at least once a day.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.",
        "conclusions": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 grew_up_health_conscious: Optional[bool] = None,\n                 visits_gym: Optional[bool] = None,\n                 eats_salads: Optional[bool] = None,\n                 is_health_conscious: Optional[bool] = None,\n                 fulfills_daily_intakes: Optional[bool] = None,\n                 disregards_physical_well_being: Optional[bool] = None):\n        self.grew_up_health_conscious = grew_up_health_conscious\n        self.visits_gym = visits_gym\n        self.eats_salads = eats_salads\n        self.is_health_conscious = is_health_conscious\n        self.fulfills_daily_intakes = fulfills_daily_intakes\n        self.disregards_physical_well_being = disregards_physical_well_being\n\ndef apply_premises(taylor: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who eat salads regularly are very conscious about their health and eating habits.\n    if taylor.eats_salads is True and taylor.is_health_conscious is None:\n        taylor.is_health_conscious = True\n        changed = True\n\n    # Premise 2: All people who grew up in health-conscious childhood homes eat salads regularly.\n    if taylor.grew_up_health_conscious is True and taylor.eats_salads is None:\n        taylor.eats_salads = True\n        changed = True\n\n    # Premise 3: All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\n    if taylor.fulfills_daily_intakes is True and taylor.grew_up_health_conscious is None:\n        taylor.grew_up_health_conscious = True\n        changed = True\n\n    # Premise 4: All people who disregard their physical well-being are not very conscious about their health and eating habits.\n    if taylor.disregards_physical_well_being is True and taylor.is_health_conscious is None:\n        taylor.is_health_conscious = False\n        changed = True\n\n    # Premise 5: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n    if taylor.visits_gym is True and taylor.fulfills_daily_intakes is None:\n        taylor.fulfills_daily_intakes = True\n        changed = True\n\n    # Premise 6: Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n    if taylor.grew_up_health_conscious is None and taylor.disregards_physical_well_being is None:\n        taylor.grew_up_health_conscious = True\n        taylor.disregards_physical_well_being = False\n        changed = True\n\n    return changed\n\ndef run_inference(taylor: Person):\n    while apply_premises(taylor):\n        pass\n\ndef check_conclusion(taylor: Person) -> str:\n    run_inference(taylor)\n    # Conclusion: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\n    if taylor.grew_up_health_conscious is False and taylor.visits_gym is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    taylor = Person(\n        grew_up_health_conscious=None,\n        visits_gym=None,\n        eats_salads=None,\n        is_health_conscious=None,\n        fulfills_daily_intakes=None,\n        disregards_physical_well_being=None\n    )\n    return check_conclusion(taylor)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n</premises>\n<conclusion>\nTaylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "The summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. ",
        "conclusions": "The world championships is a sporting event.",
        "rationale": "from typing import Optional\n\nclass Event:\n    def __init__(self, name: str, is_sporting_event: Optional[bool] = None):\n        self.name = name\n        self.is_sporting_event = is_sporting_event\n\ndef apply_premises(event: Event) -> bool:\n    changed = False\n\n    # Premise 1: The summer Olympic games is a sporting event.\n    if event.name == \"The summer Olympic games\":\n        if event.is_sporting_event is None:\n            event.is_sporting_event = True\n            changed = True\n\n    # Premise 2: The last summer Olympic games was in Tokyo.\n    # This premise does not affect the sporting event status.\n    # Premise 3: The United States won the most medals in Tokyo.\n    # This premise does not affect the sporting event status.\n\n    # Premise 4: The world championships is a sporting event.\n    # This is the conclusion we are trying to verify.\n    if event.name == \"The world championships\":\n        if event.is_sporting_event is None:\n            changed = True\n\n    return changed\n\ndef run_inference(event: Event):\n    while apply_premises(event):\n        pass\n\ndef check_conclusion(event: Event) -> str:\n    run_inference(event)\n    if event.name == \"The world championships\":\n        if event.is_sporting_event is True:\n            return \"True\"\n        elif event.is_sporting_event is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    event = Event(name=\"The world championships\", is_sporting_event=None)\n    return check_conclusion(event)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The world championships is a sporting event?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThe summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. \n</premises>\n<conclusion>\nThe world championships is a sporting event.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The world championships is a sporting event.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "The summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. ",
        "conclusions": "The last summer Olympic games were not in Tokyo.",
        "rationale": "from typing import Optional\n\nclass OlympicGames:\n    def __init__(self, location: Optional[str] = None, is_summer: Optional[bool] = None):\n        self.location = location\n        self.is_summer = is_summer\n\ndef apply_premises(games: OlympicGames) -> bool:\n    changed = False\n\n    # Premise 1: The summer Olympic games is a sporting event.\n    if games.is_summer is None:\n        games.is_summer = True\n        changed = True\n\n    # Premise 2: The last summer Olympic games was in Tokyo.\n    if games.location is None:\n        games.location = \"Tokyo\"\n        changed = True\n\n    # Premise 3: The United States won the most medals in Tokyo.\n    # This premise does not affect the location.\n    return changed\n\ndef run_inference(games: OlympicGames):\n    while apply_premises(games):\n        pass\n\ndef check_conclusion(games: OlympicGames) -> str:\n    run_inference(games)\n    if games.location == \"Tokyo\":\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    games = OlympicGames(location=None, is_summer=None)\n    return check_conclusion(games)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The last summer Olympic games were not in Tokyo?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThe summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. \n</premises>\n<conclusion>\nThe last summer Olympic games were not in Tokyo.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The last summer Olympic games were not in Tokyo.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "The summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. ",
        "conclusions": "The United States won the most medals in the last summer Olympic games.",
        "rationale": "from typing import Optional\n\nclass OlympicGames:\n    def __init__(self, location: Optional[str] = None, medal_winner: Optional[str] = None):\n        self.location = location\n        self.medal_winner = medal_winner\n\ndef apply_premises(games: OlympicGames) -> bool:\n    changed = False\n\n    # Premise 1: The last summer Olympic games was in Tokyo.\n    if games.location is None:\n        games.location = \"Tokyo\"\n        changed = True\n\n    # Premise 2: The United States won the most medals in Tokyo.\n    if games.location == \"Tokyo\" and games.medal_winner is None:\n        games.medal_winner = \"The United States\"\n        changed = True\n\n    return changed\n\ndef run_inference(games: OlympicGames):\n    while apply_premises(games):\n        pass\n\ndef check_conclusion(games: OlympicGames) -> str:\n    run_inference(games)\n    # Conclusion: The United States won the most medals in the last summer Olympic games.\n    if games.medal_winner == \"The United States\":\n        return \"True\"\n    elif games.medal_winner is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    games = OlympicGames()\n    return check_conclusion(games)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The United States won the most medals in the last summer Olympic games?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThe summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. \n</premises>\n<conclusion>\nThe United States won the most medals in the last summer Olympic games.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The United States won the most medals in the last summer Olympic games.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "All horses have hooves.\nNo humans have hooves.",
        "conclusions": "Some humans are horses.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, is_human: Optional[bool] = None, has_hooves: Optional[bool] = None):\n        self.is_human = is_human\n        self.has_hooves = has_hooves\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All horses have hooves.\n    # This premise is about horses, but we do not have an instance of a horse to update.\n    # We only update the hooves of the animal.\n    if animal.has_hooves is None:\n        animal.has_hooves = True\n        changed = True\n\n    # Premise 2: No humans have hooves.\n    if animal.is_human is True and animal.has_hooves is True:\n        animal.has_hooves = False\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: Some humans are horses.\n    # We need to check if there is any human instance with is_human as True.\n    if animal.is_human is None or animal.is_human is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions: No information about humans or horses is given, so we assume an instance of a human.\n    animal = Animal(is_human=True)\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some humans are horses?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAll horses have hooves.\nNo humans have hooves.\n</premises>\n<conclusion>\nSome humans are horses.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Some humans are horses.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Susan flies to LGA airport.\nThe departure and arrival can not be at the same airport.\nJohn flies from LGA airport.",
        "conclusions": "Susan flies from LGA airport.",
        "rationale": "from typing import Optional\n\nclass Airport:\n    def __init__(self, name: str, departure: Optional[str] = None, arrival: Optional[str] = None):\n        self.name = name\n        self.departure = departure\n        self.arrival = arrival\n\nclass Person:\n    def __init__(self, name: str, flies_to: Optional[str] = None, flies_from: Optional[str] = None):\n        self.name = name\n        self.flies_to = flies_to\n        self.flies_from = flies_from\n\ndef apply_premises(person: Person, airport: Airport) -> bool:\n    changed = False\n\n    # Premise 1: Susan flies to LGA airport.\n    if person.name == \"Susan\":\n        if person.flies_to is None:\n            person.flies_to = \"LGA\"\n            changed = True\n\n    # Premise 2: The departure and arrival can not be at the same airport.\n    if person.flies_to == \"LGA\":\n        if airport.departure == \"LGA\":\n            airport.departure = None\n            changed = True\n        if airport.arrival == \"LGA\":\n            airport.arrival = None\n            changed = True\n\n    # Premise 3: John flies from LGA airport.\n    if person.name == \"John\":\n        if person.flies_from is None:\n            person.flies_from = \"LGA\"\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person, airport: Airport):\n    while apply_premises(person, airport):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person, airport)\n    if person.name == \"Susan\" and person.flies_from == \"LGA\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    airport = Airport(name=\"LGA\")\n    person = Person(name=\"Susan\", flies_to=None, flies_from=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Susan flies from LGA airport?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSusan flies to LGA airport.\nThe departure and arrival can not be at the same airport.\nJohn flies from LGA airport.\n</premises>\n<conclusion>\nSusan flies from LGA airport.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Susan flies from LGA airport.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Susan flies to LGA airport.\nThe departure and arrival can not be at the same airport.\nJohn flies from LGA airport.",
        "conclusions": "John flies to LGA airport.",
        "rationale": "from typing import Optional\n\nclass Airport:\n    def __init__(self, name: str):\n        self.name = name\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 flies_from: Optional[Airport] = None,\n                 flies_to: Optional[Airport] = None):\n        self.name = name\n        self.flies_from = flies_from\n        self.flies_to = flies_to\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Susan flies to LGA airport.\n    if person.name == \"Susan\":\n        if person.flies_to is None:\n            person.flies_to = Airport(\"LGA\")\n            changed = True\n\n    # Premise 2: The departure and arrival can not be at the same airport.\n    if person.flies_from is not None and person.flies_to is not None:\n        if person.flies_from.name == person.flies_to.name:\n            return False  # This would make the premises contradictory, so we return False.\n\n    # Premise 3: John flies from LGA airport.\n    if person.name == \"John\":\n        if person.flies_from is None:\n            person.flies_from = Airport(\"LGA\")\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"John\":\n        if person.flies_to is None:\n            return \"Uncertain\"\n        if person.flies_to.name == \"LGA\":\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"John\",\n        flies_from=None,\n        flies_to=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John flies to LGA airport?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSusan flies to LGA airport.\nThe departure and arrival can not be at the same airport.\nJohn flies from LGA airport.\n</premises>\n<conclusion>\nJohn flies to LGA airport.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? John flies to LGA airport.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.",
        "conclusions": "Tom is a grumpy person.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_nice_to_animals: Optional[bool] = None,\n                 is_mean_to_animals: Optional[bool] = None,\n                 is_grumpy: Optional[bool] = None,\n                 is_animal_lover: Optional[bool] = None,\n                 is_pet_owner: Optional[bool] = None):\n        self.is_nice_to_animals = is_nice_to_animals\n        self.is_mean_to_animals = is_mean_to_animals\n        self.is_grumpy = is_grumpy\n        self.is_animal_lover = is_animal_lover\n        self.is_pet_owner = is_pet_owner\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: No one nice to animals is also mean to animals.\n    # If person is nice to animals, then person is not mean to animals.\n    if person.is_nice_to_animals is True and person.is_mean_to_animals is not False:\n        person.is_mean_to_animals = False\n        changed = True\n\n    # Premise 2: Some grumpy people are mean to animals.\n    # This does not provide specific information about Tom.\n    # We cannot conclude that Tom is mean to animals from this.\n    # If person is grumpy and mean to animals, this is valid, but not conclusive.\n\n    # Premise 3: All animal lovers are nice to animals.\n    # If person is an animal lover, then person is nice to animals.\n    if person.is_animal_lover is True and person.is_nice_to_animals is not True:\n        person.is_nice_to_animals = True\n        changed = True\n\n    # Premise 4: All pet owners love animals.\n    # If person is a pet owner, then person is an animal lover.\n    if person.is_pet_owner is True and person.is_animal_lover is not True:\n        person.is_animal_lover = True\n        changed = True\n\n    # Premise 5: Tom is a pet owner.\n    # If person is Tom, then person is a pet owner.\n    if person.name == \"Tom\" and person.is_pet_owner is not True:\n        person.is_pet_owner = True\n        changed = True\n\n    # Update based on premises\n    if person.is_pet_owner is True:\n        person.is_animal_lover = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Tom\" and person.is_grumpy is True:\n        return \"True\"\n    elif person.name == \"Tom\" and person.is_grumpy is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Tom\",\n        is_nice_to_animals=None,\n        is_mean_to_animals=None,\n        is_grumpy=None,\n        is_animal_lover=None,\n        is_pet_owner=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is a grumpy person?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.\n</premises>\n<conclusion>\nTom is a grumpy person.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Tom is a grumpy person.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.",
        "conclusions": "Tom is not both a grumpy person and mean to animals.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, is_nice_to_animals: Optional[bool] = None, is_grumpy: Optional[bool] = None, is_mean_to_animals: Optional[bool] = None, is_animal_lover: Optional[bool] = None, is_pet_owner: Optional[bool] = None):\n        self.is_nice_to_animals = is_nice_to_animals\n        self.is_grumpy = is_grumpy\n        self.is_mean_to_animals = is_mean_to_animals\n        self.is_animal_lover = is_animal_lover\n        self.is_pet_owner = is_pet_owner\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: No one nice to animals is also mean to animals.\n    if person.is_nice_to_animals is not None and person.is_mean_to_animals is not None and person.is_nice_to_animals and person.is_mean_to_animals:\n        person.is_mean_to_animals = False\n        changed = True\n\n    # Premise 2: Some grumpy people are mean to animals.\n    # We cannot directly set is_mean_to_animals to True, only that it is possible.\n    if person.is_grumpy is True and person.is_mean_to_animals is None:\n        person.is_mean_to_animals = True\n        changed = True\n\n    # Premise 3: All animal lovers are nice to animals.\n    if person.is_animal_lover is True and person.is_nice_to_animals is None:\n        person.is_nice_to_animals = True\n        changed = True\n\n    # Premise 4: All pet owners love animals.\n    if person.is_pet_owner is True and person.is_animal_lover is None:\n        person.is_animal_lover = True\n        changed = True\n\n    # Premise 5: Tom is a pet owner.\n    if person.name == \"Tom\" and person.is_pet_owner is None:\n        person.is_pet_owner = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Tom is not both a grumpy person and mean to animals.\n    if person.is_grumpy is None or person.is_mean_to_animals is None:\n        return \"Uncertain\"\n    if person.is_grumpy and person.is_mean_to_animals:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    person = Person(\n        is_nice_to_animals=None,\n        is_grumpy=None,\n        is_mean_to_animals=None,\n        is_animal_lover=None,\n        is_pet_owner=None,\n        name=\"Tom\"\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is not both a grumpy person and mean to animals?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.\n</premises>\n<conclusion>\nTom is not both a grumpy person and mean to animals.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Tom is not both a grumpy person and mean to animals.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "No one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.",
        "conclusions": "If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_nice_to_animals: Optional[bool] = None,\n                 is_mean_to_animals: Optional[bool] = None,\n                 is_grumpy: Optional[bool] = None,\n                 is_animal_lover: Optional[bool] = None,\n                 is_pet_owner: Optional[bool] = None):\n        self.is_nice_to_animals = is_nice_to_animals\n        self.is_mean_to_animals = is_mean_to_animals\n        self.is_grumpy = is_grumpy\n        self.is_animal_lover = is_animal_lover\n        self.is_pet_owner = is_pet_owner\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: No one nice to animals is also mean to animals.\n    if person.is_nice_to_animals is True and person.is_mean_to_animals is not None:\n        person.is_mean_to_animals = False\n        changed = True\n\n    # Premise 2: Some grumpy people are mean to animals.\n    if person.is_grumpy is True and person.is_mean_to_animals is None:\n        person.is_mean_to_animals = True\n        changed = True\n\n    # Premise 3: All animal lovers are nice to animals.\n    if person.is_animal_lover is True and person.is_nice_to_animals is not True:\n        person.is_nice_to_animals = True\n        changed = True\n\n    # Premise 4: All pet owners love animals.\n    if person.is_pet_owner is True and person.is_animal_lover is not True:\n        person.is_animal_lover = True\n        changed = True\n\n    # Premise 5: Tom is a pet owner.\n    if person.name == \"Tom\" and person.is_pet_owner is None:\n        person.is_pet_owner = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.\n    if person.name == \"Tom\":\n        if not (person.is_grumpy and person.is_mean_to_animals):\n            if person.is_grumpy or person.is_animal_lover:\n                return \"False\"\n            else:\n                return \"True\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        is_nice_to_animals=None,\n        is_mean_to_animals=None,\n        is_grumpy=None,\n        is_animal_lover=None,\n        is_pet_owner=None,\n        name=\"Tom\"\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nNo one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.\n</premises>\n<conclusion>\nIf Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "A podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.",
        "conclusions": "Dani Shapiro is a novel writer.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, nationality: Optional[str] = None, occupation: Optional[str] = None):\n        self.name = name\n        self.nationality = nationality\n        self.occupation = occupation\n\nclass Book:\n    def __init__(self, title: str, author: str, is_novel: Optional[bool] = None, year: Optional[int] = None):\n        self.title = title\n        self.author = author\n        self.is_novel = is_novel\n        self.year = year\n\ndef apply_premises(person: Person, book: Book) -> bool:\n    changed = False\n\n    # Premise 1: A podcast is not a novel.\n    # This does not affect the person or the book.\n\n    # Premise 2: If a person is born in American City, the person is American.\n    if person.name == \"Dani Shapiro\" and person.nationality is None:\n        person.nationality = \"American\"\n        changed = True\n\n    # Premise 3: If a book is a novel and it is written by a person, then the person is a novel writer.\n    if book.title == \"Family History\" and book.is_novel is True and book.author == \"Dani Shapiro\" and person.occupation is None:\n        person.occupation = \"novel writer\"\n        changed = True\n\n    # Premise 4: Dani Shapiro is an American writer.\n    if person.name == \"Dani Shapiro\" and person.occupation is None:\n        person.occupation = \"writer\"\n        changed = True\n\n    # Premise 5: Family History is written by Dani Shapiro.\n    if book.title == \"Family History\" and book.author == \"Dani Shapiro\" and book.is_novel is None:\n        book.is_novel = True\n        changed = True\n\n    # Premise 6: Family History is a novel written in 2003.\n    if book.title == \"Family History\" and book.year is None:\n        book.year = 2003\n        changed = True\n\n    # Premise 7: Dani Shapiro created a podcast called Family Secrets.\n    # This does not affect the person or the book.\n\n    # Premise 8: Boston is an American city.\n    # This does not affect the person or the book.\n\n    return changed\n\ndef run_inference(person: Person, book: Book):\n    while apply_premises(person, book):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person, book)\n    if person.occupation == \"novel writer\":\n        return \"True\"\n    elif person.occupation is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(name=\"Dani Shapiro\", nationality=None, occupation=None)\n    book = Book(title=\"Family History\", author=\"Dani Shapiro\", is_novel=None, year=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dani Shapiro is a novel writer?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nA podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.\n</premises>\n<conclusion>\nDani Shapiro is a novel writer.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Dani Shapiro is a novel writer.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "A podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.",
        "conclusions": "Family Secrets is a novel.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, nationality: Optional[str] = None, occupation: Optional[str] = None):\n        self.name = name\n        self.nationality = nationality\n        self.occupation = occupation\n\nclass Book:\n    def __init__(self, title: str, author: str, is_novel: Optional[bool] = None, year: Optional[int] = None):\n        self.title = title\n        self.author = author\n        self.is_novel = is_novel\n        self.year = year\n\nclass Podcast:\n    def __init__(self, title: str, creator: str):\n        self.title = title\n        self.creator = creator\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: A podcast is not a novel.\n    # This does not affect the status of Family Secrets.\n\n    # Premise 2: If a person is born in American City, the person is American.\n    # No American cities are mentioned for Dani Shapiro, so no changes here.\n\n    # Premise 3: If a book is a novel and it is written by a person, then the person is a novel writer.\n    # Dani Shapiro is an American writer and Family History is a novel, so Dani Shapiro is a novel writer.\n    if \"Dani Shapiro\" not in [\"novel writer\"]:\n        changed = True\n        novel_writer = [\"Dani Shapiro\"]\n    \n    # Premise 4: Dani Shapiro is an American writer.\n    if \"Dani Shapiro\" not in [\"American writer\"]:\n        changed = True\n        american_writer = [\"Dani Shapiro\"]\n\n    # Premise 5: Family History is written by Dani Shapiro.\n    if \"Family History\" not in [\"written by Dani Shapiro\"]:\n        changed = True\n        written_by = [\"Family History\", \"Dani Shapiro\"]\n\n    # Premise 6: Family History is a novel written in 2003.\n    if \"Family History\" not in [\"novel\", 2003]:\n        changed = True\n        novel_status = [\"Family History\", \"novel\", 2003]\n\n    # Premise 7: Dani Shapiro created a podcast called Family Secrets.\n    if \"Family Secrets\" not in [\"podcast\", \"created by Dani Shapiro\"]:\n        changed = True\n        podcast_status = [\"Family Secrets\", \"podcast\", \"created by Dani Shapiro\"]\n\n    # Premise 8: Boston is an American city.\n    # This does not affect the status of Family Secrets.\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: Family Secrets is a novel.\n    if \"Family Secrets\" in [\"novel\"]:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(name=\"Dani Shapiro\", nationality=\"American\", occupation=\"writer\")\n    book = Book(title=\"Family History\", author=\"Dani Shapiro\", is_novel=None, year=2003)\n    podcast = Podcast(title=\"Family Secrets\", creator=\"Dani Shapiro\")\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Family Secrets is a novel?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nA podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.\n</premises>\n<conclusion>\nFamily Secrets is a novel.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Family Secrets is a novel.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "A podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.",
        "conclusions": "Dani Shapiro was born in Boston.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_american: Optional[bool] = None, city_of_birth: Optional[str] = None):\n        self.name = name\n        self.is_american = is_american\n        self.city_of_birth = city_of_birth\n\nclass Book:\n    def __init__(self, title: str, author: str, is_novel: bool, year: Optional[int] = None):\n        self.title = title\n        self.author = author\n        self.is_novel = is_novel\n        self.year = year\n\nclass Podcast:\n    def __init__(self, title: str, creator: str):\n        self.title = title\n        self.creator = creator\n\ndef apply_premises(person: Person, book: Book, podcast: Podcast) -> bool:\n    changed = False\n\n    # Premise 1: A podcast is not a novel.\n    # This premise does not affect person, book, or podcast objects.\n\n    # Premise 2: If a person is born in American City, the person is American.\n    if person.city_of_birth == \"American City\":\n        if person.is_american is None:\n            person.is_american = True\n            changed = True\n\n    # Premise 3: If a book is a novel and it is written by a person, then the person is a novel writer.\n    if book.is_novel and book.author == \"Dani Shapiro\":\n        if person.name == \"Dani Shapiro\" and person.is_novel_writer is None:\n            person.is_novel_writer = True\n            changed = True\n\n    # Premise 4: Dani Shapiro is an American writer.\n    if person.name == \"Dani Shapiro\":\n        if person.is_american is None:\n            person.is_american = True\n            changed = True\n\n    # Premise 5: Family History is written by Dani Shapiro.\n    if book.title == \"Family History\" and book.author == \"Dani Shapiro\":\n        if book.is_novel is None:\n            book.is_novel = True\n            changed = True\n\n    # Premise 6: Family History is a novel written in 2003.\n    if book.title == \"Family History\":\n        if book.year is None:\n            book.year = 2003\n            changed = True\n\n    # Premise 7: Dani Shapiro created a podcast called Family Secrets.\n    if podcast.title == \"Family Secrets\" and podcast.creator == \"Dani Shapiro\":\n        if person.name == \"Dani Shapiro\" and person.created_podcast is None:\n            person.created_podcast = True\n            changed = True\n\n    # Premise 8: Boston is an American city.\n    # This premise does not directly affect the inference but confirms Dani Shapiro can be American if born in Boston.\n\n    return changed\n\ndef run_inference(person: Person, book: Book, podcast: Podcast):\n    while apply_premises(person, book, podcast):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person, book, podcast)\n    if person.city_of_birth == \"Boston\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(name=\"Dani Shapiro\", is_american=None, city_of_birth=None)\n    book = Book(title=\"Family History\", author=\"Dani Shapiro\", is_novel=True, year=2003)\n    podcast = Podcast(title=\"Family Secrets\", creator=\"Dani Shapiro\")\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dani Shapiro was born in Boston?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nA podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.\n</premises>\n<conclusion>\nDani Shapiro was born in Boston.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Dani Shapiro was born in Boston.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "Yuri is an American national.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_american: Optional[bool] = None,\n                 can_jump_shots: Optional[bool] = None,\n                 leaps_straight_up: Optional[bool] = None,\n                 activates_leg_muscles: Optional[bool] = None):\n        self.is_american = is_american\n        self.can_jump_shots = can_jump_shots\n        self.leaps_straight_up = leaps_straight_up\n        self.activates_leg_muscles = activates_leg_muscles\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    # This premise does not provide enough information to update person.is_american.\n    \n    # Premise 2: All professional basketball players can do jump shots.\n    if person.can_jump_shots is None:\n        person.can_jump_shots = True\n        changed = True\n\n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    if person.can_jump_shots is True and person.leaps_straight_up is not True:\n        person.leaps_straight_up = True\n        changed = True\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    if person.leaps_straight_up is True and person.activates_leg_muscles is not True:\n        person.activates_leg_muscles = True\n        changed = True\n\n    # Premise 5: Yuri does not activate his leg muscles.\n    if person.name == \"Yuri\" and person.activates_leg_muscles is True:\n        person.activates_leg_muscles = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Yuri is an American national.\n    if person.is_american is None:\n        return \"Uncertain\"\n    elif person.is_american is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        is_american=None,\n        can_jump_shots=None,\n        leaps_straight_up=None,\n        activates_leg_muscles=None,\n        name=\"Yuri\"\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Yuri is an American national?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</premises>\n<conclusion>\nYuri is an American national.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Yuri is an American national.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "Yuri is not an American professional basketball player.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, is_american: Optional[bool] = None, can_jump_shots: Optional[bool] = None, activates_legs: Optional[bool] = None):\n        self.is_american = is_american\n        self.can_jump_shots = can_jump_shots\n        self.activates_legs = activates_legs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    # This does not give us any information about Yuri, so we cannot change his is_american status based on this.\n    \n    # Premise 2: All professional basketball players can do jump shots.\n    if person.can_jump_shots is None:\n        person.can_jump_shots = True\n        changed = True\n\n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    if person.can_jump_shots is True and person.leaps_air is None:\n        person.leaps_air = True\n        changed = True\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    if person.leaps_air is True and person.activates_legs is None:\n        person.activates_legs = True\n        changed = True\n\n    # Premise 5: Yuri does not activate his leg muscles.\n    if person.name == \"Yuri\" and person.activates_legs is None:\n        person.activates_legs = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Yuri\":\n        if person.is_american is None:\n            return \"Uncertain\"\n        if not person.is_american:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        is_american=None,\n        can_jump_shots=None,\n        activates_legs=None,\n        name=\"Yuri\"\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Yuri is not an American professional basketball player?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</premises>\n<conclusion>\nYuri is not an American professional basketball player.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Yuri is not an American professional basketball player.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "Yuri is an American professional basketball player.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_american: Optional[bool] = None,\n                 can_jump_shots: Optional[bool] = None,\n                 activates_leg_muscles: Optional[bool] = None):\n        self.is_american = is_american\n        self.can_jump_shots = can_jump_shots\n        self.activates_leg_muscles = activates_leg_muscles\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    if person.can_jump_shots is None:\n        person.can_jump_shots = True\n        changed = True\n\n    # Premise 2: All professional basketball players can do jump shots.\n    if person.is_american is None and person.can_jump_shots is True:\n        person.can_jump_shots = True\n        changed = True\n\n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    if person.can_jump_shots is True and person.activates_leg_muscles is None:\n        person.activates_leg_muscles = False\n        changed = True\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    if person.activates_leg_muscles is None and person.can_jump_shots is True:\n        person.activates_leg_muscles = False\n        changed = True\n\n    # Premise 5: Yuri does not activate his leg muscles.\n    if person.name == \"Yuri\" and person.activates_leg_muscles is None:\n        person.activates_leg_muscles = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Yuri\":\n        if person.is_american is None:\n            return \"Uncertain\"\n        elif person.is_american is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"Yuri\",\n        is_american=None,\n        can_jump_shots=None,\n        activates_leg_muscles=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Yuri is an American professional basketball player?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</premises>\n<conclusion>\nYuri is an American professional basketball player.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Yuri is an American professional basketball player.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_american: Optional[bool] = None,\n                 can_jump_shots: Optional[bool] = None,\n                 leaps_straight: Optional[bool] = None):\n        self.is_american = is_american\n        self.can_jump_shots = can_jump_shots\n        self.leaps_straight = leaps_straight\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    # This premise does not provide direct information about any specific individual.\n    # It only tells us that there is at least one professional basketball player who is not American.\n\n    # Premise 2: All professional basketball players can do jump shots.\n    if person.can_jump_shots is None:\n        person.can_jump_shots = True\n        changed = True\n\n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    if person.can_jump_shots is True and person.leaps_straight is not True:\n        person.leaps_straight = True\n        changed = True\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    if person.leaps_straight is True and person.leaps_straight is not True:\n        person.leaps_straight = True\n        changed = True\n\n    # Premise 5: Yuri does not activate his leg muscles.\n    if person.leaps_straight is None and person.leaps_straight is not True:\n        person.leaps_straight = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.\n    if person.leaps_straight is False:\n        if person.is_american is None or person.is_american is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        is_american=None,\n        can_jump_shots=None,\n        leaps_straight=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Yuri does not leap straight into the air, then Yuri is an American professional basketball player?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</premises>\n<conclusion>\nIf Yuri does not leap straight into the air, then Yuri is an American professional basketball player.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_american: Optional[bool] = None,\n                 is_professional_basketball_player: Optional[bool] = None,\n                 activates_leg muscles: Optional[bool] = None):\n        self.is_american = is_american\n        self.is_professional_basketball_player = is_professional_basketball_player\n        self.activates_leg_muscles = activates_leg_muscles\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    if person.is_professional_basketball_player is True and person.is_american is None:\n        person.is_american = False\n        changed = True\n\n    # Premise 2: All professional basketball players can do jump shots.\n    if person.is_professional_basketball_player is True and person.can_jump_shots is None:\n        person.can_jump_shots = True\n        changed = True\n\n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    if person.can_jump_shots is True and person.leaps_straight_into_air is None:\n        person.leaps_straight_into_air = True\n        changed = True\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    if person.leaps_straight_into_air is True and person.activates_leg_muscles is None:\n        person.activates_leg_muscles = True\n        changed = True\n\n    # Premise 5: Yuri does not activate his leg muscles.\n    if person.name == \"Yuri\" and person.activates_leg_muscles is None:\n        person.activates_leg_muscles = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Yuri\" and person.is_american is not None and person.is_professional_basketball_player is not None:\n        if not person.is_american and person.is_professional_basketball_player:\n            return \"True\"\n        elif not person.is_american and not person.is_professional_basketball_player:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        is_american=None,\n        is_professional_basketball_player=None,\n        activates_leg_muscles=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Yuri is not an American professional basketball player, then Yuri is a professional basketball player?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</premises>\n<conclusion>\nIf Yuri is not an American professional basketball player, then Yuri is a professional basketball player.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Events are either happy or sad.\nAt least one event is happy. ",
        "conclusions": "All events are sad.",
        "rationale": "from typing import Optional\n\nclass Event:\n    def __init__(self, is_happy: Optional[bool] = None, is_sad: Optional[bool] = None):\n        self.is_happy = is_happy\n        self.is_sad = is_sad\n\ndef apply_premises(event: Event) -> bool:\n    changed = False\n\n    # Premise 1: Events are either happy or sad.\n    if event.is_happy is None and event.is_sad is None:\n        event.is_happy = True\n        event.is_sad = False\n        changed = True\n\n    # Premise 2: At least one event is happy.\n    # This means that it is not the case that all events are sad.\n    if event.is_happy is not True:\n        event.is_happy = True\n        event.is_sad = False\n        changed = True\n\n    return changed\n\ndef run_inference(event: Event):\n    while apply_premises(event):\n        pass\n\ndef check_conclusion(event: Event) -> str:\n    run_inference(event)\n    if event.is_sad is True:\n        return \"True\"\n    elif event.is_sad is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    event = Event()\n    return check_conclusion(event)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: All events are sad?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nEvents are either happy or sad.\nAt least one event is happy. \n</premises>\n<conclusion>\nAll events are sad.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? All events are sad.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "The winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nOne six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
        "conclusions": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self, name: str, is_winner: Optional[bool] = None, is_tie_member: Optional[bool] = None, is_from_belgium: Optional[bool] = None):\n        self.name = name\n        self.is_winner = is_winner\n        self.is_tie_member = is_tie_member\n        self.is_from_belgium = is_from_belgium\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: The winner of the 1992 du Maurier Classic was Steinhauer.\n    if player.name == \"Steinhauer\":\n        if player.is_winner is None:\n            player.is_winner = True\n            changed = True\n\n    # Premise 2: Steinhauer participated in the 1992 du Maurier Classic.\n    if player.name == \"Steinhauer\":\n        if player.is_winner is True:\n            player.is_winner = None\n            changed = True\n\n    # Premise 3: One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\n    # Premise 4: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n    if player.name == \"Descampe\":\n        if player.is_from_belgium is None:\n            player.is_from_belgium = True\n            changed = True\n        if player.is_tie_member is None:\n            player.is_tie_member = True\n            changed = True\n\n    # Premise 5: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n    if player.is_tie_member is True or player.is_winner is True:\n        if player.is_winner is None:\n            player.is_winner = False\n            changed = True\n        if player.is_tie_member is None:\n            player.is_tie_member = False\n            changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.is_winner is True:\n        return \"False\"\n    elif player.is_winner is False:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(name=\"Steinhauer\")\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Steinhauer was not the winner of the 1992 du Maurier Classic?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nOne six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n</premises>\n<conclusion>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Steinhauer was not the winner of the 1992 du Maurier Classic.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "The winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nOne six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
        "conclusions": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self, name: str, is_from_belgium: Optional[bool] = None, participated: Optional[bool] = None, is_winner: Optional[bool] = None, is_in_tie: Optional[bool] = None):\n        self.name = name\n        self.is_from_belgium = is_from_belgium\n        self.participated = participated\n        self.is_winner = is_winner\n        self.is_in_tie = is_in_tie\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: The winner of the 1992 du Maurier Classic was Steinhauer.\n    if player.name == \"Steinhauer\":\n        if player.is_winner is None:\n            player.is_winner = True\n            changed = True\n\n    # Premise 2: Steinhauer participated in the 1992 du Maurier Classic.\n    if player.name == \"Steinhauer\":\n        if player.participated is None:\n            player.participated = True\n            changed = True\n\n    # Premise 3: One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\n    if player.is_from_belgium is None and player.name != \"Steinhauer\":\n        player.is_from_belgium = False\n        changed = True\n\n    # Premise 4: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n    if player.name == \"Descampe\":\n        if player.is_from_belgium is None:\n            player.is_from_belgium = True\n            changed = True\n        if player.participated is None:\n            player.participated = True\n            changed = True\n\n    # Premise 5: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n    if player.participated is None:\n        player.participated = True\n        changed = True\n\n    # Conclusion: One person in the six-way tie was from Belgium.\n    if player.is_from_belgium is True and player.is_in_tie is None:\n        player.is_in_tie = True\n        changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.name == \"Descampe\":\n        if player.is_in_tie is True:\n            return \"True\"\n        elif player.is_in_tie is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(\n        name=\"Descampe\",\n        is_from_belgium=None,\n        participated=None,\n        is_winner=None,\n        is_in_tie=None\n    )\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nOne six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n</premises>\n<conclusion>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Jane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
        "conclusions": "KiKi is terricolous.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 barks: Optional[bool] = None,\n                 jumps: Optional[bool] = None,\n                 has_legs: Optional[bool] = None,\n                 is_terricolous: Optional[bool] = None):\n        self.barks = barks\n        self.jumps = jumps\n        self.has_legs = has_legs\n        self.is_terricolous = is_terricolous\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Jane does not like any animals that bark.\n    # Premise 2: All dogs are animals that bark.\n    if animal.barks is None and animal.is_dog is not False:\n        animal.barks = True\n        changed = True\n\n    # Premise 3: Jane likes all animals that jump.\n    if animal.jumps is None and animal.is_jumping is not False:\n        animal.jumps = True\n        changed = True\n\n    # Premise 4: If an animal has legs, then it jumps.\n    if animal.has_legs is True and animal.jumps is not True:\n        animal.jumps = True\n        changed = True\n\n    # Premise 5: If an animal is terricolous, then it has legs.\n    if animal.is_terricolous is True and animal.has_legs is not True:\n        animal.has_legs = True\n        changed = True\n\n    # Premise 6: KiKi is an animal.\n    if animal.name == \"KiKi\":\n        if animal.barks is None:\n            animal.barks = False\n            changed = True\n        if animal.jumps is None:\n            animal.jumps = True\n            changed = True\n        if animal.has_legs is None:\n            animal.has_legs = True\n            changed = True\n        if animal.is_terricolous is None:\n            animal.is_terricolous = False\n            changed = True\n\n    # Premise 7: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n    if animal.name == \"KiKi\" and animal.jumps is False and animal.has_legs is False:\n        if animal.is_terricolous is False and animal.has_legs is False:\n            animal.is_terricolous = True\n            changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    if animal.name == \"KiKi\" and animal.is_terricolous is True:\n        return \"True\"\n    elif animal.name == \"KiKi\" and animal.is_terricolous is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    animal = Animal(\n        name=\"KiKi\",\n        barks=None,\n        jumps=None,\n        has_legs=None,\n        is_terricolous=None\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KiKi is terricolous?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nJane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n</premises>\n<conclusion>\nKiKi is terricolous.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? KiKi is terricolous.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Jane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
        "conclusions": "KiKi is a barking dog.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 name: str,\n                 is_barking: Optional[bool] = None,\n                 is_dog: Optional[bool] = None,\n                 is_jumping: Optional[bool] = None,\n                 has_legs: Optional[bool] = None,\n                 is_terricolous: Optional[bool] = None):\n        self.name = name\n        self.is_barking = is_barking\n        self.is_dog = is_dog\n        self.is_jumping = is_jumping\n        self.has_legs = has_legs\n        self.is_terricolous = is_terricolous\n\ndef apply_premises(ani: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Jane does not like any animals that bark.\n    if ani.is_barking is None:\n        ani.is_barking = False\n        changed = True\n\n    # Premise 2: All dogs are animals that bark.\n    if ani.is_dog is True and ani.is_barking is not True:\n        ani.is_barking = True\n        changed = True\n\n    # Premise 3: Jane likes all animals that jump.\n    if ani.is_jumping is None:\n        ani.is_jumping = True\n        changed = True\n\n    # Premise 4: If an animal has legs, then it jumps.\n    if ani.has_legs is True and ani.is_jumping is not True:\n        ani.is_jumping = True\n        changed = True\n\n    # Premise 5: If an animal is terricolous, then it has legs.\n    if ani.is_terricolous is True and ani.has_legs is not True:\n        ani.has_legs = True\n        changed = True\n\n    # Premise 6: KiKi is an animal.\n    if ani.name == \"KiKi\" and ani.is_barking is None:\n        ani.is_barking = False\n        changed = True\n\n    # Premise 7: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n    if ani.name == \"KiKi\" and ani.is_jumping is False and ani.has_legs is False:\n        if ani.is_terricolous is None:\n            ani.is_terricolous = True\n            changed = True\n        if ani.has_legs is None:\n            ani.has_legs = True\n            changed = True\n\n    return changed\n\ndef run_inference(ani: Animal):\n    while apply_premises(ani):\n        pass\n\ndef check_conclusion(ani: Animal) -> str:\n    run_inference(ani)\n    if ani.name == \"KiKi\" and ani.is_barking is True and ani.is_dog is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    ani = Animal(\n        name=\"KiKi\",\n        is_barking=None,\n        is_dog=None,\n        is_jumping=None,\n        has_legs=None,\n        is_terricolous=None\n    )\n    return check_conclusion(ani)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KiKi is a barking dog?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nJane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n</premises>\n<conclusion>\nKiKi is a barking dog.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? KiKi is a barking dog.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Jane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
        "conclusions": "KiKi does not bark and he is not a dog.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 name: str,\n                 barks: Optional[bool] = None,\n                 is_dog: Optional[bool] = None,\n                 jumps: Optional[bool] = None,\n                 has_legs: Optional[bool] = None,\n                 is_terricolous: Optional[bool] = None):\n        self.name = name\n        self.barks = barks\n        self.is_dog = is_dog\n        self.jumps = jumps\n        self.has_legs = has_legs\n        self.is_terricolous = is_terricolous\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Jane does not like any animals that bark.\n    # This premise does not directly affect the animal object but informs us about Jane's preferences.\n    \n    # Premise 2: All dogs are animals that bark.\n    if animal.is_dog is True:\n        if animal.barks is None:\n            animal.barks = True\n            changed = True\n\n    # Premise 3: Jane likes all animals that jump.\n    # This premise does not directly affect the animal object but informs us about Jane's preferences.\n    \n    # Premise 4: If an animal has legs, then it jumps.\n    if animal.has_legs is True and animal.jumps is not True:\n        animal.jumps = True\n        changed = True\n\n    # Premise 5: If an animal is terricolous, then it has legs.\n    if animal.is_terricolous is True and animal.has_legs is not True:\n        animal.has_legs = True\n        changed = True\n\n    # Premise 6: KiKi is an animal.\n    # This premise does not directly affect the animal object but informs us that KiKi is an animal.\n\n    # Premise 7: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n    if (animal.jumps is False and animal.has_legs is False) and (animal.is_terricolous is None or animal.has_legs is None):\n        animal.is_terricolous = True\n        animal.has_legs = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: KiKi does not bark and he is not a dog.\n    if animal.barks is None or animal.is_dog is None:\n        return \"Uncertain\"\n    if not animal.barks and not animal.is_dog:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    animal = Animal(\n        name=\"KiKi\",\n        barks=None,\n        is_dog=None,\n        jumps=None,\n        has_legs=None,\n        is_terricolous=None\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KiKi does not bark and he is not a dog?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nJane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n</premises>\n<conclusion>\nKiKi does not bark and he is not a dog.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? KiKi does not bark and he is not a dog.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "No one playing for Nautico is Brazilian.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self,\n                 name: str,\n                 is_brazilian: Optional[bool] = None,\n                 club: Optional[str] = None):\n        self.name = name\n        self.is_brazilian = is_brazilian\n        self.club = club\n\nclass Club:\n    def __init__(self, name: str, players: list = []):\n        self.name = name\n        self.players = players\n\ndef apply_premises() -> bool:\n    premises_applied = False\n    \n    # Ailton Silva, born in 1995, is commonly known as Ailton.\n    ailton = Player(name=\"Ailton Silva\", is_brazilian=True, club=None)\n    premises_applied = True\n    \n    # Ailton is a football player who was loaned out to Braga.\n    ailton.club = \"Braga\"\n    premises_applied = True\n    \n    # Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.\n    ailton.is_brazilian = True\n    ailton.club = \"N\u00e1utico\"\n    premises_applied = True\n    \n    # N\u00e1utico is a football club along with Braga.\n    nautico = Club(name=\"N\u00e1utico\", players=[ilton])\n    braga = Club(name=\"Braga\", players=[])\n    premises_applied = True\n    \n    # Fluminense is a football club.\n    fluminense = Club(name=\"Fluminense\", players=[])\n    premises_applied = True\n    \n    return premises_applied\n\ndef run_inference():\n    apply_premises()\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: No one playing for N\u00e1utico is Brazilian.\n    for player in nautico.players:\n        if player.is_brazilian is True:\n            return \"False\"\n    return \"True\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No one playing for N\u00e1utico is Brazilian?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</premises>\n<conclusion>\nNo one playing for Nautico is Brazilian.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? No one playing for Nautico is Brazilian.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "Ailton Silva does not play for a football club.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_football_player: Optional[bool] = None, plays_for: Optional[str] = None):\n        self.name = name\n        self.is_football_player = is_football_player\n        self.plays_for = plays_for\n\nclass Club:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises(person: Person, clubs: list[Club]) -> bool:\n    changed = False\n\n    # Premise 1: Ailton Silva, born in 1995, is commonly known as Ailton.\n    if person.name == \"Ailton Silva\":\n        person.name = \"Ailton\"\n        changed = True\n\n    # Premise 2: Ailton is a football player who was loaned out to Braga.\n    if person.name == \"Ailton\":\n        if person.is_football_player is None:\n            person.is_football_player = True\n            changed = True\n        if person.plays_for is None:\n            person.plays_for = \"Braga\"\n            changed = True\n\n    # Premise 3: Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.\n    if person.name == \"Ailton\":\n        if person.is_football_player is None:\n            person.is_football_player = True\n            changed = True\n        if person.plays_for is None:\n            person.plays_for = \"N\u00e1utico\"\n            changed = True\n\n    # Premise 4: N\u00e1utico is a football club along with Braga.\n    # This premise does not change the state of the problem.\n    # Premise 5: Fluminense is a football club.\n    # This premise does not change the state of the problem.\n\n    return changed\n\ndef run_inference(person: Person, clubs: list[Club]):\n    while apply_premises(person, clubs):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person, clubs)\n    # Conclusion: Ailton Silva does not play for a football club.\n    if person.is_football_player is True:\n        return \"False\"\n    elif person.is_football_player is False:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(name=\"Ailton Silva\", is_football_player=None, plays_for=None)\n    clubs = [Club(name=\"Braga\"), Club(name=\"N\u00e1utico\")]\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ailton Silva does not play for a football club?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</premises>\n<conclusion>\nAilton Silva does not play for a football club.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Ailton Silva does not play for a football club.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "Ailton was not loaned out to a football club.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 birth_year: Optional[int] = None,\n                 is_loan_player: Optional[bool] = None,\n                 club: Optional[str] = None):\n        self.name = name\n        self.birth_year = birth_year\n        self.is_loan_player = is_loan_player\n        self.club = club\n\nclass Club:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Ailton Silva, born in 1995, is commonly known as Ailton.\n    if person.name == \"Ailton\":\n        if person.birth_year is None:\n            person.birth_year = 1995\n            changed = True\n\n    # Premise 2: Ailton is a football player who was loaned out to Braga.\n    if person.name == \"Ailton\":\n        if person.is_loan_player is None:\n            person.is_loan_player = True\n            changed = True\n        if person.club is None:\n            person.club = Club(\"Braga\")\n            changed = True\n\n    # Premise 3: Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.\n    if person.name == \"Ailton\":\n        if person.club is None:\n            person.club = Club(\"N\u00e1utico\")\n            changed = True\n        if person.club.name != \"N\u00e1utico\":\n            person.club = Club(\"N\u00e1utico\")\n            changed = True\n\n    # Premise 4: N\u00e1utico is a football club along with Braga.\n    if person.club is not None and person.club.name in [\"N\u00e1utico\", \"Braga\"]:\n        if person.club.name == \"N\u00e1utico\":\n            person.club = Club(\"N\u00e1utico\")\n        elif person.club.name == \"Braga\":\n            person.club = Club(\"Braga\")\n        changed = True\n\n    # Premise 5: Fluminense is a football club.\n    # No update is made as it does not affect Ailton's loan status.\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.is_loan_player is None:\n        return \"Uncertain\"\n    if person.is_loan_player is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    person = Person(\n        name=\"Ailton\",\n        birth_year=None,\n        is_loan_player=None,\n        club=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ailton was not loaned out to a football club?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</premises>\n<conclusion>\nAilton was not loaned out to a football club.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Ailton was not loaned out to a football club.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "Ailton Silva played for Fluminense.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 birth_year: Optional[int] = None,\n                 is_footballer: Optional[bool] = None,\n                 played_for: Optional[list] = None):\n        self.name = name\n        self.birth_year = birth_year\n        self.is_footballer = is_footballer\n        self.played_for = played_for if played_for is not None else []\n\nclass Club:\n    def __init__(self, name: str):\n        self.name = name\n\nclass Loan:\n    def __init__(self, player: Person, club: Club):\n        self.player = player\n        self.club = club\n\nclass Transfer:\n    def __init__(self, player: Person, club: Club):\n        self.player = player\n        self.club = club\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Ailton Silva, born in 1995, is commonly known as Ailton.\n    ailton = Person(name=\"Ailton\", birth_year=1995)\n    if ailton.name is None:\n        ailton.name = \"Ailton Silva\"\n        changed = True\n\n    # Premise 2: Ailton is a football player who was loaned out to Braga.\n    braga = Club(\"Braga\")\n    loan = Loan(player=ailton, club=braga)\n    ailton.played_for.append(braga)\n    changed = True\n\n    # Premise 3: Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.\n    nautico = Club(\"N\u00e1utico\")\n    transfer = Transfer(player=ailton, club=nautico)\n    ailton.played_for.append(nautico)\n    changed = True\n\n    # Premise 4: N\u00e1utico is a football club along with Braga.\n    assert nautico.name in [braga.name, \"N\u00e1utico\"]\n    assert braga.name in [nautico.name, \"Braga\"]\n\n    # Premise 5: Fluminense is a football club.\n    fluminense = Club(\"Fluminense\")\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    if \"Fluminense\" in [club.name for club in ailton.played_for]:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ailton Silva played for Fluminense?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</premises>\n<conclusion>\nAilton Silva played for Fluminense.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Ailton Silva played for Fluminense.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "Ailton Silva was loaned out to a football club.",
        "rationale": "from typing import Optional\n\nclass Footballer:\n    def __init__(self, name: str, birth_year: Optional[int] = None, clubs: Optional[list] = None):\n        self.name = name\n        self.birth_year = birth_year\n        self.clubs = clubs if clubs is not None else []\n\nclass Club:\n    def __init__(self, name: str, loans: Optional[list] = None):\n        self.name = name\n        self.loans = loans if loans is not None else []\n\ndef apply_premises():\n    ailton = Footballer(name=\"Ailton\", birth_year=1995)\n    braga = Club(name=\"Braga\")\n    nautico = Club(name=\"N\u00e1utico\")\n\n    # Ailton is a football player who was loaned out to Braga.\n    braga.loans.append(ilton)\n\n    # Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.\n    nautico.clubs.append(ilton)\n\n    # N\u00e1utico is a football club along with Braga.\n    # Fluminense is a football club.\n    return ailton, braga, nautico\n\ndef check_loan(ilton: Footballer, braga: Club, nautico: Club) -> str:\n    # Check if Ailton was loaned out to Braga or N\u00e1utico.\n    if braga.loans and braga.loans[0] is ilton:\n        return \"True\"\n    if nautico.clubs and nautico.clubs[0] is ilton:\n        return \"True\"\n    return \"False\"\n\nilton, braga, nautico = apply_premises()\nresult = check_loan(ilton, braga, nautico)\nprint(\"Conclusion: Ailton Silva was loaned out to a football club?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer></answer>",
        "label": "Uncertain",
        "predict": "True",
        "user_prompt": [
            {
                "role": "system",
                "content": "You are a rigorous and logically precise AI assistant. Your task is to answer a logical reasoning problem strictly following one of three modes, as explicitly specified in the input. Only one mode will be present in the input. Follow that mode exclusively.\n\n- Code Mode (`<code> ... <end_of_code> <answer> ... <end_of_answer>`)  \n  - If the input contains `<code>`, translate the problem into Python code.  \n  - Execute the logic and derive the answer.  \n\n- Natural Language Chain-of-Thought Mode (`<nl_cot> ... <end_of_nl_cot> <answer> ... <end_of_answer>`)  \n  - If the input contains `<nl_cot>`, solve the problem step by step in natural language.  \n\n- Truth Table Mode (`<truth_table> ... <end_of_truth_table> <answer> ... <end_of_answer>`)  \n  - If the input contains `<truth_table>`, construct a truth table and derive the answer from it.  \n\n### Rules  \n- Only use the mode specified in the input. Do not switch modes.  \n- Generate output strictly in the specified mode and format, with no additional text.  \n- Enclose all reasoning strictly within the corresponding mode tags.  \n- The final answer must be strictly enclosed in `<answer> ... <end_of_answer>`.  \n- If no valid mode is detected, return: `<error> Mode not specified. </error>` Do not attempt to infer one.  \n- Do not provide any reasoning or explanations outside of the designated mode tags.  \n"
            },
            {
                "role": "user",
                "content": "Below are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</premises>\n<conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? If Thor is happy, then Peter Parker wears a uniform.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n<end_of_code>\n<answer>\nThe final answer is (A).\n<end_of_answer>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</premises>\n<conclusion>\nThe theistic God is a sophist and a philosopher.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? The theistic God is a sophist and a philosopher.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n<end_of_code>\n<answer>\nThe final answer is (B).\n<end_of_answer>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</premises>\n<conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? William Dickinson went to schools located in the United Kingdom for both high school and university.\n</question> \n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n<end_of_code>\n<answer>\nThe final answer is (C).\n<end_of_answer>\n</EXAMPLE 3>\n\n\nThe following is the problem you need to solve.\n\n<premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</premises>\n<conclusion>\nAilton Silva was loaned out to a football club.\n</conclusion>\n<question>\nIs the following statement true, false, or uncertain? Ailton Silva was loaned out to a football club.\n</question>\n<options>\n(A) True\n(B) False\n(C) Uncertain\n</options>\n<code>"
            }
        ]
    }
]