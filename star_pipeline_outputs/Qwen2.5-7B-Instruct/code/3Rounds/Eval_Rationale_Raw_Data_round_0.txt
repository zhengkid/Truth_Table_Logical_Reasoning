[
    {
        "premises": "People in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.",
        "conclusions": "Bonnie performs in school talent shows often.",
        "rationale": "```python\nfrom typing import Optional\n\nclass ClubMember:\n    def __init__(self,\n                 attends_events: Optional[bool] = None,\n                 is_student: Optional[bool] = None,\n                 performs_talent_shows: Optional[bool] = None,\n                 is_inactive: Optional[bool] = None,\n                 chaperones_dances: Optional[bool] = None,\n                 wishes_academic_career: Optional[bool] = None):\n        self.attends_events = attends_events\n        self.is_student = is_student\n        self.performs_talent_shows = performs_talent_shows\n        self.is_inactive = is_inactive\n        self.chaperones_dances = chaperones_dances\n        self.wishes_academic_career = wishes_academic_career\n\ndef apply_premises(member: ClubMember) -> bool:\n    changed = False\n\n    # Premise 1: People in this club who perform in school talent shows often attend and are very engaged with school events.\n    if member.performs_talent_shows is None:\n        if member.attends_events is True and member.is_student is True:\n            member.performs_talent_shows = True\n            changed = True\n        elif member.attends_events is False or member.is_student is False:\n            member.performs_talent_shows = False\n            changed = True\n\n    # Premise 2: People in this club either perform in school talent shows often or are inactive and disinterested community members.\n    if member.performs_talent_shows is None:\n        if member.is_inactive is True:\n            member.performs_talent_shows = False\n            changed = True\n\n    # Premise 3: People in this club who chaperone high school dances are not students who attend the school.\n    if member.chaperones_dances is True:\n        if member.is_student is True:\n            member.is_student = False\n            changed = True\n\n    # Premise 4: All people in this club who are inactive and disinterested members of their community chaperone high school dances.\n    if member.is_inactive is True:\n        if member.chaperones_dances is None:\n            member.chaperones_dances = True\n            changed = True\n\n    # Premise 5: All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\n    if member.wishes_academic_career is True:\n        if member.is_student is None:\n            member.is_student = True\n            changed = True\n\n    # Premise 6: Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n    if member.name == \"Bonnie\":\n        if member.attends_events is not None and member.is_student is not None:\n            if (member.attends_events and member.is_student) or (not member.attends_events and not member.is_student):\n                member.performs_talent_shows = True\n                changed = True\n\n    return changed\n\ndef run_inference(member: ClubMember):\n    while apply_premises(member):\n        pass\n\ndef check_conclusion(member: ClubMember) -> str:\n    run_inference(member)\n    if member.name == \"Bonnie\" and member.performs_talent_shows is True:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    member = ClubMember(\n        name=\"Bonnie\",\n        attends_events=None,\n        is_student=None,\n        performs_talent_shows=None,\n        is_inactive=None,\n        chaperones_dances=None,\n        wishes_academic_career=None\n    )\n    return check_conclusion(member)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Bonnie performs in school talent shows often?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPeople in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n</Premises>\n<Conclusion>\nBonnie performs in school talent shows often.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Bonnie performs in school talent shows often.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "People in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.",
        "conclusions": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.",
        "rationale": "```python\nfrom typing import Optional\n\nclass ClubMember:\n    def __init__(self,\n                 is_student: Optional[bool] = None,\n                 attends_events: Optional[bool] = None,\n                 chaperones_dances: Optional[bool] = None,\n                 is_young_child_or_teen: Optional[bool] = None,\n                 wishes_to_further_education: Optional[bool] = None):\n        self.is_student = is_student\n        self.attends_events = attends_events\n        self.chaperones_dances = chaperones_dances\n        self.is_young_child_or_teen = is_young_child_or_teen\n        self.wishes_to_further_education = wishes_to_further_education\n\ndef apply_premises(member: ClubMember) -> bool:\n    changed = False\n\n    # Premise 1: People in this club who perform in school talent shows often attend and are very engaged with school events.\n    # Since performing in talent shows is either attending and being engaged or being inactive, we can infer this.\n    if (member.attends_events is None and member.chaperones_dances is False) or (member.attends_events is False and member.chaperones_dances is None):\n        member.attends_events = True\n        changed = True\n\n    # Premise 2: People in this club either perform in school talent shows often or are inactive and disinterested community members.\n    if (member.attends_events is None and member.chaperones_dances is None):\n        member.chaperones_dances = True\n        changed = True\n\n    # Premise 3: People in this club who chaperone high school dances are not students who attend the school.\n    if member.chaperones_dances is True and member.is_student is not False:\n        member.is_student = False\n        changed = True\n\n    # Premise 4: All people in this club who are inactive and disinterested members of their community chaperone high school dances.\n    if member.chaperones_dances is None and member.is_student is False:\n        member.chaperones_dances = True\n        changed = True\n\n    # Premise 5: All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\n    if (member.is_young_child_or_teen is True and member.wishes_to_further_education is True and member.is_student is not True):\n        member.is_student = True\n        changed = True\n\n    # Premise 6: Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n    if member.name == \"Bonnie\":\n        if (member.attends_events is True and member.is_student is True) or (member.attends_events is False and member.is_student is False):\n            changed = True\n\n    return changed\n\ndef run_inference(member: ClubMember):\n    while apply_premises(member):\n        pass\n\ndef check_conclusion(member: ClubMember) -> str:\n    run_inference(member)\n    # Conclusion: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n    if (member.is_young_child_or_teen is True and member.wishes_to_further_education is True and member.chaperones_dances is True and member.is_student is not True) or (member.is_young_child_or_teen is False and member.wishes_to_further_education is False and member.is_student is None and member.chaperones_dances is None):\n        return \"Uncertain\"\n    if (member.is_student is True or member.chaperones_dances is True):\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions:\n    # Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n    # Here we assume initially she is not a student (is_student = False) and does not attend events (attends_events = False) for determinism.\n    member = ClubMember(\n        is_student=False,\n        attends_events=False,\n        chaperones_dances=None,\n        is_young_child_or_teen=None,\n        wishes_to_further_education=None\n    )\n    return check_conclusion(member)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPeople in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n</Premises>\n<Conclusion>\nIf Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "People in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.",
        "conclusions": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 attends_school_events: Optional[bool] = None,\n                 is_student: Optional[bool] = None,\n                 chaperones_dances: Optional[bool] = None,\n                 performs_talent_shows: Optional[bool] = None,\n                 is_young_child_or_teens: Optional[bool] = None,\n                 wishes_academic_opportunities: Optional[bool] = None,\n                 is_inactive_disinterested: Optional[bool] = None):\n        self.attends_school_events = attends_school_events\n        self.is_student = is_student\n        self.chaperones_dances = chaperones_dances\n        self.performs_talent_shows = performs_talent_shows\n        self.is_young_child_or_teens = is_young_child_or_teens\n        self.wishes_academic_opportunities = wishes_academic_opportunities\n        self.is_inactive_disinterested = is_inactive_disinterested\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: People in this club who perform in school talent shows often attend and are very engaged with school events.\n    if person.chaperones_dances is None and person.perform_talent_shows is None:\n        person.perform_talent_shows = True\n        person.attends_school_events = True\n        changed = True\n\n    # Premise 2: People in this club either perform in school talent shows often or are inactive and disinterested community members.\n    if person.perform_talent_shows is None and person.is_inactive_disinterested is None:\n        person.is_inactive_disinterested = True\n        changed = True\n\n    # Premise 3: People in this club who chaperone high school dances are not students who attend the school.\n    if person.chaperones_dances is True and person.is_student is None:\n        person.is_student = False\n        changed = True\n\n    # Premise 4: All people in this club who are inactive and disinterested members of their community chaperone high school dances.\n    if person.is_inactive_disinterested is True and person.chaperones_dances is None:\n        person.chaperones_dances = True\n        changed = True\n\n    # Premise 5: All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\n    if person.is_young_child_or_teens is True and person.wishes_academic_opportunities is True and person.is_student is None:\n        person.is_student = True\n        changed = True\n\n    # Premise 6: Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n    if person.name == \"Bonnie\":\n        if person.attends_school_events is None and person.is_student is None:\n            person.attends_school_events = True\n            person.is_student = True\n            changed = True\n        elif person.attends_school_events is False and person.is_student is False:\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Bonnie\":\n        if person.chaperones_dances is None and person.perform_talent_shows is None:\n            if person.is_young_child_or_teens is True and person.wishes_academic_opportunities is True and person.is_inactive_disinterested is True:\n                return \"True\"\n            else:\n                return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    bonnie = Person(\n        name=\"Bonnie\",\n        attends_school_events=None,\n        is_student=None,\n        chaperones_dances=None,\n        performs_talent_shows=None,\n        is_young_child_or_teens=None,\n        wishes_academic_opportunities=None,\n        is_inactive_disinterested=None\n    )\n    return check_conclusion(bonnie)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community?\", result)",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPeople in this club who perform in school talent shows often attend and are very engaged with school events.\nPeople in this club either perform in school talent shows often or are inactive and disinterested community members.\nPeople in this club who chaperone high school dances are not students who attend the school.\nAll people in this club who are inactive and disinterested members of their community chaperone high school dances.\nAll young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. \nBonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n</Premises>\n<Conclusion>\nIf Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.",
        "conclusions": "James has lunch in the company.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Employee:\n    def __init__(self,\n                 is_manager: Optional[bool] = None,\n                 is_remote: Optional[bool] = None,\n                 lunch_location: Optional[str] = None):\n        self.is_manager = is_manager\n        self.is_remote = is_remote\n        self.lunch_location = lunch_location\n\ndef apply_premises(employee: Employee) -> bool:\n    changed = False\n\n    # Premise 1: All employees who schedule a meeting with their customers will go to the company building today.\n    if employee.lunch_location is None and employee.is_remote is None:\n        employee.is_remote = False\n        employee.lunch_location = \"company building\"\n        changed = True\n\n    # Premise 2: Everyone who has lunch in the company building schedules meetings with their customers.\n    if employee.lunch_location == \"company building\" and employee.is_remote is None:\n        employee.is_remote = False\n        changed = True\n\n    # Premise 3: Employees have lunch either in the company building or at home.\n    if employee.lunch_location is None:\n        employee.lunch_location = \"home\"\n        changed = True\n\n    # Premise 4: If an employee has lunch at home, they are working remotely from home.\n    if employee.lunch_location == \"home\" and employee.is_remote is None:\n        employee.is_remote = True\n        changed = True\n\n    # Premise 5: All employees who are in other countries work remotely from home.\n    # Since we are only considering the current location (company or home), this premise does not directly affect the inference.\n    \n    # Premise 6: No managers work remotely from home.\n    if employee.is_manager is True and employee.is_remote is True:\n        employee.is_remote = False\n        employee.lunch_location = \"company building\"\n        changed = True\n\n    # Premise 7: James will appear in the company today if and only if he is a manager.\n    if employee.name == \"James\":\n        if employee.is_manager is None:\n            employee.is_manager = True\n            changed = True\n        if employee.is_remote is None:\n            if employee.is_manager is True:\n                employee.is_remote = False\n                employee.lunch_location = \"company building\"\n            else:\n                employee.is_remote = True\n                employee.lunch_location = \"home\"\n            changed = True\n\n    return changed\n\ndef run_inference(employee: Employee):\n    while apply_premises(employee):\n        pass\n\ndef check_conclusion(employee: Employee) -> str:\n    run_inference(employee)\n    if employee.name == \"James\" and employee.lunch_location == \"company building\":\n        return \"True\"\n    else:\n        return \"False\" if employee.lunch_location != \"company building\" else \"Uncertain\"\n\ndef func():\n    employee = Employee(\n        name=\"James\",\n        is_manager=None,\n        is_remote=None,\n        lunch_location=None\n    )\n    return check_conclusion(employee)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James has lunch in the company?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.\n</Premises>\n<Conclusion>\nJames has lunch in the company.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? James has lunch in the company.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.",
        "conclusions": "James does not have lunch in the company.",
        "rationale": "from typing import Optional\n\nclass Employee:\n    def __init__(self,\n                 is_manager: Optional[bool] = None,\n                 is_in_company: Optional[bool] = None,\n                 is_working_remotely: Optional[bool] = None,\n                 has_lunch_in_company: Optional[bool] = None):\n        self.is_manager = is_manager\n        self.is_in_company = is_in_company\n        self.is_working_remotely = is_working_remotely\n        self.has_lunch_in_company = has_lunch_in_company\n\ndef apply_premises(employee: Employee) -> bool:\n    changed = False\n\n    # Premise 1: All employees who schedule a meeting with their customers will go to the company building today.\n    if employee.has_lunch_in_company is None:\n        employee.has_lunch_in_company = True\n        changed = True\n\n    # Premise 2: Everyone who has lunch in the company building schedules meetings with their customers.\n    if employee.has_lunch_in_company is True and employee.is_in_company is None:\n        employee.is_in_company = True\n        changed = True\n\n    # Premise 3: Employees have lunch either in the company building or at home.\n    if employee.has_lunch_in_company is None and employee.is_working_remotely is None:\n        employee.has_lunch_in_company = True\n        employee.is_working_remotely = False\n        changed = True\n\n    # Premise 4: If an employee has lunch at home, they are working remotely from home.\n    if employee.is_working_remotely is None and employee.has_lunch_in_company is False:\n        employee.is_working_remotely = True\n        changed = True\n\n    # Premise 5: All employees who are in other countries work remotely from home.\n    # This premise does not directly affect the current employee's state, so no change is made.\n\n    # Premise 6: No managers work remotely from home.\n    if employee.is_manager is True and employee.is_working_remotely is True:\n        employee.is_working_remotely = False\n        changed = True\n\n    # Premise 7: James will appear in the company today if and only if he is a manager.\n    if employee.name == \"James\" and employee.is_manager is None:\n        employee.is_manager = True\n        changed = True\n\n    return changed\n\ndef run_inference(employee: Employee):\n    while apply_premises(employee):\n        pass\n\ndef check_conclusion(employee: Employee) -> str:\n    run_inference(employee)\n    if employee.has_lunch_in_company is None:\n        return \"Uncertain\"\n    if employee.has_lunch_in_company is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions\n    employee = Employee(\n        is_manager=None,\n        is_in_company=None,\n        is_working_remotely=None,\n        has_lunch_in_company=None\n    )\n    return check_conclusion(employee)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James does not have lunch in the company?\", result)",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.\n</Premises>\n<Conclusion>\nJames does not have lunch in the company.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? James does not have lunch in the company.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.",
        "conclusions": "If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]",
        "rationale": "```python\nfrom typing import Optional\n\nclass Employee:\n    def __init__(self,\n                 is_manager: Optional[bool] = None,\n                 is_in_other_countries: Optional[bool] = None,\n                 has_lunch_at_home: Optional[bool] = None,\n                 works_remotely: Optional[bool] = None):\n        self.is_manager = is_manager\n        self.is_in_other_countries = is_in_other_countries\n        self.has_lunch_at_home = has_lunch_at_home\n        self.works_remotely = works_remotely\n\ndef apply_premises(employee: Employee) -> bool:\n    changed = False\n\n    # Premise 1: All employees who schedule a meeting with their customers will go to the company building today.\n    # This premise is not directly useful for updating the state, but we can infer that if an employee is in the company building, they have scheduled a meeting.\n\n    # Premise 2: Everyone who has lunch in the company building schedules meetings with their customers.\n    # This implies that if an employee has lunch in the company building, they are in the company building.\n\n    # Premise 3: Employees have lunch either in the company building or at home.\n    # This means if an employee has lunch at home, they are not in the company building.\n\n    # Premise 4: If an employee has lunch at home, they are working remotely from home.\n    if employee.has_lunch_at_home is True and employee.works_remotely is None:\n        employee.works_remotely = True\n        changed = True\n\n    # Premise 5: All employees who are in other countries work remotely from home.\n    if employee.is_in_other_countries is True and employee.works_remotely is None:\n        employee.works_remotely = True\n        changed = True\n\n    # Premise 6: No managers work remotely from home.\n    if employee.is_manager is True and employee.works_remotely is True:\n        employee.works_remotely = False\n        changed = True\n\n    # Premise 7: James will appear in the company today if and only if he is a manager.\n    # This is not directly useful for updating the state, but it can be used to infer other conditions.\n\n    return changed\n\ndef run_inference(employee: Employee):\n    while apply_premises(employee):\n        pass\n\ndef check_conclusion(employee: Employee) -> str:\n    run_inference(employee)\n    # Conclusion: If James is either a manager or in other countries, then James does not either has lunch at home or work remotely from home.\n    # If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries.\n    if (employee.is_manager is True or employee.is_in_other_countries is True) and (employee.has_lunch_at_home is True or employee.works_remotely is True):\n        return \"False\"\n    elif (employee.has_lunch_at_home is True or employee.works_remotely is True) and (employee.is_manager is False and employee.is_in_other_countries is False):\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    employee = Employee(\n        is_manager=None,\n        is_in_other_countries=None,\n        has_lunch_at_home=None,\n        works_remotely=None\n    )\n    return check_conclusion(employee)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If James is either a manager or in other countries, then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries.\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll employees who schedule a meeting with their customers will go to the company building today. \nEveryone who has lunch in the company building schedules meetings with their customers. \nEmployees have lunch either in the company building or at home.\nIf an employee has lunch at home, they are working remotely from home.\nAll employees who are in other countries work remotely from home. \nNo managers work remotely from home. \nJames will appear in the company today if and only if he is a manager.\n</Premises>\n<Conclusion>\nIf James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "When the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.",
        "conclusions": "There is an animal.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Being:\n    def __init__(self, has_monkeypox: Optional[bool] = None):\n        self.has_monkeypox = has_monkeypox\n\nclass Virus:\n    def __init__(self, can_occur_in_animals: Optional[bool] = None):\n        self.can_occur_in_animals = can_occur_in_animals\n\nclass Animal:\n    def __init__(self, is_animal: Optional[bool] = None):\n        self.is_animal = is_animal\n\nclass Human(Animal):\n    def __init__(self, is_mammal: Optional[bool] = None):\n        super().__init__()\n        self.is_mammal = is_mammal\n\nclass Mammal:\n    def __init__(self, is_mammal: Optional[bool] = None):\n        self.is_mammal = is_mammal\n\nclass Symptom:\n    def __init__(self, is_symptom: Optional[bool] = None):\n        self.is_symptom = is_symptom\n\nclass Fever(Symptom):\n    pass\n\nclass Headache(Symptom):\n    pass\n\nclass MusclePain(Symptom):\n    pass\n\nclass Tiredness(Symptom):\n    def __init__(self, is_tired: Optional[bool] = None):\n        self.is_tired = is_tired\n\nclass Flu:\n    def __init__(self, causes_tiredness: Optional[bool] = None):\n        self.causes_tiredness = causes_tiredness\n\ndef apply_premises():\n    virus = Virus(can_occur_in_animals=None)\n    being = Being(has_monkeypox=None)\n    animal = Animal(is_animal=None)\n    human = Human(is_mammal=None)\n    mammal = Mammal(is_mammal=None)\n    symptom = Tiredness(is_tired=None)\n    flu = Flu(causes_tiredness=None)\n\n    # Premise 1: When the Monkeypox virus occurs in a being, it may get Monkeypox.\n    # No direct update here, just setting up the possibility.\n\n    # Premise 2: Monkeypox virus can occur in certain animals.\n    virus.can_occur_in_animals = True\n\n    # Premise 3: Humans are mammals.\n    human.is_mammal = True\n\n    # Premise 4: Mammals are animals.\n    mammal.is_mammal = True\n    animal.is_animal = True\n\n    # Premise 5: Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness.\n    # No direct update here, just setting up the possibility.\n\n    # Premise 6: People feel tired when they get the flu.\n    flu.causes_tiredness = True\n\ndef check_conclusion():\n    apply_premises()\n    # Check if there is an animal.\n    if animal.is_animal is not None and animal.is_animal:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: There is an animal?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nWhen the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.\n</Premises>\n<Conclusion>\nThere is an animal.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? There is an animal.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "When the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.",
        "conclusions": "No one gets the flu.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Virus:\n    def __init__(self, name: str, can_occur_in: Optional[str] = None):\n        self.name = name\n        self.can_occur_in = can_occur_in\n\nclass Being:\n    def __init__(self, is_human: Optional[bool] = None, has_virus: Optional[Virus] = None):\n        self.is_human = is_human\n        self.has_virus = has_virus\n\nclass Human(Being):\n    def __init__(self, is_human: bool = True, has_virus: Optional[Virus] = None):\n        super().__init__(is_human, has_virus)\n\nclass Animal:\n    def __init__(self, is_mammal: Optional[bool] = None, has_virus: Optional[Virus] = None):\n        self.is_mammal = is_mammal\n        self.has_virus = has_virus\n\nclass Mammal(Animal):\n    def __init__(self, is_mammal: bool = True, has_virus: Optional[Virus] = None):\n        super().__init__(is_mammal, has_virus)\n\nclass Flu:\n    def __init__(self, symptoms: Optional[list] = None):\n        self.symptoms = symptoms\n\ndef apply_premises():\n    monkeypox_virus = Virus(\"Monkeypox\")\n    flu = Flu([\"fever\", \"headache\", \"muscle pains\", \"tiredness\"])\n\n    # Premise 1: When the Monkeypox virus occurs in a being, it may get Monkeypox.\n    # This is encoded in the has_virus attribute of Being.\n    # We assume that the virus can occur in certain animals, but not in humans.\n    # Therefore, no being (human or animal) will have the Monkeypox virus based on given premises.\n\n    # Premise 2: Monkeypox virus can occur in certain animals.\n    monkeypox_virus.can_occur_in = \"animals\"\n\n    # Premise 3: Humans are mammals.\n    # Premise 4: Mammals are animals.\n    # These premises are used to establish relationships but do not directly affect the virus occurrence.\n\n    # Premise 5: Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness.\n    # Premise 6: People feel tired when they get the flu.\n    # Since no one gets Monkeypox, and Monkeypox and flu symptoms overlap, we need to check if someone can get the flu.\n\n    # Check if anyone can get the flu based on symptoms.\n    for being in [Human(is_human=True), Animal(is_mammal=True), Mammal(is_mammal=True)]:\n        if being.has_virus is None and flu.symptoms is not None:\n            for symptom in flu.symptoms:\n                if symptom in [\"fever\", \"headache\", \"muscle pains\", \"tiredness\"]:\n                    being.has_virus = monkeypox_virus\n                    break\n    return being.has_virus is None\n\ndef check_conclusion() -> str:\n    if apply_premises():\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No one gets the flu?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nWhen the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.\n</Premises>\n<Conclusion>\nNo one gets the flu.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? No one gets the flu.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "When the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.",
        "conclusions": "Symptoms of Monkeypox include coughing.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Virus:\n    def __init__(self, name: str, can_occur_in: Optional[list] = None):\n        self.name = name\n        self.can_occur_in = can_occur_in\n\nclass Being:\n    def __init__(self, is_human: Optional[bool] = None, has_virus: Optional[Virus] = None):\n        self.is_human = is_human\n        self.has_virus = has_virus\n\nclass Monkeypox(Virus):\n    def __init__(self):\n        super().__init__(\"Monkeypox\", can_occur_in=[\"animals\"])\n\nclass Flu(Virus):\n    def __init__(self):\n        super().__init__(\"Flu\")\n\nclass Symptom:\n    def __init__(self, name: str):\n        self.name = name\n\nclass Fever(Symptom):\n    pass\n\nclass Headache(Symptom):\n    pass\n\nclass MusclePain(Symptom):\n    pass\n\nclass Tiredness(Symptom):\n    pass\n\nclass Cough(Symptom):\n    pass\n\ndef apply_premises(being: Being) -> bool:\n    changed = False\n\n    # Premise 1: When the Monkeypox virus occurs in a being, it may get Monkeypox.\n    if being.has_virus is None and being.is_human is not True and Monkeypox().can_occur_in is not None and \"animals\" in Monkeypox().can_occur_in:\n        being.has_virus = Monkeypox()\n        changed = True\n\n    # Premise 2: Monkeypox virus can occur in certain animals.\n    # This premise is encoded in the Virus class.\n\n    # Premise 3: Humans are mammals.\n    # This premise is encoded in the Being class.\n\n    # Premise 4: Mammals are animals.\n    # This premise is encoded in the Virus class.\n\n    # Premise 5: Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness.\n    if being.has_virus is not None and being.has_virus.name == \"Monkeypox\":\n        if being.has_virus not in being.has_virus.can_occur_in:\n            being.has_virus = None\n            changed = True\n        else:\n            if Fever() not in being.has_virus.can_occur_in:\n                being.has_virus.can_occur_in.append(Fever())\n                changed = True\n            if Headache() not in being.has_virus.can_occur_in:\n                being.has_virus.can_occur_in.append(Headache())\n                changed = True\n            if MusclePain() not in being.has_virus.can_occur_in:\n                being.has_virus.can_occur_in.append(MusclePain())\n                changed = True\n            if Tiredness() not in being.has_virus.can_occur_in:\n                being.has_virus.can_occur_in.append(Tiredness())\n                changed = True\n\n    # Premise 6: People feel tired when they get the flu.\n    # This premise is encoded in the Virus class.\n\n    return changed\n\ndef run_inference(being: Being):\n    while apply_premises(being):\n        pass\n\ndef check_conclusion(being: Being) -> str:\n    run_inference(being)\n    if being.has_virus is None or being.has_virus.name != \"Monkeypox\":\n        return \"False\"\n    if Cough() not in being.has_virus.can_occur_in:\n        return \"False\"\n    return \"True\"\n\ndef func():\n    being = Being(is_human=True)\n    return check_conclusion(being)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Symptoms of Monkeypox include coughing?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nWhen the Monkeypox virus occurs in a being, it may get Monkeypox. \nMonkeypox virus can occur in certain animals.\nHumans are mammals.\nMammals are animals.\nSymptoms of Monkeypox include fever, headache, muscle pains, and tiredness. \nPeople feel tired when they get the flu.\n</Premises>\n<Conclusion>\nSymptoms of Monkeypox include coughing.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Symptoms of Monkeypox include coughing.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.",
        "conclusions": "Tom is an Ocellated wild turkey.",
        "rationale": "```python\nfrom typing import Optional\n\nclass WildTurkey:\n    def __init__(self, species: Optional[str] = None):\n        self.species = species\n\ndef apply_premises(tom: WildTurkey) -> bool:\n    changed = False\n\n    # Premise 1: There are six types of wild turkeys.\n    # Premise 2: Tom is not an Eastern wild turkey.\n    if tom.species != \"Eastern wild turkey\":\n        if tom.species == \"Eastern wild turkey\":\n            tom.species = None\n            changed = True\n        elif tom.species is None:\n            pass\n        else:\n            pass\n\n    # Premise 3: Tom is not an Osceola wild turkey.\n    if tom.species != \"Osceola wild turkey\":\n        if tom.species == \"Osceola wild turkey\":\n            tom.species = None\n            changed = True\n        elif tom.species is None:\n            pass\n        else:\n            pass\n\n    # Premise 4: Tom is not a Gould's wild turkey.\n    if tom.species != \"Gould\u2019s wild turkey\":\n        if tom.species == \"Gould\u2019s wild turkey\":\n            tom.species = None\n            changed = True\n        elif tom.species is None:\n            pass\n        else:\n            pass\n\n    # Premise 5: Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\n    if tom.species != \"Merriam\u2019s wild turkey\" and tom.species != \"Rio Grande wild turkey\":\n        if tom.species == \"Merriam\u2019s wild turkey\" or tom.species == \"Rio Grande wild turkey\":\n            tom.species = None\n            changed = True\n        elif tom.species is None:\n            pass\n        else:\n            pass\n\n    # Premise 6: Tom is a wild turkey.\n    if tom.species is None:\n        tom.species = \"Ocellated wild turkey\"\n        changed = True\n\n    return changed\n\ndef run_inference(tom: WildTurkey):\n    while apply_premises(tom):\n        pass\n\ndef check_conclusion(tom: WildTurkey) -> str:\n    run_inference(tom)\n    if tom.species == \"Ocellated wild turkey\":\n        return \"True\"\n    elif tom.species is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    tom = WildTurkey()\n    return check_conclusion(tom)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is an Ocellated wild turkey?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThere are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.\n</Premises>\n<Conclusion>\nTom is an Ocellated wild turkey.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Tom is an Ocellated wild turkey.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.",
        "conclusions": "Tom is an Eastern wild turkey.",
        "rationale": "```python\nfrom typing import Optional\n\nclass WildTurkey:\n    def __init__(self, species: Optional[str] = None):\n        self.species = species\n\ndef apply_premises(tom: WildTurkey) -> bool:\n    changed = False\n\n    # Premise 1: Tom is not an Eastern wild turkey.\n    if tom.species != \"Eastern wild turkey\":\n        tom.species = None\n        changed = True\n\n    # Premise 2: Tom is not an Osceola wild turkey.\n    if tom.species != \"Osceola wild turkey\":\n        tom.species = None\n        changed = True\n\n    # Premise 3: Tom is not a Gould\u2019s wild turkey.\n    if tom.species != \"Gould\u2019s wild turkey\":\n        tom.species = None\n        changed = True\n\n    # Premise 4: Tom is neither a Merriam\u2019s wild turkey nor a Rio Grande wild turkey.\n    if tom.species != \"Merriam\u2019s wild turkey\" and tom.species != \"Rio Grande wild turkey\":\n        tom.species = None\n        changed = True\n\n    # Premise 5: Tom is a wild turkey.\n    if tom.species is None:\n        tom.species = \"Eastern wild turkey\"  # Assuming the only remaining option is Eastern wild turkey.\n\n    return changed\n\ndef run_inference(tom: WildTurkey):\n    while apply_premises(tom):\n        pass\n\ndef check_conclusion(tom: WildTurkey) -> str:\n    run_inference(tom)\n    if tom.species == \"Eastern wild turkey\":\n        return \"True\"\n    elif tom.species is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    tom = WildTurkey()\n    return check_conclusion(tom)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is an Eastern wild turkey?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThere are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.\n</Premises>\n<Conclusion>\nTom is an Eastern wild turkey.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Tom is an Eastern wild turkey.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.",
        "conclusions": "Joey is a wild turkey.",
        "rationale": "```python\nfrom typing import Optional\n\nclass WildTurkey:\n    def __init__(self, species: Optional[str] = None):\n        self.species = species\n\ndef apply_premises(tom: WildTurkey) -> bool:\n    changed = False\n\n    # Premises about Tom's species\n    if tom.species is None:\n        tom.species = \"Not Eastern, Osceola, Gould's, Merriam's, or Rio Grande\"\n        changed = True\n\n    # Premise: Tom is a wild turkey.\n    if tom.species != \"Wild Turkey\" and tom.species is not None:\n        tom.species = \"Wild Turkey\"\n        changed = True\n\n    return changed\n\ndef run_inference(tom: WildTurkey):\n    while apply_premises(tom):\n        pass\n\ndef check_conclusion(joey: WildTurkey) -> str:\n    run_inference(tom)\n    # Conclusion: Joey is a wild turkey.\n    if joey.species is None:\n        return \"Uncertain\"\n    if \"Wild Turkey\" in joey.species:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions about Tom\n    tom = WildTurkey()\n    run_inference(tom)\n    # Joey is not mentioned in premises, so we assume it's initially unknown\n    joey = WildTurkey()\n    return check_conclusion(joey)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Joey is a wild turkey?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThere are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould\u2019s wild turkey, Merriam\u2019s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey.\nTom is not an Eastern wild turkey.\nTom is not an Osceola wild turkey.\nTom is not a Gould's wild turkey.\nTom is neither a Merriam's wild turkey nor a Rio Grande wild turkey.\nTom is a wild turkey.\n</Premises>\n<Conclusion>\nJoey is a wild turkey.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Joey is a wild turkey.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "A Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.",
        "conclusions": "The Legend of Zelda is on the Top 10 list.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Game:\n    def __init__(self, name: str, company: Optional[str] = None, copies_sold: Optional[int] = None, on_top_10: Optional[bool] = None):\n        self.name = name\n        self.company = company\n        self.copies_sold = copies_sold\n        self.on_top_10 = on_top_10\n\ndef apply_premises(game: Game) -> bool:\n    changed = False\n\n    # Premise 1: A Japanese game company created the game the Legend of Zelda.\n    if game.name == \"The Legend of Zelda\" and game.company is None:\n        game.company = \"Japanese game company\"\n        changed = True\n\n    # Premise 2: All games on the Top 10 list are made by Japanese game companies.\n    # This premise is a constraint, but does not change the state directly.\n    # We will check this later.\n\n    # Premise 3: If a game sells more than one million copies, then it will be included in the Top 10 list.\n    if game.name == \"The Legend of Zelda\" and game.copies_sold is not None and game.copies_sold > 1000000 and game.on_top_10 is None:\n        game.on_top_10 = True\n        changed = True\n\n    # Premise 4: The Legend of Zelda sold more than one million copies.\n    if game.name == \"The Legend of Zelda\" and game.copies_sold is None:\n        game.copies_sold = 1000001\n        changed = True\n\n    return changed\n\ndef run_inference(game: Game):\n    while apply_premises(game):\n        pass\n\ndef check_conclusion(game: Game) -> str:\n    run_inference(game)\n    if game.name == \"The Legend of Zelda\":\n        if game.on_top_10 is True:\n            return \"True\"\n        elif game.on_top_10 is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    game = Game(name=\"The Legend of Zelda\", copies_sold=None, on_top_10=None)\n    return check_conclusion(game)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Legend of Zelda is on the Top 10 list?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nA Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.\n</Premises>\n<Conclusion>\nThe Legend of Zelda is on the Top 10 list.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The Legend of Zelda is on the Top 10 list.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "A Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.",
        "conclusions": "FIFA 22 is made by a Japanese video game company.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Game:\n    def __init__(self, name: str, is_top_10: Optional[bool] = None, sold_copies: Optional[int] = None, company_is_japanese: Optional[bool] = None):\n        self.name = name\n        self.is_top_10 = is_top_10\n        self.sold_copies = sold_copies\n        self.company_is_japanese = company_is_japanese\n\ndef apply_premises(game: Game) -> bool:\n    changed = False\n\n    # Premise 1: A Japanese game company created the game the Legend of Zelda.\n    if game.name == \"The Legend of Zelda\":\n        if game.company_is_japanese is None:\n            game.company_is_japanese = True\n            changed = True\n\n    # Premise 2: All games on the Top 10 list are made by Japanese game companies.\n    # This premise does not directly update the game's attributes but is used in the inference.\n    \n    # Premise 3: If a game sells more than one million copies, then it will be included in the Top 10 list.\n    if game.name == \"The Legend of Zelda\" and game.sold_copies > 1000000 and game.is_top_10 is None:\n        game.is_top_10 = True\n        changed = True\n\n    # Premise 4: The Legend of Zelda sold more than one million copies.\n    if game.name == \"The Legend of Zelda\" and game.sold_copies is None:\n        game.sold_copies = 1200000  # Example value, more than one million\n        changed = True\n\n    return changed\n\ndef run_inference(game: Game):\n    while apply_premises(game):\n        pass\n\ndef check_conclusion(game: Game) -> str:\n    run_inference(game)\n    if game.name == \"FIFA 22\":\n        if game.company_is_japanese is None:\n            return \"Uncertain\"\n        elif game.company_is_japanese is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    game = Game(\n        name=\"The Legend of Zelda\",\n        is_top_10=None,\n        sold_copies=None,\n        company_is_japanese=None\n    )\n    return check_conclusion(Game(name=\"FIFA 22\", is_top_10=None, sold_copies=None, company_is_japanese=None))\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: FIFA 22 is made by a Japanese video game company?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nA Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.\n</Premises>\n<Conclusion>\nFIFA 22 is made by a Japanese video game company.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? FIFA 22 is made by a Japanese video game company.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "A Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.",
        "conclusions": "The Legend of Zelda is not on the Top 10 list.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Game:\n    def __init__(self, name: str, is_japanese_company: Optional[bool] = None, copies_sold: Optional[int] = None, in_top_10: Optional[bool] = None):\n        self.name = name\n        self.is_japanese_company = is_japanese_company\n        self.copies_sold = copies_sold\n        self.in_top_10 = in_top_10\n\ndef apply_premises(game: Game) -> bool:\n    changed = False\n\n    # Premise 1: A Japanese game company created the game the Legend of Zelda.\n    if game.name == \"The Legend of Zelda\":\n        if game.is_japanese_company is None:\n            game.is_japanese_company = True\n            changed = True\n\n    # Premise 2: All games on the Top 10 list are made by Japanese game companies.\n    if game.in_top_10 is not None and game.is_japanese_company is None:\n        game.is_japanese_company = game.in_top_10\n        changed = True\n\n    # Premise 3: If a game sells more than one million copies, then it will be included in the Top 10 list.\n    if game.copies_sold > 1_000_000 and game.in_top_10 is not True:\n        game.in_top_10 = True\n        changed = True\n\n    # Premise 4: The Legend of Zelda sold more than one million copies.\n    if game.name == \"The Legend of Zelda\":\n        if game.copies_sold is None:\n            game.copies_sold = 1_000_001\n            changed = True\n\n    return changed\n\ndef run_inference(game: Game):\n    while apply_premises(game):\n        pass\n\ndef check_conclusion(game: Game) -> str:\n    run_inference(game)\n    if game.in_top_10 is None:\n        return \"Uncertain\"\n    if game.in_top_10 is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    game = Game(\n        name=\"The Legend of Zelda\",\n        is_japanese_company=None,\n        copies_sold=None,\n        in_top_10=None\n    )\n    return check_conclusion(game)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Legend of Zelda is not on the Top 10 list?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nA Japanese game company created the game the Legend of Zelda.\nAll games on the Top 10 list are made by Japanese game companies.\nIf a game sells more than one million copies, then it will be included in the Top 10 list.\nThe Legend of Zelda sold more than one million copies.\n</Premises>\n<Conclusion>\nThe Legend of Zelda is not on the Top 10 list.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The Legend of Zelda is not on the Top 10 list.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All squares are four-sided.\nAll four-sided things are shapes. ",
        "conclusions": "All squares are shapes.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Shape:\n    def __init__(self, is_four_sided: Optional[bool] = None):\n        self.is_four_sided = is_four_sided\n\nclass FourSided:\n    def __init__(self, is_square: Optional[bool] = None):\n        self.is_square = is_square\n\ndef apply_premises(square: FourSided, shape: Shape) -> bool:\n    changed = False\n\n    # Premise 1: All squares are four-sided.\n    if square.is_square is True and square.is_four_sided is not True:\n        square.is_four_sided = True\n        changed = True\n\n    # Premise 2: All four-sided things are shapes.\n    if square.is_four_sided is True and shape.is_four_sided is not True:\n        shape.is_four_sided = True\n        changed = True\n\n    return changed\n\ndef run_inference(square: FourSided, shape: Shape):\n    while apply_premises(square, shape):\n        pass\n\ndef check_conclusion(square: FourSided, shape: Shape) -> str:\n    run_inference(square, shape)\n    if square.is_square is True and shape.is_four_sided is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    square = FourSided(is_square=True)\n    shape = Shape()\n    return check_conclusion(square, shape)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: All squares are shapes?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll squares are four-sided.\nAll four-sided things are shapes. \n</Premises>\n<Conclusion>\nAll squares are shapes.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? All squares are shapes.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "Rockie is a turtle.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self, name: str, is_calm: Optional[bool] = None, is_cute: Optional[bool] = None, is_skittish: Optional[bool] = None):\n        self.name = name\n        self.is_calm = is_calm\n        self.is_cute = is_cute\n        self.is_skittish = is_skittish\n\ndef apply_premises(rockie: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    if rockie.name == \"Rockie\" and rockie.is_cute is None:\n        rockie.is_cute = True\n        changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # This premise does not directly affect Rockie's attributes but is used in the context.\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    if rockie.name == \"Rockie\" and rockie.is_cute is True and rockie.is_skittish is None:\n        rockie.is_skittish = True\n        changed = True\n\n    # Premise 4: If something is skittish, then it is not calm.\n    if rockie.name == \"Rockie\" and rockie.is_skittish is True and rockie.is_calm is True:\n        rockie.is_calm = False\n        changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    if rockie.name == \"Rockie\" and rockie.is_calm is True and rockie.is_skittish is False:\n        rockie.is_skittish = True\n        changed = True\n\n    # Premise 6: Rockie can be spotted near the campus, and it is calm.\n    if rockie.name == \"Rockie\" and rockie.is_calm is None:\n        rockie.is_calm = True\n        changed = True\n\n    return changed\n\ndef run_inference(rockie: Animal):\n    while apply_premises(rockie):\n        pass\n\ndef check_conclusion(rockie: Animal) -> str:\n    run_inference(rockie)\n    if rockie.name == \"Rockie\" and rockie.is_calm is True and rockie.is_skittish is True:\n        return \"False\"  # Rockie cannot be a turtle if it is skittish and calm.\n    else:\n        return \"Uncertain\"\n\ndef func():\n    rockie = Animal(name=\"Rockie\", is_calm=True)\n    return check_conclusion(rockie)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rockie is a turtle?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</Premises>\n<Conclusion>\nRockie is a turtle.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Rockie is a turtle.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "Rockie is not a turtle.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self, name: str, is_cute: Optional[bool] = None, is_skittish: Optional[bool] = None, is_calm: Optional[bool] = None, can_be_spotted: Optional[bool] = None):\n        self.name = name\n        self.is_cute = is_cute\n        self.is_skittish = is_skittish\n        self.is_calm = is_calm\n        self.can_be_spotted = can_be_spotted\n\nclass Rabbit(Animal):\n    def __init__(self, name: str):\n        super().__init__(name, is_cute=None, is_skittish=None, is_calm=None, can_be_spotted=None)\n\nclass Turtle(Animal):\n    def __init__(self, name: str):\n        super().__init__(name, is_cute=None, is_skittish=None, is_calm=None, can_be_spotted=None)\n\nclass Squirrel(Animal):\n    def __init__(self, name: str):\n        super().__init__(name, is_cute=None, is_skittish=None, is_calm=None, can_be_spotted=None)\n\ndef apply_premises(rockie: Animal):\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    # Since Rockie can be spotted near the campus, it must be cute if it is a rabbit.\n    if rockie.can_be_spotted is True and rockie.is_cute is None:\n        if isinstance(rockie, Rabbit):\n            rockie.is_cute = True\n            changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # This does not give us direct information about Rockie, but it confirms turtles can be spotted.\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    # Rockie can be spotted, so it must be a rabbit or a squirrel.\n    if rockie.can_be_spotted is True and rockie.name != \"Rockie\":\n        if rockie.is_cute is None:\n            rockie.is_cute = False  # Not all can be cute, but this is a placeholder for logic.\n        if rockie.is_skittish is None:\n            rockie.is_skittish = False  # Not all can be skittish, but this is a placeholder for logic.\n        if rockie.is_calm is None:\n            rockie.is_calm = False  # Not all can be calm, but this is a placeholder for logic.\n        if rockie.name == \"Rockie\":\n            if rockie.is_cute is False:\n                rockie.is_cute = True  # If it is not cute, it must be cute to fit the logic.\n            if rockie.is_skittish is False:\n                rockie.is_skittish = True  # If it is not skittish, it must be skittish to fit the logic.\n            if rockie.is_calm is True:\n                rockie.is_calm = False  # It cannot be calm if it is skittish.\n                changed = True\n\n    # Premise 4: If something is skittish, then it is not calm.\n    # Since Rockie is skittish, it cannot be calm.\n    if rockie.is_skittish is True and rockie.is_calm is not False:\n        rockie.is_calm = False\n        changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    # Since Rockie is skittish, it must be a squirrel.\n    if rockie.is_skittish is True and rockie.is_cute is False:\n        rockie.is_cute = False\n        rockie.is_skittish = True\n        if rockie.name == \"Rockie\":\n            rockie.is_calm = False\n            changed = True\n\n    # Premise 6: Rockie can be spotted near the campus, and it is calm.\n    if rockie.name == \"Rockie\" and rockie.is_calm is True:\n        rockie.is_calm = False  # Contradiction, so it cannot be calm.\n        changed = True\n\n    return changed\n\ndef run_inference(rockie: Animal):\n    while apply_premises(rockie):\n        pass\n\ndef check_conclusion(rockie: Animal) -> str:\n    run_inference(rockie)\n    if rockie.name == \"Rockie\" and rockie.is_calm is False:\n        # Rockie cannot be a turtle if it is skittish (since only squirrels are skittish and not turtles).\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions:\n    rockie = Animal(name=\"Rockie\", can_be_spotted=True, is_calm=True)\n    return check_conclusion(rockie)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rockie is not a turtle?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</Premises>\n<Conclusion>\nRockie is not a turtle.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Rockie is not a turtle.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "Rockie is a turtle or cute.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self, name: str, is_cute: Optional[bool] = None, is_skittish: Optional[bool] = None, is_calm: Optional[bool] = None, spotted: Optional[bool] = None):\n        self.name = name\n        self.is_cute = is_cute\n        self.is_skittish = is_skittish\n        self.is_calm = is_calm\n        self.spotted = spotted\n\ndef apply_premises(rockie: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    if rockie.name == \"Rockie\" and rockie.spotted is True and rockie.is_cute is None:\n        rockie.is_cute = True\n        changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # This does not directly affect Rockie's properties.\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    if rockie.spotted is True and rockie.name != \"Rockie\":\n        if rockie.name == \"Rabbit\":\n            rockie.is_cute = True\n            changed = True\n        elif rockie.name == \"Squirrel\":\n            rockie.is_skittish = True\n            changed = True\n\n    # Premise 4: If something is skittish, then it is not calm.\n    if rockie.is_skittish is True and rockie.is_calm is not False:\n        rockie.is_calm = False\n        changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    if rockie.name == \"Squirrel\" and rockie.spotted is True and rockie.is_skittish is None:\n        rockie.is_skittish = True\n        changed = True\n\n    # Premise 6: Rockie can be spotted near the campus, and it is calm.\n    if rockie.name == \"Rockie\" and rockie.spotted is True and rockie.is_calm is True:\n        if rockie.is_cute is None:\n            rockie.is_cute = False\n            changed = True\n        if rockie.is_skittish is None:\n            rockie.is_skittish = False\n            changed = True\n        if rockie.is_calm is True:\n            changed = True\n\n    return changed\n\ndef run_inference(rockie: Animal):\n    while apply_premises(rockie):\n        pass\n\ndef check_conclusion(rockie: Animal) -> str:\n    run_inference(rockie)\n    if rockie.name == \"Rockie\":\n        if rockie.is_cute is None:\n            return \"Uncertain\"\n        if rockie.is_cute is True or rockie.name == \"Turtle\":\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    rockie = Animal(\n        name=\"Rockie\",\n        is_cute=None,\n        is_skittish=None,\n        is_calm=True,\n        spotted=True\n    )\n    return check_conclusion(rockie)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rockie is a turtle or cute?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</Premises>\n<Conclusion>\nRockie is a turtle or cute.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Rockie is a turtle or cute.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 is_cute: Optional[bool] = None,\n                 is_skittish: Optional[bool] = None,\n                 is_turtle: Optional[bool] = None,\n                 is_squirrel: Optional[bool] = None):\n        self.is_cute = is_cute\n        self.is_skittish = is_skittish\n        self.is_turtle = is_turtle\n        self.is_squirrel = is_squirrel\n\ndef apply_premises(rockie: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    if rockie.is_squirrel is not None and rockie.is_squirrel:\n        if rockie.is_cute is None:\n            rockie.is_cute = True\n            changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # This does not affect the current state of Rockie.\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    # This implies Rockie is either a squirrel or a turtle.\n    if rockie.is_turtle is None and rockie.is_squirrel is None:\n        rockie.is_turtle = True\n        rockie.is_squirrel = False\n        changed = True\n    elif rockie.is_turtle is None and rockie.is_squirrel is True:\n        changed = True\n    elif rockie.is_turtle is True and rockie.is_squirrel is None:\n        changed = True\n\n    # Premise 4: If something is skittish, then it is not calm.\n    if rockie.is_skittish is None and rockie.is_calm is True:\n        rockie.is_skittish = False\n        changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    if rockie.is_squirrel is True and rockie.is_skittish is not True:\n        rockie.is_skittish = True\n        changed = True\n\n    # Premise 6: Rockie can be spotted near the campus, and it is calm.\n    if rockie.is_calm is True:\n        if rockie.is_skittish is not False:\n            rockie.is_skittish = False\n            changed = True\n\n    return changed\n\ndef run_inference(rockie: Animal):\n    while apply_premises(rockie):\n        pass\n\ndef check_conclusion(rockie: Animal) -> str:\n    run_inference(rockie)\n    # Conclusion: If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.\n    if rockie.is_turtle is True and rockie.is_squirrel is True:\n        return \"Uncertain\"\n    elif rockie.is_turtle is not True and rockie.is_squirrel is not True:\n        if rockie.is_cute is None or rockie.is_skittish is None:\n            return \"Uncertain\"\n        if rockie.is_cute is True or rockie.is_skittish is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    rockie = Animal(\n        is_cute=None,\n        is_skittish=None,\n        is_turtle=None,\n        is_squirrel=None,\n        is_calm=True\n    )\n    return check_conclusion(rockie)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</Premises>\n<Conclusion>\nIf Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.",
        "conclusions": "If Rockie is cute and calm, then Rockie is a skittish turtle.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self, name: str, is_cute: Optional[bool] = None, is_calm: Optional[bool] = None, is_skittish: Optional[bool] = None, is_turtle: Optional[bool] = None, is_rabbit: Optional[bool] = None):\n        self.name = name\n        self.is_cute = is_cute\n        self.is_calm = is_calm\n        self.is_skittish = is_skittish\n        self.is_turtle = is_turtle\n        self.is_rabbit = is_rabbit\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All rabbits that can be spotted near the campus are cute.\n    if animal.is_rabbit is True and animal.is_cute is None:\n        animal.is_cute = True\n        changed = True\n\n    # Premise 2: Some turtles can be spotted near the campus.\n    # No direct update here, but we need to keep track of this.\n    if animal.is_turtle is None and animal.name == \"Rockie\":\n        animal.is_turtle = True\n        changed = True\n\n    # Premise 3: The only animals that can be spotted near the campus are rabbits and squirrels.\n    # No direct update here, but we need to keep track of this.\n\n    # Premise 4: If something is skittish, then it is not calm.\n    if animal.is_skittish is True and animal.is_calm is not False:\n        animal.is_calm = False\n        changed = True\n\n    # Premise 5: All the squirrels that can be spotted near the campus are skittish.\n    if animal.is_rabbit is False and animal.is_skittish is None and animal.is_calm is not False and animal.name == \"Rockie\":\n        animal.is_skittish = True\n        changed = True\n\n    # Premise 6: Rockie can be spotted near the campus, and it is calm.\n    if animal.name == \"Rockie\" and animal.is_calm is None:\n        animal.is_calm = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    if animal.is_cute is True and animal.is_calm is True:\n        if animal.is_skittish is True and animal.is_turtle is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    animal = Animal(name=\"Rockie\", is_cute=None, is_calm=None, is_skittish=None, is_turtle=None, is_rabbit=None)\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Rockie is cute and calm, then Rockie is a skittish turtle?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll rabbits that can be spotted near the campus are cute. \nSome turtles can be spotted near the campus. \nThe only animals that can be spotted near the campus are rabbits and squirrels.\nIf something is skittish, then it is not calm.\nAll the squirrels that can be spotted near the campus are skittish.\nRockie can be spotted near the campus, and it is calm.\n</Premises>\n<Conclusion>\nIf Rockie is cute and calm, then Rockie is a skittish turtle.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Rockie is cute and calm, then Rockie is a skittish turtle.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.",
        "conclusions": "Karen will share \"Stranger Things\" with Lisa.",
        "rationale": "```python\nfrom typing import Optional\n\nclass NetflixShow:\n    def __init__(self, name: str, is_popular: Optional[bool] = None):\n        self.name = name\n        self.is_popular = is_popular\n\nclass Karen:\n    def __init__(self,\n                 binge_watches: Optional[NetflixShow] = None,\n                 downloads: Optional[NetflixShow] = None,\n                 shares_with_lisa: Optional[NetflixShow] = None):\n        self.binge_watches = binge_watches\n        self.downloads = downloads\n        self.shares_with_lisa = shares_with_lisa\n\ndef apply_premises(karen: Karen, stranger_things: NetflixShow, black_mirror: NetflixShow) -> bool:\n    changed = False\n\n    # Premise 1: \"Stranger Things\" is a popular Netflix show.\n    if stranger_things.name == \"Stranger Things\" and stranger_things.is_popular is None:\n        stranger_things.is_popular = True\n        changed = True\n\n    # Premise 2: If a Netflix show is popular, Karen will binge-watch it.\n    if stranger_things.is_popular is True and karen.binge_watches != stranger_things:\n        karen.binge_watches = stranger_things\n        changed = True\n\n    # Premise 3: If and only if Karen binge-watches a Netflix show, she will download it.\n    if karen.binge_watches == stranger_things and karen.downloads != stranger_things:\n        karen.downloads = stranger_things\n        changed = True\n\n    # Premise 4: Karen does not download \"Black Mirror.\"\n    if black_mirror.name == \"Black Mirror\" and karen.downloads == black_mirror:\n        karen.downloads = None\n        changed = True\n\n    # Premise 5: \"Black Mirror\" is a Netflix show.\n    if black_mirror.name == \"Black Mirror\" and black_mirror.is_popular is None:\n        black_mirror.is_popular = False\n        changed = True\n\n    # Premise 6: If Karen binge-watches a Netflix show, she will share it with Lisa.\n    if karen.binge_watches == stranger_things and karen.shares_with_lisa != stranger_things:\n        karen.shares_with_lisa = stranger_things\n        changed = True\n\n    return changed\n\ndef run_inference(karen: Karen, stranger_things: NetflixShow, black_mirror: NetflixShow):\n    while apply_premises(karen, stranger_things, black_mirror):\n        pass\n\ndef check_conclusion(karen: Karen, stranger_things: NetflixShow) -> str:\n    run_inference(karen, stranger_things, black_mirror)\n    if karen.shares_with_lisa == stranger_things:\n        return \"True\"\n    elif karen.shares_with_lisa is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    stranger_things = NetflixShow(name=\"Stranger Things\")\n    black_mirror = NetflixShow(name=\"Black Mirror\")\n    karen = Karen()\n    return check_conclusion(karen, stranger_things, black_mirror)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Karen will share 'Stranger Things' with Lisa?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\n\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.\n</Premises>\n<Conclusion>\nKaren will share \"Stranger Things\" with Lisa.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Karen will share \"Stranger Things\" with Lisa.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.",
        "conclusions": "\"Black Mirror\" is popular.",
        "rationale": "```python\nfrom typing import Optional\n\nclass NetflixShow:\n    def __init__(self, name: str, is_popular: Optional[bool] = None, is_downloaded: Optional[bool] = None):\n        self.name = name\n        self.is_popular = is_popular\n        self.is_downloaded = is_downloaded\n\nclass Person:\n    def __init__(self, name: str, will_binge_watch: Optional[bool] = None, will_download: Optional[bool] = None, will_share: Optional[bool] = None):\n        self.name = name\n        self.will_binge_watch = will_binge_watch\n        self.will_download = will_download\n        self.will_share = will_share\n\ndef apply_premises(netflix_show: NetflixShow, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: \"Stranger Things\" is a popular Netflix show.\n    if netflix_show.name == \"Stranger Things\":\n        if netflix_show.is_popular is None:\n            netflix_show.is_popular = True\n            changed = True\n\n    # Premise 2: If a Netflix show is popular, Karen will binge-watch it.\n    if netflix_show.is_popular is True and person.will_binge_watch is not True:\n        person.will_binge_watch = True\n        changed = True\n\n    # Premise 3: If and only if Karen binge-watches a Netflix show, she will download it.\n    if person.will_binge_watch is True and netflix_show.is_downloaded is not True:\n        netflix_show.is_downloaded = True\n        changed = True\n    elif person.will_binge_watch is False and netflix_show.is_downloaded is True:\n        netflix_show.is_downloaded = False\n        changed = True\n\n    # Premise 4: Karen does not download \"Black Mirror.\"\n    if netflix_show.name == \"Black Mirror\":\n        if netflix_show.is_downloaded is True:\n            netflix_show.is_downloaded = False\n            changed = True\n\n    # Premise 5: If Karen binge-watches a Netflix show, she will share it with Lisa.\n    if person.will_binge_watch is True and person.will_share is not True:\n        person.will_share = True\n        changed = True\n\n    return changed\n\ndef run_inference(netflix_show: NetflixShow, person: Person):\n    while apply_premises(netflix_show, person):\n        pass\n\ndef check_conclusion(netflix_show: NetflixShow) -> str:\n    run_inference(netflix_show, person)\n    if netflix_show.name == \"Black Mirror\":\n        if netflix_show.is_popular is True:\n            return \"True\"\n        elif netflix_show.is_popular is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    netflix_show = NetflixShow(name=\"Black Mirror\")\n    person = Person(name=\"Karen\", will_binge_watch=None, will_download=None, will_share=None)\n    return check_conclusion(netflix_show)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 'Black Mirror' is popular?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\n\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.\n</Premises>\n<Conclusion>\n\"Black Mirror\" is popular.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? \"Black Mirror\" is popular.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.",
        "conclusions": "Karen will share \"Black Mirror\" with Lisa.",
        "rationale": "```python\nfrom typing import Optional\n\nclass NetflixShow:\n    def __init__(self, name: str, is_popular: Optional[bool] = None):\n        self.name = name\n        self.is_popular = is_popular\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 will_binge_watch: Optional[bool] = None,\n                 will_download: Optional[bool] = None):\n        self.name = name\n        self.will_binge_watch = will_binge_watch\n        self.will_download = will_download\n\ndef apply_premises(show: NetflixShow, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: \"Stranger Things\" is a popular Netflix show.\n    if show.name == \"Stranger Things\":\n        if show.is_popular is None:\n            show.is_popular = True\n            changed = True\n\n    # Premise 2: If a Netflix show is popular, Karen will binge-watch it.\n    if show.is_popular is True and person.will_binge_watch is None:\n        person.will_binge_watch = True\n        changed = True\n\n    # Premise 3: If and only if Karen binge-watches a Netflix show, she will download it.\n    if person.will_binge_watch is True and person.will_download is None:\n        person.will_download = True\n        changed = True\n\n    # Premise 4: Karen does not download \"Black Mirror.\"\n    if show.name == \"Black Mirror\":\n        if person.will_download is True:\n            person.will_download = False\n            changed = True\n\n    # Premise 5: If Karen binge-watches a Netflix show, she will share it with Lisa.\n    if person.will_binge_watch is True and person.will_share_with_lisa is None:\n        person.will_share_with_lisa = True\n        changed = True\n\n    return changed\n\ndef run_inference(show: NetflixShow, person: Person):\n    while apply_premises(show, person):\n        pass\n\ndef check_conclusion(show: NetflixShow, person: Person) -> str:\n    run_inference(show, person)\n    if person.will_share_with_lisa is None:\n        return \"Uncertain\"\n    if person.will_share_with_lisa is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions\n    stranger_things = NetflixShow(name=\"Stranger Things\", is_popular=None)\n    black_mirror = NetflixShow(name=\"Black Mirror\", is_popular=None)\n    person = Person(name=\"Karen\", will_binge_watch=None, will_download=None, will_share_with_lisa=None)\n    return check_conclusion(black_mirror, person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Karen will share 'Black Mirror' with Lisa?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\n\"Stranger Things\" is a popular Netflix show.\nIf a Netflix show is popular, Karen will binge-watch it.\nIf and only if Karen binge-watches a Netflix show, she will download it.\nKaren does not download \"Black Mirror.\"\n\"Black Mirror\" is a Netflix show.\nIf Karen binge-watches a Netflix show, she will share it with Lisa.\n</Premises>\n<Conclusion>\nKaren will share \"Black Mirror\" with Lisa.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Karen will share \"Black Mirror\" with Lisa.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Beijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.",
        "conclusions": "Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.",
        "rationale": "```python\nfrom typing import Optional\n\nclass City:\n    def __init__(self, name: str, is_capital: bool = False, location: Optional[str] = None, hosted_summer_olympics: Optional[bool] = None, hosted_winter_olympics: Optional[bool] = None):\n        self.name = name\n        self.is_capital = is_capital\n        self.location = location\n        self.hosted_summer_olympics = hosted_summer_olympics\n        self.hosted_winter_olympics = hosted_winter_olympics\n\ndef apply_premises(city: City) -> bool:\n    changed = False\n\n    # Premise 1: Beijing is the capital of the People's Republic of China.\n    if city.name == \"Beijing\" and city.is_capital is None:\n        city.is_capital = True\n        changed = True\n\n    # Premise 2: Beijing is the capital city of the world's most populous nation.\n    # This premise does not provide new information about the city's attributes.\n\n    # Premise 3: Beijing is located in Northern China.\n    # This premise does not provide new information about the city's attributes.\n\n    # Premise 4: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n    if city.name == \"Beijing\" and city.hosted_summer_olympics is None:\n        city.hosted_summer_olympics = True\n        changed = True\n\n    # Premise 5: Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\n    # This premise does not directly update the 2008 Olympics, but it confirms the city's hosting capability.\n\n    return changed\n\ndef run_inference(city: City):\n    while apply_premises(city):\n        pass\n\ndef check_conclusion(city: City) -> str:\n    run_inference(city)\n    if city.name == \"Beijing\" and city.hosted_summer_olympics and city.hosted_winter_olympics is None:\n        return \"Uncertain\"\n    elif city.name == \"Beijing\" and city.hosted_summer_olympics and city.hosted_winter_olympics:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    city = City(name=\"Beijing\", hosted_summer_olympics=None, hosted_winter_olympics=None)\n    return check_conclusion(city)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beijing hosted both the 2008 Summer Olympics and the Winter Olympics?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBeijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.\n</Premises>\n<Conclusion>\nBeijing hosted both the 2008 Summer Olympics and the Winter Olympics.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Beijing hosted both the 2008 Summer Olympics and the Winter Olympics.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Beijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.",
        "conclusions": "Beijing is located in southern China.",
        "rationale": "```python\nfrom typing import Optional\n\nclass City:\n    def __init__(self, name: str, capital: Optional[bool] = None, country: Optional[str] = None, location: Optional[str] = None):\n        self.name = name\n        self.capital = capital\n        self.country = country\n        self.location = location\n\nclass China:\n    def __init__(self, north: Optional[bool] = None, south: Optional[bool] = None):\n        self.north = north\n        self.south = south\n\ndef apply_premises(city: City, china: China) -> bool:\n    changed = False\n\n    # Premise 1: Beijing is the capital of the People's Republic of China.\n    if city.name == \"Beijing\" and city.capital is None:\n        city.capital = True\n        changed = True\n\n    # Premise 2: Beijing is the capital city of the world's most populous nation.\n    if city.name == \"Beijing\" and city.country is None:\n        city.country = \"People's Republic of China\"\n        changed = True\n\n    # Premise 3: Beijing is located in Northern China.\n    if city.name == \"Beijing\" and city.location is None:\n        city.location = \"Northern\"\n        changed = True\n\n    # Premise 4: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n    # This premise does not affect the location information.\n\n    # Premise 5: Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\n    # This premise does not affect the location information.\n\n    # Premise 6: Many of Beijing's 91 universities consistently rank among the best universities in the world.\n    # This premise does not affect the location information.\n\n    # Update China's location information based on the capital city's location.\n    if city.location == \"Northern\":\n        if china.north is None:\n            china.north = True\n            changed = True\n        if china.south is None:\n            china.south = False\n            changed = True\n\n    return changed\n\ndef run_inference(city: City, china: China):\n    while apply_premises(city, china):\n        pass\n\ndef check_conclusion(city: City, china: China) -> str:\n    run_inference(city, china)\n    # Conclusion: Beijing is located in southern China.\n    if city.location == \"Southern\":\n        return \"True\"\n    elif city.location == \"Northern\":\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    city = City(name=\"Beijing\", capital=None, country=None, location=None)\n    china = China(north=None, south=None)\n    return check_conclusion(city, china)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beijing is located in southern China?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBeijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.\n</Premises>\n<Conclusion>\nBeijing is located in southern China.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Beijing is located in southern China.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Beijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.",
        "conclusions": "Beijing is the second largest Chinese city.",
        "rationale": "```python\nfrom typing import Optional\n\nclass City:\n    def __init__(self, name: str, is_capital: bool = False, is_largest: bool = False, is_second_largest: bool = False, universities_count: Optional[int] = None):\n        self.name = name\n        self.is_capital = is_capital\n        self.is_largest = is_largest\n        self.is_second_largest = is_second_largest\n        self.universities_count = universities_count\n\ndef apply_premises(city: City) -> bool:\n    changed = False\n\n    # Premise 1: Beijing is the capital of the People's Republic of China.\n    if city.name == \"Beijing\":\n        if city.is_capital is None:\n            city.is_capital = True\n            changed = True\n\n    # Premise 2: Beijing is the capital city of the world's most populous nation.\n    # This is redundant information since it confirms the capital status.\n    if city.name == \"Beijing\":\n        if city.is_capital is None:\n            city.is_capital = True\n            changed = True\n\n    # Premise 3: Beijing is located in Northern China.\n    # No information about city size is provided here.\n\n    # Premise 4: Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\n    # No information about city size is provided here.\n\n    # Premise 5: Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\n    # No information about city size is provided here.\n\n    # Premise 6: Many of Beijing's 91 universities consistently rank among the best universities in the world.\n    # No information about city size is provided here.\n    if city.name == \"Beijing\":\n        if city.universities_count is None:\n            city.universities_count = 91\n            changed = True\n\n    return changed\n\ndef run_inference(city: City):\n    while apply_premises(city):\n        pass\n\ndef check_conclusion(city: City) -> str:\n    run_inference(city)\n    # Conclusion: Beijing is the second largest Chinese city.\n    # No information about the size of Beijing is provided in the premises.\n    return \"Uncertain\"\n\ndef func():\n    city = City(name=\"Beijing\", is_capital=True, universities_count=91)\n    return check_conclusion(city)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beijing is the second largest Chinese city?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBeijing is the capital of the People's Republic of China. \nBeijing is the capital city of the world's most populous nation.\nBeijing is located in Northern China.\nBeijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.\nBeijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics.\nMany of Beijing's 91 universities consistently rank among the best universities in the world.\n</Premises>\n<Conclusion>\nBeijing is the second largest Chinese city.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Beijing is the second largest Chinese city.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.",
        "conclusions": "Marvin is an alien.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Being:\n    def __init__(self, is_from_earth: Optional[bool] = None, is_from_mars: Optional[bool] = None, is_highly_intelligent: bool = False):\n        self.is_from_earth = is_from_earth\n        self.is_from_mars = is_from_mars\n        self.is_highly_intelligent = is_highly_intelligent\n\ndef apply_premises(beings: Being) -> bool:\n    changed = False\n\n    # Premise 1: All aliens are extraterrestrials.\n    # This is a definition and does not change the state directly.\n\n    # Premise 2: If someone is from Mars, then they are an alien.\n    if beings.is_from_mars is True and beings.is_alien is not True:\n        beings.is_alien = True\n        changed = True\n\n    # Premise 3: No extraterrestrials are human.\n    # This does not change the state directly but helps in inference.\n\n    # Premise 4: All highly intelligent beings from Earth are humans.\n    if beings.is_from_earth is True and beings.is_highly_intelligent is True and beings.is_human is not True:\n        beings.is_human = True\n        changed = True\n\n    # Premise 5: Marvin is a highly intelligent being.\n    if beings.name == \"Marvin\" and beings.is_highly_intelligent is not True:\n        beings.is_highly_intelligent = True\n        changed = True\n\n    # Premise 6: Marvin is either from Earth and from Mars, or he is from neither.\n    if beings.name == \"Marvin\" and beings.is_from_earth is None and beings.is_from_mars is None:\n        beings.is_from_earth = False\n        beings.is_from_mars = False\n        changed = True\n\n    # Premise 7: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n    if beings.name == \"Marvin\" and beings.is_from_earth is False and beings.is_alien is not True:\n        beings.is_alien = True\n        changed = True\n\n    return changed\n\ndef run_inference(beings: Being):\n    while apply_premises(beings):\n        pass\n\ndef check_conclusion(beings: Being) -> str:\n    run_inference(beings)\n    if beings.name == \"Marvin\" and beings.is_alien is True:\n        return \"True\"\n    elif beings.name == \"Marvin\" and beings.is_alien is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    beings = Being(is_from_earth=None, is_from_mars=None, is_highly_intelligent=True, name=\"Marvin\")\n    return check_conclusion(beings)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Marvin is an alien?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.\n</Premises>\n<Conclusion>\nMarvin is an alien.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Marvin is an alien.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.",
        "conclusions": "Marvin is neither a human nor from Mars.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Being:\n    def __init__(self,\n                 is_human: Optional[bool] = None,\n                 is_from_mars: Optional[bool] = None,\n                 is_from_earth: Optional[bool] = None,\n                 is_extraterrestrial: Optional[bool] = None,\n                 is_highly_intelligent: Optional[bool] = None):\n        self.is_human = is_human\n        self.is_from_mars = is_from_mars\n        self.is_from_earth = is_from_earth\n        self.is_extraterrestrial = is_extraterrestrial\n        self.is_highly_intelligent = is_highly_intelligent\n\ndef apply_premises(marvin: Being) -> bool:\n    changed = False\n\n    # Premise 1: All aliens are extraterrestrials.\n    # Premise 2: If someone is from Mars, then they are an alien.\n    # Premise 5: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n    if marvin.is_from_earth is None and marvin.is_from_mars is None:\n        marvin.is_extraterrestrial = True\n        changed = True\n    elif marvin.is_from_mars is True:\n        marvin.is_extraterrestrial = True\n        changed = True\n    elif marvin.is_from_earth is False:\n        marvin.is_extraterrestrial = True\n        changed = True\n\n    # Premise 3: No extraterrestrials are human.\n    if marvin.is_extraterrestrial is True and marvin.is_human is not False:\n        marvin.is_human = False\n        changed = True\n\n    # Premise 4: All highly intelligent beings from Earth are humans.\n    if marvin.is_highly_intelligent is True and marvin.is_from_earth is True and marvin.is_human is None:\n        marvin.is_human = True\n        changed = True\n\n    # Premise 6: Marvin is either from Earth and from Mars, or he is from neither.\n    if (marvin.is_from_earth is True and marvin.is_from_mars is True) or (marvin.is_from_earth is False and marvin.is_from_mars is False):\n        changed = True\n\n    return changed\n\ndef run_inference(marvin: Being):\n    while apply_premises(marvin):\n        pass\n\ndef check_conclusion(marvin: Being) -> str:\n    run_inference(marvin)\n    if marvin.is_human is False and marvin.is_from_mars is False:\n        return \"True\"\n    elif marvin.is_human is True or marvin.is_from_mars is True:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    marvin = Being(\n        is_human=None,\n        is_from_mars=None,\n        is_from_earth=None,\n        is_extraterrestrial=None,\n        is_highly_intelligent=True\n    )\n    return check_conclusion(marvin)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Marvin is neither a human nor from Mars?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.\n</Premises>\n<Conclusion>\nMarvin is neither a human nor from Mars.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Marvin is neither a human nor from Mars.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.",
        "conclusions": "If Marvin is not from Mars, then Marvin is a human.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Being:\n    def __init__(self,\n                 is_from_earth: Optional[bool] = None,\n                 is_from_mars: Optional[bool] = None,\n                 is_alien: Optional[bool] = None,\n                 is_extraterrestrial: Optional[bool] = None,\n                 is_highly_intelligent: Optional[bool] = None):\n        self.is_from_earth = is_from_earth\n        self.is_from_mars = is_from_mars\n        self.is_alien = is_alien\n        self.is_extraterrestrial = is_extraterrestrial\n        self.is_highly_intelligent = is_highly_intelligent\n\ndef apply_premises(marvin: Being) -> bool:\n    changed = False\n\n    # Premise 1: All aliens are extraterrestrials.\n    if marvin.is_alien is True and marvin.is_extraterrestrial is not True:\n        marvin.is_extraterrestrial = True\n        changed = True\n\n    # Premise 2: If someone is from Mars, then they are an alien.\n    if marvin.is_from_mars is True and marvin.is_alien is not True:\n        marvin.is_alien = True\n        changed = True\n\n    # Premise 3: No extraterrestrials are human.\n    if marvin.is_extraterrestrial is True and marvin.is_from_earth is not False:\n        marvin.is_from_earth = False\n        changed = True\n\n    # Premise 4: All highly intelligent beings from Earth are humans.\n    if marvin.is_from_earth is True and marvin.is_highly_intelligent is True and marvin.is_from_earth is not True:\n        marvin.is_from_earth = True\n        changed = True\n\n    # Premise 5: Marvin is a highly intelligent being.\n    if marvin.is_highly_intelligent is None:\n        marvin.is_highly_intelligent = True\n        changed = True\n\n    # Premise 6: Marvin is either from Earth and from Mars, or he is from neither.\n    if (marvin.is_from_earth is True and marvin.is_from_mars is True) or (marvin.is_from_earth is False and marvin.is_from_mars is False):\n        changed = True\n\n    # Premise 7: If Marvin is not from Earth, then Marvin is an extraterrestrial.\n    if marvin.is_from_earth is False and marvin.is_extraterrestrial is not True:\n        marvin.is_extraterrestrial = True\n        changed = True\n\n    return changed\n\ndef run_inference(marvin: Being):\n    while apply_premises(marvin):\n        pass\n\ndef check_conclusion(marvin: Being) -> str:\n    run_inference(marvin)\n    if marvin.is_from_mars is False:\n        if marvin.is_from_earth is True:\n            return \"True\"\n        elif marvin.is_from_earth is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    marvin = Being(\n        is_from_earth=None,\n        is_from_mars=None,\n        is_alien=None,\n        is_extraterrestrial=None,\n        is_highly_intelligent=True\n    )\n    return check_conclusion(marvin)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Marvin is not from Mars, then Marvin is a human?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll aliens are extraterrestrials.\nIf someone is from Mars, then they are an alien.\nNo extraterrestrials are human.\nAll highly intelligent beings from Earth are humans.\nMarvin is a highly intelligent being.\nMarvin is either from Earth and from Mars, or he is from neither.\nIf Marvin is not from Earth, then Marvin is an extraterrestrial.\n</Premises>\n<Conclusion>\nIf Marvin is not from Mars, then Marvin is a human.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Marvin is not from Mars, then Marvin is a human.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.",
        "conclusions": "Djokovic is a Grand Slam champion.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str,\n                 is_grand_slam_champion: Optional[bool] = None,\n                 is_oscar_nominated_actor: Optional[bool] = None,\n                 is_professional_tennis_player: Optional[bool] = None,\n                 is_celebrity: Optional[bool] = None,\n                 is_athlete: Optional[bool] = None,\n                 is_well_paid: Optional[bool] = None,\n                 lives_in_tax_haven: Optional[bool] = None):\n        self.name = name\n        self.is_grand_slam_champion = is_grand_slam_champion\n        self.is_oscar_nominated_actor = is_oscar_nominated_actor\n        self.is_professional_tennis_player = is_professional_tennis_player\n        self.is_celebrity = is_celebrity\n        self.is_athlete = is_athlete\n        self.is_well_paid = is_well_paid\n        self.lives_in_tax_haven = lives_in_tax_haven\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\n    if person.name == \"Djokovic\" and person.is_grand_slam_champion is None and person.is_oscar_nominated_actor is None:\n        person.is_grand_slam_champion = True\n        person.is_oscar_nominated_actor = False\n        changed = True\n\n    # Premise 2: Every Grand Slam champion at the mixer is a professional tennis player.\n    if person.name == \"Djokovic\" and person.is_professional_tennis_player is None and person.is_grand_slam_champion is True:\n        person.is_professional_tennis_player = True\n        changed = True\n\n    # Premise 3: All Oscar-nominated actors at the mixer are celebrities.\n    if person.name == \"Djokovic\" and person.is_celebrity is None and person.is_oscar_nominated_actor is True:\n        person.is_celebrity = True\n        changed = True\n\n    # Premise 4: All professional tennis players at the mixer are athletes.\n    if person.name == \"Djokovic\" and person.is_athlete is None and person.is_professional_tennis_player is True:\n        person.is_athlete = True\n        changed = True\n\n    # Premise 5: If a person at the mixer is a celebrity, then they are well paid.\n    if person.name == \"Djokovic\" and person.is_well_paid is None and person.is_celebrity is True:\n        person.is_well_paid = True\n        changed = True\n\n    # Premise 6: If a person at the mixer is an athlete, then they are famous.\n    if person.name == \"Djokovic\" and person.is_famous is None and person.is_athlete is True:\n        person.is_famous = True\n        changed = True\n\n    # Premise 7: All well-paid people at the mixer live in tax havens.\n    if person.name == \"Djokovic\" and person.lives_in_tax_haven is None and person.is_well_paid is True:\n        person.lives_in_tax_haven = True\n        changed = True\n\n    # Premise 8: If Djokovic is a famous athlete, then Djokovic is well-paid.\n    if person.name == \"Djokovic\" and person.is_well_paid is None and person.is_famous is True and person.is_athlete is True:\n        person.is_well_paid = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.is_grand_slam_champion is True:\n        return \"True\"\n    elif person.is_grand_slam_champion is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(name=\"Djokovic\",\n                    is_grand_slam_champion=None,\n                    is_oscar_nominated_actor=None,\n                    is_professional_tennis_player=None,\n                    is_celebrity=None,\n                    is_athlete=None,\n                    is_well_paid=None,\n                    lives_in_tax_haven=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Djokovic is a Grand Slam champion?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nEveryone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\n</Premises>\n<Conclusion>\nDjokovic is a Grand Slam champion.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Djokovic is a Grand Slam champion.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.",
        "conclusions": "Djokovic lives in a tax haven.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_grand_slam_champion: Optional[bool] = None,\n                 is_oscar_nominated_actor: Optional[bool] = None,\n                 is_professional_tennis_player: Optional[bool] = None,\n                 is_celebrity: Optional[bool] = None,\n                 is_athlete: Optional[bool] = None,\n                 is_well_paid: Optional[bool] = None,\n                 is_famous: Optional[bool] = None,\n                 lives_in_tax_haven: Optional[bool] = None):\n        self.is_grand_slam_champion = is_grand_slam_champion\n        self.is_oscar_nominated_actor = is_oscar_nominated_actor\n        self.is_professional_tennis_player = is_professional_tennis_player\n        self.is_celebrity = is_celebrity\n        self.is_athlete = is_athlete\n        self.is_well_paid = is_well_paid\n        self.is_famous = is_famous\n        self.lives_in_tax_haven = lives_in_tax_haven\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\n    if person.is_grand_slam_champion is None and person.is_oscar_nominated_actor is None:\n        person.is_grand_slam_champion = True\n        person.is_oscar_nominated_actor = True\n        changed = True\n\n    # Premise 2: Every Grand Slam champion at the mixer is a professional tennis player.\n    if person.is_grand_slam_champion is True and person.is_professional_tennis_player is not True:\n        person.is_professional_tennis_player = True\n        changed = True\n\n    # Premise 3: All Oscar-nominated actors at the mixer are celebrities.\n    if person.is_oscar_nominated_actor is True and person.is_celebrity is not True:\n        person.is_celebrity = True\n        changed = True\n\n    # Premise 4: All professional tennis players at the mixer are athletes.\n    if person.is_professional_tennis_player is True and person.is_athlete is not True:\n        person.is_athlete = True\n        changed = True\n\n    # Premise 5: If a person at the mixer is a celebrity, then they are well paid.\n    if person.is_celebrity is True and person.is_well_paid is not True:\n        person.is_well_paid = True\n        changed = True\n\n    # Premise 6: If a person at the mixer is an athlete, then they are famous.\n    if person.is_athlete is True and person.is_famous is not True:\n        person.is_famous = True\n        changed = True\n\n    # Premise 7: All well-paid people at the mixer live in tax havens.\n    if person.is_well_paid is True and person.lives_in_tax_haven is not True:\n        person.lives_in_tax_haven = True\n        changed = True\n\n    # Premise 8: Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\n    if person.name == \"Djokovic\":\n        if person.is_famous is True and person.is_athlete is True and person.is_well_paid is not True:\n            person.is_well_paid = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.lives_in_tax_haven is True:\n        return \"True\"\n    elif person.lives_in_tax_haven is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Djokovic\",\n        is_grand_slam_champion=None,\n        is_oscar_nominated_actor=None,\n        is_professional_tennis_player=None,\n        is_celebrity=None,\n        is_athlete=None,\n        is_well_paid=None,\n        is_famous=None,\n        lives_in_tax_haven=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Djokovic lives in a tax haven?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nEveryone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\n</Premises>\n<Conclusion>\nDjokovic lives in a tax haven.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Djokovic lives in a tax haven.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.",
        "conclusions": "Djokovic does not live in a tax haven.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_grand_slam_champion: Optional[bool] = None, is_oscar_nominated_actor: Optional[bool] = None,\n                 is_professional_tennis_player: Optional[bool] = None, is_celebrity: Optional[bool] = None,\n                 is_athlete: Optional[bool] = None, is_well_paid: Optional[bool] = None, lives_in_tax_haven: Optional[bool] = None):\n        self.name = name\n        self.is_grand_slam_champion = is_grand_slam_champion\n        self.is_oscar_nominated_actor = is_oscar_nominated_actor\n        self.is_professional_tennis_player = is_professional_tennis_player\n        self.is_celebrity = is_celebrity\n        self.is_athlete = is_athlete\n        self.is_well_paid = is_well_paid\n        self.lives_in_tax_haven = lives_in_tax_haven\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\n    if person.name == \"Djokovic\" and (person.is_grand_slam_champion is None or person.is_oscar_nominated_actor is None):\n        if person.is_grand_slam_champion is None and person.is_oscar_nominated_actor is None:\n            person.is_grand_slam_champion = True\n            person.is_oscar_nominated_actor = False\n            changed = True\n\n    # Premise 2: Every Grand Slam champion at the mixer is a professional tennis player.\n    if person.is_grand_slam_champion is True and person.is_professional_tennis_player is None:\n        person.is_professional_tennis_player = True\n        changed = True\n\n    # Premise 3: All Oscar-nominated actors at the mixer are celebrities.\n    if person.is_oscar_nominated_actor is True and person.is_celebrity is None:\n        person.is_celebrity = True\n        changed = True\n\n    # Premise 4: All professional tennis players at the mixer are athletes.\n    if person.is_professional_tennis_player is True and person.is_athlete is None:\n        person.is_athlete = True\n        changed = True\n\n    # Premise 5: If a person at the mixer is a celebrity, then they are well paid.\n    if person.is_celebrity is True and person.is_well_paid is None:\n        person.is_well_paid = True\n        changed = True\n\n    # Premise 6: If a person at the mixer is an athlete, then they are famous.\n    if person.is_athlete is True and person.is_well_paid is None:\n        person.is_well_paid = True\n        changed = True\n        if person.is_famous is None:\n            person.is_famous = True\n            changed = True\n\n    # Premise 7: All well-paid people at the mixer live in tax havens.\n    if person.is_well_paid is True and person.lives_in_tax_haven is None:\n        person.lives_in_tax_haven = True\n        changed = True\n\n    # Premise 8: Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\n    if person.name == \"Djokovic\" and person.is_athlete is True and person.is_famous is True and person.is_well_paid is None:\n        person.is_well_paid = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.lives_in_tax_haven is None:\n        return \"Uncertain\"\n    if person.lives_in_tax_haven is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(name=\"Djokovic\",\n                    is_grand_slam_champion=None,\n                    is_oscar_nominated_actor=None,\n                    is_professional_tennis_player=None,\n                    is_celebrity=None,\n                    is_athlete=None,\n                    is_well_paid=None,\n                    lives_in_tax_haven=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Djokovic does not live in a tax haven?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nEveryone at the mixer is a Grand Slam champion or an Oscar-nominated actor.\nEvery Grand Slam champion at the mixer is a professional tennis player.\nAll Oscar-nominated actors at the mixer are celebrities.\nAll professional tennis players at the mixer are athletes.\nIf a person at the mixer is a celebrity, then they are well paid.\nIf a person at the mixer is an athlete, then they are famous.\nAll well-paid people at the mixer live in tax havens.\nDjokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid.\n</Premises>\n<Conclusion>\nDjokovic does not live in a tax haven.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Djokovic does not live in a tax haven.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Diamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.",
        "conclusions": "Roderick Strong leads a professional wrestling stable.",
        "rationale": "from typing import Optional\n\nclass Stable:\n    def __init__(self, name: str, leader: Optional[str] = None, includes: Optional[list] = None):\n        self.name = name\n        self.leader = leader\n        self.includes = includes or []\n\nclass Person:\n    def __init__(self, name: str, leads_stable: Optional[bool] = None):\n        self.name = name\n        self.leads_stable = leads_stable\n\ndef apply_premises(stable: Stable, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Diamond Mine is a professional wrestling stable formed in WWE.\n    if stable.name == \"Diamond Mine\":\n        if stable.leader is None and person.name == \"Roderick Strong\":\n            stable.leader = person.name\n            changed = True\n\n    # Premise 2: Roderick Strong leads Diamond Mine.\n    if person.name == \"Roderick Strong\":\n        if person.leads_stable is None:\n            person.leads_stable = True\n            changed = True\n\n    # Premise 3: Diamond Mine includes the Creed Brothers and Ivy Nile.\n    # No update needed for this premise as it does not affect the leader.\n\n    # Premise 4: Imperium has a feud with Diamond Mine.\n    # No update needed for this premise as it does not affect the leader.\n\n    return changed\n\ndef run_inference(stable: Stable, person: Person):\n    while apply_premises(stable, person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(stable, person)\n    if person.leads_stable is True:\n        return \"True\"\n    elif person.leads_stable is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    stable = Stable(name=\"Diamond Mine\")\n    person = Person(name=\"Roderick Strong\")\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Roderick Strong leads a professional wrestling stable?\", result)",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nDiamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.\n</Premises>\n<Conclusion>\nRoderick Strong leads a professional wrestling stable.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Roderick Strong leads a professional wrestling stable.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Diamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.",
        "conclusions": "Roderick Strong leads the Creed Brothers.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Stable:\n    def __init__(self, name: str, leader: Optional[str] = None, members: Optional[list] = None):\n        self.name = name\n        self.leader = leader\n        self.members = members if members is not None else []\n\nclass Wrestler:\n    def __init__(self, name: str, stable: Optional[Stable] = None):\n        self.name = name\n        self.stable = stable\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Diamond Mine is a professional wrestling stable formed in WWE.\n    diamond_mine = Stable(\"Diamond Mine\")\n\n    # Premise 2: Roderick Strong leads Diamond Mine.\n    diamond_mine.leader = \"Roderick Strong\"\n    changed = True\n\n    # Premise 3: Diamond Mine includes the Creed Brothers and Ivy Nile.\n    diamond_mine.members.extend([\"Creed Brothers\", \"Ivy Nile\"])\n\n    # Premise 4: Imperium has a feud with Diamond Mine.\n    # This premise does not provide information about the leadership of the Creed Brothers.\n    return changed\n\ndef run_inference():\n    apply_premises()\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: Roderick Strong leads the Creed Brothers.\n    # From the premises, we know Roderick Strong leads Diamond Mine, but not necessarily the Creed Brothers.\n    # We need to check if the Creed Brothers are part of Diamond Mine.\n    if diamond_mine.leader == \"Roderick Strong\" and \"Creed Brothers\" in diamond_mine.members:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    global diamond_mine\n    diamond_mine = Stable(\"Diamond Mine\")\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Roderick Strong leads the Creed Brothers?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nDiamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.\n</Premises>\n<Conclusion>\nRoderick Strong leads the Creed Brothers.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Roderick Strong leads the Creed Brothers.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Diamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.",
        "conclusions": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Stable:\n    def __init__(self, name: str, leader: Optional[str] = None, members: Optional[list] = None, feud_with: Optional[str] = None):\n        self.name = name\n        self.leader = leader\n        self.members = members if members else []\n        self.feud_with = feud_with\n\nclass Person:\n    def __init__(self, name: str, in_stable: Optional[bool] = None):\n        self.name = name\n        self.in_stable = in_stable\n\ndef apply_premises():\n    diamond_mine = Stable(name=\"Diamond Mine\", leader=\"Roderick Strong\", members=[\"Creed Brothers\", \"Ivy Nile\"], feud_with=\"Imperium\")\n    imperium = Person(name=\"Imperium\")\n    \n    # No further premises to apply, just set up the initial state.\n\ndef check_conclusion(diamond_mine: Stable, imperium: Person) -> str:\n    # Conclusion: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\n    if diamond_mine.feud_with == \"Imperium\" and \"Ivy Nile\" in diamond_mine.members:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    apply_premises()\n    diamond_mine = Stable(name=\"Diamond Mine\", leader=\"Roderick Strong\", members=[\"Creed Brothers\", \"Ivy Nile\"], feud_with=\"Imperium\")\n    imperium = Person(name=\"Imperium\")\n    return check_conclusion(diamond_mine, imperium)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nDiamond Mine is a professional wrestling stable formed in WWE.\nRoderick Strong leads Diamond Mine.\nDiamond Mine includes the Creed Brothers and Ivy Nile.\nImperium has a feud with Diamond Mine.\n</Premises>\n<Conclusion>\nImperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Symphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.",
        "conclusions": "Beethoven is a composer.",
        "rationale": "```python\nfrom typing import Optional\n\nclass MusicPiece:\n    def __init__(self, name: str, composer: Optional[str] = None, premiered_by: Optional[str] = None):\n        self.name = name\n        self.composer = composer\n        self.premiered_by = premiered_by\n\nclass Composer:\n    def __init__(self, name: str, wrote_music: Optional[bool] = None):\n        self.name = name\n        self.wrote_music = wrote_music\n\nclass Orchestra:\n    def __init__(self, name: str, led_by: Optional[str] = None):\n        self.name = name\n        self.led_by = led_by\n\ndef apply_premises():\n    symphony_no_9 = MusicPiece(\"Symphony No. 9\")\n    beethoven = Composer(\"Beethoven\", None)\n    vienna_music_society = Orchestra(\"Vienna Music Society\")\n\n    # Premise 1: Symphony No. 9 is a music piece.\n    symphony_no_9.composer = \"Beethoven\"\n\n    # Premise 2: Composers write music pieces.\n    # No direct update here, but we will use this premise in inference.\n\n    # Premise 3: Beethoven wrote Symphony No. 9.\n    beethoven.wrote_music = True\n\n    # Premise 4: Vienna Music Society premiered Symphony No. 9.\n    symphony_no_9.premiered_by = \"Vienna Music Society\"\n\n    # Premise 5: Vienna Music Society is an orchestra.\n    vienna_music_society.led_by = \"Beethoven\"\n\n    # Premise 6: Orchestras are led by conductors.\n    # No direct update here, but we will use this premise in inference.\n\ndef check_conclusion() -> str:\n    apply_premises()\n    if beethoven.wrote_music is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    beethoven = Composer(\"Beethoven\")\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beethoven is a composer?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSymphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.\n</Premises>\n<Conclusion>\nBeethoven is a composer.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Beethoven is a composer.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Symphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.",
        "conclusions": "Some orchestras premiered music pieces.",
        "rationale": "```python\nfrom typing import Optional\n\nclass MusicPiece:\n    def __init__(self, name: str, composer: Optional[str] = None):\n        self.name = name\n        self.composer = composer\n\nclass Orchestra:\n    def __init__(self, name: str, conductor: Optional[str] = None, premiered_music: Optional[MusicPiece] = None):\n        self.name = name\n        self.conductor = conductor\n        self.premiered_music = premiered_music\n\nclass Composer:\n    def __init__(self, name: str, wrote_music: Optional[list] = None):\n        self.name = name\n        self.wrote_music = wrote_music\n\ndef apply_premises():\n    # Initialize objects\n    symphony_no_9 = MusicPiece(\"Symphony No. 9\", \"Beethoven\")\n    vienna_music_society = Orchestra(\"Vienna Music Society\", \"Beethoven\", symphony_no_9)\n    beethoven = Composer(\"Beethoven\", [symphony_no_9])\n    \n    # Apply premises\n    # Premise 1: Symphony No. 9 is a music piece.\n    # Premise 2: Composers write music pieces.\n    # Premise 3: Beethoven wrote Symphony No. 9.\n    # Premise 4: Vienna Music Society premiered Symphony No. 9.\n    # Premise 5: Vienna Music Society is an orchestra.\n    # Premise 6: Beethoven leads the Vienna Music Society.\n    # Premise 7: Orchestras are led by conductors.\n    # No updates are needed for these premises as they are setting up the initial state.\n\ndef check_conclusion():\n    apply_premises()\n    # Conclusion: Some orchestras premiered music pieces.\n    # Check if any orchestra has premiered a music piece.\n    for orchestra in [vienna_music_society]:  # Only Vienna Music Society is known to have premiered a music piece.\n        if orchestra.premiered_music is not None:\n            return \"True\"\n    return \"False\" if vienna_music_society.premiered_music is None else \"Uncertain\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some orchestras premiered music pieces?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSymphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.\n</Premises>\n<Conclusion>\nSome orchestras premiered music pieces.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Some orchestras premiered music pieces.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Symphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.",
        "conclusions": "Beethoven is not a conductor.",
        "rationale": "```python\nfrom typing import Optional\n\nclass MusicPiece:\n    def __init__(self, name: str, composer: Optional[str] = None, premiered_by: Optional[str] = None):\n        self.name = name\n        self.composer = composer\n        self.premiered_by = premiered_by\n\nclass Composer:\n    def __init__(self, name: str, wrote_music: Optional[MusicPiece] = None):\n        self.name = name\n        self.wrote_music = wrote_music\n\nclass Orchestra:\n    def __init__(self, name: str, led_by: Optional[str] = None):\n        self.name = name\n        self.led_by = led_by\n\ndef apply_premises() -> bool:\n    changed = False\n\n    symphony_no_9 = MusicPiece(\"Symphony No. 9\")\n    beethoven = Composer(\"Beethoven\", wrote_music=symphony_no_9)\n    vienna_music_society = Orchestra(\"Vienna Music Society\")\n\n    # Premise 1: Symphony No. 9 is a music piece.\n    if symphony_no_9.composer is None:\n        symphony_no_9.composer = \"Beethoven\"\n        changed = True\n\n    # Premise 2: Composers write music pieces.\n    # This is already encoded in the MusicPiece composer field.\n\n    # Premise 3: Beethoven wrote Symphony No. 9.\n    # This is already encoded in the MusicPiece composer field.\n\n    # Premise 4: Vienna Music Society premiered Symphony No. 9.\n    if vienna_music_society.premiered_by is None:\n        vienna_music_society.premiered_by = \"Beethoven\"\n        changed = True\n\n    # Premise 5: Vienna Music Society is an orchestra.\n    # This is already encoded in the Orchestra class.\n\n    # Premise 6: Beethoven leads the Vienna Music Society.\n    if vienna_music_society.led_by is None:\n        vienna_music_society.led_by = \"Beethoven\"\n        changed = True\n\n    # Premise 7: Orchestras are led by conductors.\n    # This means that if an orchestra is led by someone, that someone is a conductor.\n    if vienna_music_society.led_by is not None and vienna_music_society.led_by == \"Beethoven\":\n        beethoven.wrote_music = None  # If Beethoven leads the orchestra, he is a conductor.\n        changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    if beethoven.wrote_music is not None:\n        return \"False\"  # Beethoven is a conductor\n    else:\n        return \"True\"  # Beethoven is not a conductor\n\ndef func():\n    run_inference()\n    result = check_conclusion()\n    return result\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Beethoven is not a conductor?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSymphony No. 9 is a music piece.\nComposers write music pieces.\nBeethoven wrote Symphony No. 9.\nVienna Music Society premiered Symphony No. 9.\nVienna Music Society is an orchestra.\nBeethoven leads the Vienna Music Society.\nOrchestras are led by conductors.\n</Premises>\n<Conclusion>\nBeethoven is not a conductor.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Beethoven is not a conductor.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.",
        "conclusions": "A design by Max is a brutalist building.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Design:\n    def __init__(self, is_zaha: Optional[bool] = None,\n                 is_brutalist: Optional[bool] = None,\n                 is_interesting: Optional[bool] = None,\n                 is_evocative: Optional[bool] = None,\n                 is_dreamy: Optional[bool] = None):\n        self.is_zaha = is_zaha\n        self.is_brutalist = is_brutalist\n        self.is_interesting = is_interesting\n        self.is_evocative = is_evocative\n        self.is_dreamy = is_dreamy\n\ndef apply_premises(design: Design) -> bool:\n    changed = False\n\n    # Premise 1: All of Zaha Hadid's design styles that Max adores have interesting geometries.\n    if design.is_zaha is True and design.is_interesting is None:\n        design.is_interesting = True\n        changed = True\n\n    # Premise 2: No brutalist buildings that Max adores have interesting geometries.\n    if design.is_brutalist is True and design.is_interesting is not False:\n        design.is_interesting = False\n        changed = True\n\n    # Premise 3: Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style.\n    if design.is_zaha is None and design.is_brutalist is None:\n        design.is_zaha = True\n        design.is_brutalist = False\n        changed = True\n\n    # Premise 4: All of Kelly Wearstler's design styles that Max adores are evocative.\n    if design.is_zaha is False and design.is_evocative is None:\n        design.is_evocative = True\n        changed = True\n\n    # Premise 5: All of Kelly Wearstler's design styles that Max adores are dreamy.\n    if design.is_zaha is False and design.is_dreamy is None:\n        design.is_dreamy = True\n        changed = True\n\n    # Premise 6: If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n    if design.is_interesting is True and design.is_brutalist is None and design.is_evocative is None:\n        design.is_brutalist = True\n        design.is_evocative = True\n        changed = True\n\n    return changed\n\ndef run_inference(design: Design):\n    while apply_premises(design):\n        pass\n\ndef check_conclusion(design: Design) -> str:\n    run_inference(design)\n    if design.is_brutalist is True:\n        return \"True\"\n    elif design.is_brutalist is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    design = Design(is_zaha=None, is_brutalist=None, is_interesting=None, is_evocative=None, is_dreamy=None)\n    return check_conclusion(design)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A design by Max is a brutalist building?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n</Premises>\n<Conclusion>\nA design by Max is a brutalist building.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? A design by Max is a brutalist building.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.",
        "conclusions": "A design by Max is evocative and dreamy.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Design:\n    def __init__(self, zaha_adore: Optional[bool] = None, brutalist: Optional[bool] = None, evocative: Optional[bool] = None, dreamy: Optional[bool] = None):\n        self.zaha_adore = zaha_adore\n        self.brutalist = brutalist\n        self.evocative = evocative\n        self.dreamy = dreamy\n\ndef apply_premises(design: Design) -> bool:\n    changed = False\n\n    # Premise 1: All of Zaha Hadid's design styles that Max adores have interesting geometries.\n    if design.zaha_adore is True:\n        design.evocative = None  # Cannot directly infer evocative from Zaha Hadid's styles\n        design.dreamy = None     # Cannot directly infer dreamy from Zaha Hadid's styles\n        changed = True\n\n    # Premise 2: No brutalist buildings that Max adores have interesting geometries.\n    if design.brutalist is True:\n        design.evocative = False\n        design.dreamy = False\n        changed = True\n\n    # Premise 3: Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style.\n    if design.zaha_adore is None and design.kelly_adore is None:\n        design.zaha_adore = True\n        design.kelly_adore = True\n        changed = True\n\n    # Premise 4: All of Kelly Wearstler's design styles that Max adores are evocative.\n    if design.kelly_adore is True and design.evocative is not True:\n        design.evocative = True\n        changed = True\n\n    # Premise 5: All of Kelly Wearstler's design styles that Max adores are dreamy.\n    if design.kelly_adore is True and design.dreamy is not True:\n        design.dreamy = True\n        changed = True\n\n    # Premise 6: If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n    if design.evocative is True and design.dreamy is True:\n        changed = True\n\n    return changed\n\ndef run_inference(design: Design):\n    while apply_premises(design):\n        pass\n\ndef check_conclusion(design: Design) -> str:\n    run_inference(design)\n    if design.evocative is True and design.dreamy is True:\n        return \"True\"\n    elif design.evocative is None or design.dreamy is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    design = Design()\n    return check_conclusion(design)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A design by Max is evocative and dreamy?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n</Premises>\n<Conclusion>\nA design by Max is evocative and dreamy.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? A design by Max is evocative and dreamy.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.",
        "conclusions": "A design by Max is either evocative or dreamy.",
        "rationale": "```python\nfrom typing import Optional\n\nclass DesignStyle:\n    def __init__(self,\n                 is_zaha_hadid: Optional[bool] = None,\n                 is_brutalist: Optional[bool] = None,\n                 is_interesting_geometry: Optional[bool] = None,\n                 is_evocative: Optional[bool] = None,\n                 is_dreamy: Optional[bool] = None):\n        self.is_zaha_hadid = is_zaha_hadid\n        self.is_brutalist = is_brutalist\n        self.is_interesting_geometry = is_interesting_geometry\n        self.is_evocative = is_evocative\n        self.is_dreamy = is_dreamy\n\ndef apply_premises(style: DesignStyle) -> bool:\n    changed = False\n\n    # Premise 1: All of Zaha Hadid's design styles that Max adores have interesting geometries.\n    if style.is_zaha_hadid is True and style.is_interesting_geometry is None:\n        style.is_interesting_geometry = True\n        changed = True\n\n    # Premise 2: No brutalist buildings that Max adores have interesting geometries.\n    if style.is_brutalist is True and style.is_interesting_geometry is True:\n        style.is_interesting_geometry = False\n        changed = True\n\n    # Premise 3: Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style.\n    # This is a tautology and doesn't change any value, so no update here.\n\n    # Premise 4: All of Kelly Wearstler's design styles that Max adores are evocative.\n    if style.is_zaha_hadid is False and style.is_evocative is None:\n        style.is_evocative = True\n        changed = True\n\n    # Premise 5: All of Kelly Wearstler's design styles that Max adores are dreamy.\n    if style.is_zaha_hadid is False and style.is_dreamy is None:\n        style.is_dreamy = True\n        changed = True\n\n    # Premise 6: If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n    if style.is_interesting_geometry is True:\n        if style.is_brutalist is None:\n            style.is_brutalist = True\n            changed = True\n        if style.is_evocative is None:\n            style.is_evocative = True\n            changed = True\n    return changed\n\ndef run_inference(style: DesignStyle):\n    while apply_premises(style):\n        pass\n\ndef check_conclusion(style: DesignStyle) -> str:\n    run_inference(style)\n    if style.is_evocative is None or style.is_dreamy is None:\n        return \"Uncertain\"\n    if style.is_evocative is True or style.is_dreamy is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    style = DesignStyle(\n        is_zaha_hadid=None,\n        is_brutalist=None,\n        is_interesting_geometry=None,\n        is_evocative=None,\n        is_dreamy=None\n    )\n    return check_conclusion(style)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A design by Max is either evocative or dreamy?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll of Zaha Hadid's design styles that Max adores have interesting geometries.\nNo brutalist buildings that Max adores have interesting geometries.\nEvery style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. \nAll of Kelly Wearstler's design styles that Max adores are evocative.\nAll of Kelly Wearstler's design styles that Max adores are dreamy.\nIf a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative.\n</Premises>\n<Conclusion>\nA design by Max is either evocative or dreamy.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? A design by Max is either evocative or dreamy.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.",
        "conclusions": "Coco Gauff is among the most active Grand-Slam players.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Player:\n    def __init__(self,\n                 gender: Optional[str] = None,\n                 is_at_roland_garros_2022: Optional[bool] = None,\n                 lost_to_iga: Optional[bool] = None,\n                 lost_to_rafael: Optional[bool] = None,\n                 wta_ranked: Optional[bool] = None):\n        self.gender = gender\n        self.is_at_roland_garros_2022 = is_at_roland_garros_2022\n        self.lost_to_iga = lost_to_iga\n        self.lost_to_rafael = lost_to_rafael\n        self.wta_ranked = wta_ranked\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: If someone is ranked highly by the WTA, then they are one of the most active players in major tennis.\n    if player.wta_ranked is True:\n        player.is_most_active = True\n        changed = True\n\n    # Premise 2: Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the WTA.\n    if player.lost_to_iga is True and player.wta_ranked is not True:\n        player.wta_ranked = True\n        changed = True\n\n    # Premise 3: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n    if player.gender == \"female\" and player.is_at_roland_garros_2022 is True and player.lost_to_iga is not True:\n        player.lost_to_iga = True\n        changed = True\n\n    # Premise 4: All tennis players at Roland Garros 2022 are either female or male.\n    # This is a constraint and does not directly update the state but ensures consistency.\n\n    # Premise 5: All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\n    if player.gender == \"male\" and player.is_at_roland_garros_2022 is True and player.lost_to_rafael is not True:\n        player.lost_to_rafael = True\n        changed = True\n\n    # Premise 6: If Coco Gauff is ranked highly by the WTA or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n    if (player.gender == \"male\" and player.is_at_roland_garros_2022 is True and\n        (player.wta_ranked is True or player.lost_to_rafael is True)):\n        player.gender = \"female\"\n        changed = True\n\n    # Premise 7: Coco Gauff is at Roland Garros 2022.\n    if player.is_at_roland_garros_2022 is None and player.name == \"Coco Gauff\":\n        player.is_at_roland_garros_2022 = True\n        changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.is_most_active is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions:\n    # Coco Gauff is at Roland Garros 2022.\n    player = Player(\n        gender=None,\n        is_at_roland_garros_2022=None,\n        lost_to_iga=None,\n        lost_to_rafael=None,\n        wta_ranked=None\n    )\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Coco Gauff is among the most active Grand-Slam players?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.\n</Premises>\n<Conclusion>\nCoco Gauff is among the most active Grand-Slam players.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Coco Gauff is among the most active Grand-Slam players.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.",
        "conclusions": "Coco Gauff has lost to Rafael Nadal.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self, gender: Optional[str] = None, lost_to_nadal: Optional[bool] = None, lost_to_swiatek: Optional[bool] = None, ranked_high: Optional[bool] = None):\n        self.gender = gender  # \"female\" or \"male\"\n        self.lost_to_nadal = lost_to_nadal  # True or False\n        self.lost_to_swiatek = lost_to_swiatek  # True or False\n        self.ranked_high = ranked_high  # True or False\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis.\n    if player.ranked_high is True:\n        player.lost_to_swiatek = True  # Everyone who is ranked highly lost to Iga \u015awi\u0105tek\n        changed = True\n\n    # Premise 2: Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\n    if player.lost_to_swiatek is True and player.ranked_high is not True:\n        player.ranked_high = True\n        changed = True\n\n    # Premise 3: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n    if player.gender == \"female\" and player.lost_to_swiatek is not True:\n        player.lost_to_swiatek = True\n        changed = True\n\n    # Premise 4: All tennis players at Roland Garros 2022 are either female or male.\n    # This is a tautology and does not change any state.\n\n    # Premise 5: All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\n    if player.gender == \"male\" and player.lost_to_nadal is not True:\n        player.lost_to_nadal = True\n        changed = True\n\n    # Premise 6: If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n    if player.name == \"Coco Gauff\":\n        if (player.ranked_high is True or player.lost_to_nadal is True) and player.gender == \"male\":\n            player.gender = \"female\"\n            changed = True\n\n    # Initial conditions:\n    player.name = \"Coco Gauff\"\n    player.gender = \"female\"  # Given in the premises\n    player.lost_to_swiatek = None  # Unknown\n    player.ranked_high = None  # Unknown\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.name == \"Coco Gauff\" and player.lost_to_nadal is True:\n        return \"True\"\n    elif player.name == \"Coco Gauff\" and player.lost_to_nadal is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(name=\"Coco Gauff\", gender=\"female\")\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Coco Gauff has lost to Rafael Nadal?\", result)",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.\n</Premises>\n<Conclusion>\nCoco Gauff has lost to Rafael Nadal.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Coco Gauff has lost to Rafael Nadal.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.",
        "conclusions": "Coco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis.",
        "rationale": "from typing import Optional\n\nclass Player:\n    def __init__(self, gender: Optional[str] = None, lost_to_iga: Optional[bool] = None, ranked_high_wta: Optional[bool] = None, lost_to_rnadal: Optional[bool] = None):\n        self.gender = gender\n        self.lost_to_iga = lost_to_iga\n        self.ranked_high_wta = ranked_high_wta\n        self.lost_to_rnadal = lost_to_rnadal\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis.\n    if player.ranked_high_wta is True and player.lost_to_iga is None:\n        player.lost_to_iga = False\n        changed = True\n\n    # Premise 2: Everyone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\n    if player.lost_to_iga is True and player.ranked_high_wta is not True:\n        player.ranked_high_wta = True\n        changed = True\n\n    # Premise 3: All female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\n    if player.gender == \"female\" and player.lost_to_iga is not True:\n        player.lost_to_iga = True\n        changed = True\n\n    # Premise 4: All tennis players at Roland Garros 2022 are either female or male.\n    # No action needed for this premise as it sets the initial state.\n\n    # Premise 5: All male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\n    if player.gender == \"male\" and player.lost_to_rnadal is None:\n        player.lost_to_rnadal = True\n        changed = True\n\n    # Premise 6: If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\n    if (player.ranked_high_wta is True or player.lost_to_rnadal is True) and player.gender == \"male\":\n        player.gender = \"female\"\n        changed = True\n\n    # Premise 7: Coco Gauff is at Roland Garros 2022.\n    # No action needed for this premise as it sets the initial state.\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.ranked_high_wta is not None and player.lost_to_iga is not None:\n        if player.ranked_high_wta and player.lost_to_iga:\n            return \"False\"\n        else:\n            return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(gender=\"female\", lost_to_iga=None, ranked_high_wta=None, lost_to_rnadal=None)\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Coco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis?\", result)",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. \nEveryone who lost to Iga \u015awi\u0105tek at Roland Garros 2022 is ranked highly by the Women's Tennis Association.\nAll female tennis players at Roland Garros 2022 lost to Iga \u015awi\u0105tek.\nAll tennis players at Roland Garros 2022 are either female or male.\nAll male tennis players at Roland Garros in 2022 lost to Rafael Nadal.\nIf Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.\nCoco Gauff is at Roland Garros 2022.\n</Premises>\n<Conclusion>\nCoco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Coco Gauff is not both a player who lost to Iga \u015awi\u0105tek at Roland Garros 2022 and one of the most active players in major tennis.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All cats are mammals.\nSome pets are not mammals.",
        "conclusions": "No pets are cats.",
        "rationale": "from typing import Optional\n\nclass Animal:\n    def __init__(self, is_cat: Optional[bool] = None, is_mammal: Optional[bool] = None, is_pet: Optional[bool] = None):\n        self.is_cat = is_cat\n        self.is_mammal = is_mammal\n        self.is_pet = is_pet\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: All cats are mammals.\n    if animal.is_cat is True and animal.is_mammal is not True:\n        animal.is_mammal = True\n        changed = True\n\n    # Premise 2: Some pets are not mammals.\n    # This means there is at least one pet that is not a mammal.\n    # However, it does not provide direct information about cats and pets relationship.\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: No pets are cats.\n    # If a pet is a cat, then it should be a mammal. But premise 2 does not provide enough information\n    # to determine if a pet can be a cat or not.\n    if animal.is_cat is True and animal.is_pet is True:\n        return \"False\"\n    elif animal.is_cat is False and animal.is_pet is False:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    animal = Animal(\n        is_cat=None,\n        is_mammal=None,\n        is_pet=None\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No pets are cats?\", result)",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll cats are mammals.\nSome pets are not mammals.\n</Premises>\n<Conclusion>\nNo pets are cats.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? No pets are cats.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "There are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation have summer as their favorite season.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's. \nJames wants to have a long vacation.",
        "conclusions": "James's favorite season is summer.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Season:\n    def __init__(self, name: str, is_long_vacation_fav: Optional[bool] = None, is_fav: Optional[bool] = None):\n        self.name = name\n        self.is_long_vacation_fav = is_long_vacation_fav\n        self.is_fav = is_fav\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 fav_season: Optional[Season] = None,\n                 wants_long_vacation: Optional[bool] = None):\n        self.name = name\n        self.fav_season = fav_season\n        self.wants_long_vacation = wants_long_vacation\n\ndef apply_premises(persons: list[Person]) -> bool:\n    changed = False\n\n    # Premise 1: There are four seasons in a year: Spring, Summer, Fall, and Winter.\n    seasons = [\"Spring\", \"Summer\", \"Fall\", \"Winter\"]\n\n    # Premise 2: All students who want to have a long vacation have summer as their favorite season.\n    for person in persons:\n        if person.wants_long_vacation is True and person.fav_season is None:\n            person.fav_season = Season(\"Summer\")\n            changed = True\n\n    # Premise 3: Emma's favorite season is summer.\n    for person in persons:\n        if person.name == \"Emma\" and person.fav_season is None:\n            person.fav_season = Season(\"Summer\")\n            changed = True\n\n    # Premise 4: Mia's favorite season is not the same as Emma's.\n    for person in persons:\n        if person.name == \"Mia\" and person.fav_season is None:\n            for season in seasons:\n                if season != \"Summer\":\n                    person.fav_season = Season(season)\n                    changed = True\n                    break\n\n    return changed\n\ndef run_inference(persons: list[Person]):\n    while apply_premises(persons):\n        pass\n\ndef check_conclusion(persons: list[Person]) -> str:\n    run_inference(persons)\n    for person in persons:\n        if person.name == \"James\" and person.fav_season is not None and person.fav_season.name == \"Summer\":\n            return \"True\"\n        elif person.name == \"James\" and person.fav_season is None:\n            return \"Uncertain\"\n    return \"False\"\n\ndef func():\n    # Initial conditions:\n    emma = Person(name=\"Emma\", fav_season=None)\n    mia = Person(name=\"Mia\", fav_season=None)\n    james = Person(name=\"James\", wants_long_vacation=True, fav_season=None)\n    persons = [emma, mia, james]\n    return check_conclusion(persons)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James's favorite season is summer?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation have summer as their favorite season.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's. \nJames wants to have a long vacation.\n</Premises>\n<Conclusion>\nJames's favorite season is summer.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? James's favorite season is summer.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "There are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation have summer as their favorite season.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's. \nJames wants to have a long vacation.",
        "conclusions": "Mia's favorite season is spring.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Season:\n    def __init__(self, name: str, is_long_vacation_fav: Optional[bool] = None, is_favorite: Optional[str] = None):\n        self.name = name\n        self.is_long_vacation_fav = is_long_vacation_fav\n        self.is_favorite = is_favorite\n\nclass Student:\n    def __init__(self, name: str, favorite_season: Optional[str] = None, wants_long_vacation: Optional[bool] = None):\n        self.name = name\n        self.favorite_season = favorite_season\n        self.wants_long_vacation = wants_long_vacation\n\ndef apply_premises(students: list[Student], seasons: list[Season]) -> bool:\n    changed = False\n\n    # Initialize seasons\n    spring = Season(\"Spring\")\n    summer = Season(\"Summer\")\n    fall = Season(\"Fall\")\n    winter = Season(\"Winter\")\n\n    # Emma's favorite season is summer\n    if students[0].name == \"Emma\":\n        if students[0].favorite_season is None:\n            students[0].favorite_season = \"Summer\"\n            changed = True\n\n    # All students who want to have a long vacation have summer as their favorite season\n    for student in students:\n        if student.wants_long_vacation and student.favorite_season is None:\n            student.favorite_season = \"Summer\"\n            changed = True\n\n    # Mia's favorite season is not the same as Emma's\n    if students[1].name == \"Mia\":\n        if students[1].favorite_season is None:\n            students[1].favorite_season = \"Spring\"  # This is a hypothesis to test the conclusion\n            changed = True\n\n    # James wants to have a long vacation\n    if students[2].name == \"James\":\n        if students[2].wants_long_vacation is None:\n            students[2].wants_long_vacation = True\n            changed = True\n\n    return changed\n\ndef run_inference(students: list[Student], seasons: list[Season]):\n    while apply_premises(students, seasons):\n        pass\n\ndef check_conclusion(students: list[Student]) -> str:\n    run_inference(students, [])\n    for student in students:\n        if student.name == \"Mia\":\n            if student.favorite_season == \"Spring\":\n                return \"True\"\n            elif student.favorite_season is None:\n                return \"Uncertain\"\n    return \"False\"\n\ndef func():\n    # Initial conditions\n    students = [\n        Student(name=\"Emma\", favorite_season=None),\n        Student(name=\"Mia\", favorite_season=None),\n        Student(name=\"James\", wants_long_vacation=None)\n    ]\n    return check_conclusion(students)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Mia's favorite season is spring?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThere are four seasons in a year: Spring, Summer, Fall, and Winter.\nAll students who want to have a long vacation have summer as their favorite season.\nEmma's favorite season is summer.\nMia's favorite season is not the same as Emma's. \nJames wants to have a long vacation.\n</Premises>\n<Conclusion>\nMia's favorite season is spring.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Mia's favorite season is spring.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.",
        "conclusions": "1984 is printed text.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Media:\n    def __init__(self, is_digital: Optional[bool] = None, is_analog: Optional[bool] = None):\n        self.is_digital = is_digital\n        self.is_analog = is_analog\n\nclass Object:\n    def __init__(self, is_hardcover_book: Optional[bool] = None, is_printed_text: Optional[bool] = None):\n        self.is_hardcover_book = is_hardcover_book\n        self.is_printed_text = is_printed_text\n\ndef apply_premises(media: Media, object_: Object) -> bool:\n    changed = False\n\n    # Premise 1: No digital media are analog.\n    if media.is_digital is True and media.is_analog is not False:\n        media.is_analog = False\n        changed = True\n\n    # Premise 2: Every printed text is analog media.\n    if object_.is_printed_text is True and media.is_analog is not True:\n        media.is_analog = True\n        changed = True\n\n    # Premise 3: All streaming services are digital media.\n    # This premise is about the nature of streaming services, not directly about 1984.\n    # We will use it in the inference process.\n\n    # Premise 4: If an object is a hardcover book, then it is printed text.\n    if object_.is_hardcover_book is True and object_.is_printed_text is not True:\n        object_.is_printed_text = True\n        changed = True\n\n    # Premise 5: If 1984 is a streaming service, then 1984 is a hardcover book.\n    # We need to check this condition and update the state accordingly.\n    if object_.is_hardcover_book is None and object_.is_printed_text is None:\n        if media.is_digital is True:  # Assuming 1984 is a streaming service\n            object_.is_hardcover_book = True\n            object_.is_printed_text = True\n            changed = True\n\n    return changed\n\ndef run_inference(media: Media, object_: Object):\n    while apply_premises(media, object_):\n        pass\n\ndef check_conclusion(object_: Object) -> str:\n    run_inference(media, object_)\n    if object_.is_printed_text is True:\n        return \"True\"\n    elif object_.is_printed_text is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions\n    media = Media(is_digital=None, is_analog=None)\n    object_ = Object(is_hardcover_book=None, is_printed_text=None)\n    return check_conclusion(object_)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Is 1984 printed text?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.\n</Premises>\n<Conclusion>\n1984 is printed text.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? 1984 is printed text.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.",
        "conclusions": "1984 is a streaming service.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Media:\n    def __init__(self, is_digital: Optional[bool] = None, is_analog: Optional[bool] = None):\n        self.is_digital = is_digital\n        self.is_analog = is_analog\n\nclass Text:\n    def __init__(self, is_printed: Optional[bool] = None, is_hardcover: Optional[bool] = None):\n        self.is_printed = is_printed\n        self.is_hardcover = is_hardcover\n\nclass Book(Text):\n    pass\n\ndef apply_premises(media: Media, text: Text, book: Optional[Book] = None) -> bool:\n    changed = False\n\n    # Premise 1: No digital media are analog.\n    if media.is_digital is True and media.is_analog is not False:\n        media.is_analog = False\n        changed = True\n\n    # Premise 2: Every printed text is analog media.\n    if text.is_printed is True and media.is_analog is not True:\n        media.is_analog = True\n        changed = True\n\n    # Premise 3: All streaming services are digital media.\n    if book is not None and book.is_hardcover is False and media.is_digital is not True:\n        media.is_digital = True\n        changed = True\n\n    # Premise 4: If an object is a hardcover book, then it is printed text.\n    if book is not None and book.is_hardcover is True and text.is_printed is not True:\n        text.is_printed = True\n        changed = True\n\n    # Premise 5: If 1984 is a streaming service, then 1984 is a hardcover book.\n    # We will use this premise in the inference to check the conclusion.\n    if book is not None and book.is_hardcover is True and book.is_printed is not True:\n        text.is_printed = True\n        changed = True\n\n    return changed\n\ndef run_inference(media: Media, text: Text, book: Optional[Book] = None):\n    while apply_premises(media, text, book):\n        pass\n\ndef check_conclusion(media: Media, text: Text, book: Optional[Book] = None) -> str:\n    run_inference(media, text, book)\n    if book is not None and book.is_hardcover is True and media.is_digital is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    media = Media(is_digital=None, is_analog=None)\n    text = Text(is_printed=None, is_hardcover=None)\n    book = Book(is_hardcover=None, is_printed=None)\n    return check_conclusion(media, text, book)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 1984 is a streaming service?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.\n</Premises>\n<Conclusion>\n1984 is a streaming service.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? 1984 is a streaming service.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.",
        "conclusions": "1984 is not a streaming service.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Medium:\n    def __init__(self, is_digital: Optional[bool] = None, is_analog: Optional[bool] = None):\n        self.is_digital = is_digital\n        self.is_analog = is_analog\n\nclass Text:\n    def __init__(self, is_printed: Optional[bool] = None, is_hardcover: Optional[bool] = None):\n        self.is_printed = is_printed\n        self.is_hardcover = is_hardcover\n\nclass Object:\n    def __init__(self, name: str, is_streaming_service: Optional[bool] = None, is_hardcover: Optional[bool] = None):\n        self.name = name\n        self.is_streaming_service = is_streaming_service\n        self.is_hardcover = is_hardcover\n\ndef apply_premises(object_: Object, text: Text, medium: Medium) -> bool:\n    changed = False\n\n    # Premise 1: No digital media are analog.\n    if medium.is_digital is True and medium.is_analog is not False:\n        medium.is_analog = False\n        changed = True\n\n    # Premise 2: Every printed text is analog media.\n    if text.is_printed is True and medium.is_analog is not True:\n        medium.is_analog = True\n        changed = True\n\n    # Premise 3: All streaming services are digital media.\n    if object_.is_streaming_service is True and medium.is_digital is not True:\n        medium.is_digital = True\n        changed = True\n\n    # Premise 4: If an object is a hardcover book, then it is printed text.\n    if object_.is_hardcover is True and text.is_printed is not True:\n        text.is_printed = True\n        changed = True\n\n    # Premise 5: If 1984 is a streaming service, then 1984 is a hardcover book.\n    if object_.name == \"1984\" and object_.is_streaming_service is True and object_.is_hardcover is not True:\n        object_.is_hardcover = True\n        changed = True\n\n    return changed\n\ndef run_inference(object_: Object, text: Text, medium: Medium):\n    while apply_premises(object_, text, medium):\n        pass\n\ndef check_conclusion(object_: Object) -> str:\n    run_inference(object_, Text(), Medium())\n    if object_.is_streaming_service is False:\n        return \"True\"\n    elif object_.is_streaming_service is True:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    object_ = Object(name=\"1984\", is_streaming_service=None, is_hardcover=None)\n    return check_conclusion(object_)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 1984 is not a streaming service?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo digital media are analog.\nEvery printed text is analog media.\nAll streaming services are digital media.\nIf an object is a hardcover book, then it is printed text.\nIf 1984 is a streaming service, then 1984 is a hardcover book.\n</Premises>\n<Conclusion>\n1984 is not a streaming service.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? 1984 is not a streaming service.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.",
        "conclusions": "Basque is a Romance language.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Language:\n    def __init__(self, name: str, is_romance: Optional[bool] = None, is_indo_european: Optional[bool] = None, is_related_to_spanish: Optional[bool] = None, is_related_to_german: Optional[bool] = None, is_related_to_basque: Optional[bool] = None):\n        self.name = name\n        self.is_romance = is_romance\n        self.is_indo_european = is_indo_european\n        self.is_related_to_spanish = is_related_to_spanish\n        self.is_related_to_german = is_related_to_german\n        self.is_related_to_basque = is_related_to_basque\n\ndef apply_premises(languages: dict) -> bool:\n    changed = False\n\n    # Premise 1: All Romance languages are Indo-European languages.\n    if languages[\"French\"].is_indo_european is None:\n        languages[\"French\"].is_indo_european = True\n        changed = True\n    if languages[\"Spanish\"].is_indo_european is None:\n        languages[\"Spanish\"].is_indo_european = True\n        changed = True\n\n    # Premise 2: Romance languages are a language family.\n    if languages[\"French\"].is_romance is True and languages[\"French\"].is_related_to_spanish is None:\n        languages[\"French\"].is_related_to_spanish = True\n        changed = True\n    if languages[\"Spanish\"].is_romance is True and languages[\"Spanish\"].is_related_to_spanish is None:\n        languages[\"Spanish\"].is_related_to_spanish = True\n        changed = True\n\n    # Premise 3: All languages within a language family are related to each other.\n    if languages[\"French\"].is_related_to_spanish is True and languages[\"Spanish\"].is_related_to_german is None:\n        languages[\"Spanish\"].is_related_to_german = True\n        changed = True\n    if languages[\"Spanish\"].is_related_to_spanish is True and languages[\"French\"].is_related_to_german is None:\n        languages[\"French\"].is_related_to_german = True\n        changed = True\n\n    # Premise 4: French and Spanish are both Romance languages.\n    if languages[\"French\"].is_romance is None:\n        languages[\"French\"].is_romance = True\n        changed = True\n    if languages[\"Spanish\"].is_romance is None:\n        languages[\"Spanish\"].is_romance = True\n        changed = True\n\n    # Premise 5: German is related to Spanish.\n    if languages[\"Spanish\"].is_related_to_german is None:\n        languages[\"Spanish\"].is_related_to_german = True\n        changed = True\n\n    # Premise 6: Basque is not related to any other language.\n    if languages[\"Basque\"].is_related_to_spanish is None:\n        languages[\"Basque\"].is_related_to_spanish = False\n        changed = True\n    if languages[\"Basque\"].is_related_to_german is None:\n        languages[\"Basque\"].is_related_to_german = False\n        changed = True\n\n    return changed\n\ndef run_inference(languages: dict):\n    while apply_premises(languages):\n        pass\n\ndef check_conclusion(languages: dict) -> str:\n    run_inference(languages)\n    if languages[\"Basque\"].is_romance is None:\n        return \"Uncertain\"\n    if languages[\"Basque\"].is_romance is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    languages = {\n        \"French\": Language(name=\"French\", is_romance=None, is_indo_european=None, is_related_to_spanish=None, is_related_to_german=None, is_related_to_basque=None),\n        \"Spanish\": Language(name=\"Spanish\", is_romance=None, is_indo_european=None, is_related_to_spanish=None, is_related_to_german=None, is_related_to_basque=None),\n        \"German\": Language(name=\"German\", is_romance=None, is_indo_european=None, is_related_to_spanish=None, is_related_to_german=None, is_related_to_basque=None),\n        \"Basque\": Language(name=\"Basque\", is_romance=None, is_indo_european=None, is_related_to_spanish=None, is_related_to_german=None, is_related_to_basque=None)\n    }\n    return check_conclusion(languages)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Basque is a Romance language?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</Premises>\n<Conclusion>\nBasque is a Romance language.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Basque is a Romance language.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.",
        "conclusions": "German is a Romance language.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Language:\n    def __init__(self, name: str, is_roman: Optional[bool] = None, is Indo_european: Optional[bool] = None, is_related_to_spanish: Optional[bool] = None, is_related_to_german: Optional[bool] = None, is_basque: Optional[bool] = None):\n        self.name = name\n        self.is_roman = is_roman\n        self.is_indo_european = is_indo_european\n        self.is_related_to_spanish = is_related_to_spanish\n        self.is_related_to_german = is_related_to_german\n        self.is_basque = is_basque\n\ndef apply_premises(language: Language) -> bool:\n    changed = False\n\n    # Premise 1: All Romance languages are Indo-European languages.\n    if language.is_roman is True and language.is_indo_european is None:\n        language.is_indo_european = True\n        changed = True\n\n    # Premise 2: Romance languages are a language family.\n    # This premise is more of a definition and does not change the state.\n\n    # Premise 3: All languages within a language family are related to each other.\n    if language.is_indo_european is True and language.is_related_to_spanish is None and language.name != \"Spanish\":\n        language.is_related_to_spanish = True\n        changed = True\n\n    # Premise 4: French and Spanish are both Romance languages.\n    if language.name == \"French\" or language.name == \"Spanish\":\n        if language.is_roman is None:\n            language.is_roman = True\n            changed = True\n\n    # Premise 5: German is related to Spanish.\n    if language.name == \"German\" and language.is_related_to_spanish is None:\n        language.is_related_to_spanish = True\n        changed = True\n\n    # Premise 6: Basque is not related to any other language.\n    if language.name == \"Basque\" and language.is_related_to_spanish is None:\n        language.is_related_to_spanish = False\n        changed = True\n\n    return changed\n\ndef run_inference(language: Language):\n    while apply_premises(language):\n        pass\n\ndef check_conclusion(language: Language) -> str:\n    run_inference(language)\n    if language.name == \"German\" and language.is_roman is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    language = Language(name=\"German\", is_roman=None, is_indo_european=None, is_related_to_spanish=None, is_related_to_german=None, is_basque=None)\n    return check_conclusion(language)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: German is a Romance language?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</Premises>\n<Conclusion>\nGerman is a Romance language.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? German is a Romance language.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.",
        "conclusions": "French is an Indo-European language.",
        "rationale": "from typing import Optional\n\nclass Language:\n    def __init__(self, name: str, is_indo_european: Optional[bool] = None, is_romance: Optional[bool] = None, is_related_to_spanish: Optional[bool] = None, is_related_to_german: Optional[bool] = None, is_related_to_basque: Optional[bool] = None):\n        self.name = name\n        self.is_indo_european = is_indo_european\n        self.is_romance = is_romance\n        self.is_related_to_spanish = is_related_to_spanish\n        self.is_related_to_german = is_related_to_german\n        self.is_related_to_basque = is_related_to_basque\n\ndef apply_premises(language: Language) -> bool:\n    changed = False\n\n    # Premise 1: All Romance languages are Indo-European languages.\n    if language.is_romance is True and language.is_indo_european is None:\n        language.is_indo_european = True\n        changed = True\n\n    # Premise 2: Romance languages are a language family.\n    if language.is_romance is True and language.is_related_to_spanish is None:\n        language.is_related_to_spanish = True\n        changed = True\n    if language.is_romance is True and language.is_related_to_german is None:\n        language.is_related_to_german = False\n        changed = True\n    if language.is_romance is True and language.is_related_to_basque is None:\n        language.is_related_to_basque = False\n        changed = True\n\n    # Premise 3: All languages within a language family are related to each other.\n    if language.is_related_to_spanish is True and language.is_related_to_german is None:\n        language.is_related_to_german = False\n        changed = True\n    if language.is_related_to_spanish is True and language.is_related_to_basque is None:\n        language.is_related_to_basque = False\n        changed = True\n\n    # Premise 4: French and Spanish are both Romance languages.\n    if language.name == \"French\" and language.is_romance is None:\n        language.is_romance = True\n        changed = True\n\n    # Premise 5: German is related to Spanish.\n    if language.name == \"German\" and language.is_related_to_spanish is None:\n        language.is_related_to_spanish = True\n        changed = True\n\n    # Premise 6: Basque is not related to any other language.\n    if language.name == \"Basque\" and language.is_related_to_spanish is None:\n        language.is_related_to_spanish = False\n    if language.name == \"Basque\" and language.is_related_to_german is None:\n        language.is_related_to_german = False\n    if language.name == \"Basque\" and language.is_related_to_basque is None:\n        language.is_related_to_basque = False\n\n    return changed\n\ndef run_inference(language: Language):\n    while apply_premises(language):\n        pass\n\ndef check_conclusion(language: Language) -> str:\n    run_inference(language)\n    if language.name == \"French\" and language.is_indo_european is True:\n        return \"True\"\n    elif language.name == \"French\" and language.is_indo_european is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    language = Language(name=\"French\", is_indo_european=None, is_romance=None, is_related_to_spanish=None, is_related_to_german=None, is_related_to_basque=None)\n    return check_conclusion(language)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: French is an Indo-European language?\", result)",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll Romance languages are Indo-European languages.\nRomance languages are a language family.\nAll languages within a language family are related to each other.\nFrench and Spanish are both Romance languages.\nGerman is related to Spanish.\nBasque is not related to any other language.\n</Premises>\n<Conclusion>\nFrench is an Indo-European language.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? French is an Indo-European language.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Robert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.",
        "conclusions": "Robert Lewandowski is a soccer player.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Player:\n    def __init__(self, name: str, position: Optional[str] = None, team: Optional[str] = None):\n        self.name = name\n        self.position = position\n        self.team = team\n\nclass Team:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises(player: Player, team: Team) -> bool:\n    changed = False\n\n    # Premise 1: Robert Lewandowski is a striker.\n    if player.name == \"Robert Lewandowski\" and player.position is None:\n        player.position = \"striker\"\n        changed = True\n\n    # Premise 2: Strikers are soccer players.\n    if player.position == \"striker\" and player.position is not None:\n        player.position = \"soccer player\"\n        changed = True\n\n    # Premise 3: Robert Lewandowski left Bayern Munchen.\n    if player.name == \"Robert Lewandowski\" and player.team == \"Bayern Munchen\":\n        player.team = None\n        changed = True\n\n    # Premise 4: If a player leaves a team they no longer play for that team.\n    if player.team is None and player.position == \"striker\":\n        player.position = \"soccer player\"\n        changed = True\n\n    return changed\n\ndef run_inference(player: Player, team: Team):\n    while apply_premises(player, team):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player, team)\n    if player.position == \"soccer player\":\n        return \"True\"\n    elif player.position != \"soccer player\":\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(name=\"Robert Lewandowski\", position=None, team=\"Bayern Munchen\")\n    team = Team(name=\"Bayern Munchen\")\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Robert Lewandowski is a soccer player?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nRobert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.\n</Premises>\n<Conclusion>\nRobert Lewandowski is a soccer player.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Robert Lewandowski is a soccer player.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Robert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.",
        "conclusions": "Robert Lewandowski plays for Bayern Munchen.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Player:\n    def __init__(self,\n                 name: str,\n                 position: Optional[str] = None,\n                 team: Optional[str] = None):\n        self.name = name\n        self.position = position\n        self.team = team\n\nclass Team:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises(player: Player, team: Team) -> bool:\n    changed = False\n\n    # Premise 1: Robert Lewandowski is a striker.\n    if player.name == \"Robert Lewandowski\" and player.position is None:\n        player.position = \"striker\"\n        changed = True\n\n    # Premise 2: Strikers are soccer players.\n    # This premise is a background fact and does not change the state.\n\n    # Premise 3: Robert Lewandowski left Bayern Munchen.\n    if player.name == \"Robert Lewandowski\" and player.team == \"Bayern Munchen\":\n        player.team = None\n        changed = True\n\n    # Premise 4: If a player leaves a team they no longer play for that team.\n    if player.name == \"Robert Lewandowski\" and player.team is None:\n        player.team = \"Bayern Munchen\"\n        changed = True\n\n    return changed\n\ndef run_inference(player: Player, team: Team):\n    while apply_premises(player, team):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player, team)\n    if player.team == \"Bayern Munchen\":\n        return \"False\"\n    elif player.team is None:\n        return \"Uncertain\"\n    else:\n        return \"True\"\n\ndef func():\n    player = Player(name=\"Robert Lewandowski\", team=\"Bayern Munchen\")\n    team = Team(name=\"Bayern Munchen\")\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Robert Lewandowski plays for Bayern Munchen?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nRobert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.\n</Premises>\n<Conclusion>\nRobert Lewandowski plays for Bayern Munchen.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Robert Lewandowski plays for Bayern Munchen.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Robert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.",
        "conclusions": "Robert Lewandowski is a star.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Player:\n    def __init__(self,\n                 name: str,\n                 position: Optional[str] = None,\n                 team: Optional[str] = None,\n                 is_star: Optional[bool] = None):\n        self.name = name\n        self.position = position\n        self.team = team\n        self.is_star = is_star\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: Robert Lewandowski is a striker.\n    if player.name == \"Robert Lewandowski\":\n        if player.position is None:\n            player.position = \"striker\"\n            changed = True\n\n    # Premise 2: Strikers are soccer players.\n    # This premise does not directly change player properties, but it confirms the context.\n    if player.position == \"striker\":\n        if player.is_star is None:\n            player.is_star = True\n            changed = True\n\n    # Premise 3: Robert Lewandowski left Bayern Munchen.\n    if player.name == \"Robert Lewandowski\":\n        if player.team == \"Bayern Munchen\":\n            player.team = None\n            changed = True\n\n    # Premise 4: If a player leaves a team they no longer play for that team.\n    if player.team is None and player.is_star is not True:\n        player.is_star = True\n        changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.is_star is True:\n        return \"True\"\n    elif player.is_star is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(\n        name=\"Robert Lewandowski\",\n        position=None,\n        team=\"Bayern Munchen\",\n        is_star=None\n    )\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Robert Lewandowski is a star?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nRobert Lewandowski is a striker.\nStrikers are soccer players.\nRobert Lewandowski left Bayern Munchen.\nIf a player leaves a team they no longer play for that team.\n</Premises>\n<Conclusion>\nRobert Lewandowski is a star.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Robert Lewandowski is a star.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Billings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.",
        "conclusions": "Butte and St Pierre are in the same state.",
        "rationale": "```python\nfrom typing import Optional\n\nclass City:\n    def __init__(self, name: str, state: Optional[str] = None):\n        self.name = name\n        self.state = state\n\nclass State:\n    def __init__(self, name: str, cities: Optional[list] = None):\n        self.name = name\n        self.cities = cities if cities is not None else []\n\ndef apply_premises(cities: list[City], states: list[State]) -> bool:\n    changed = False\n\n    # Premise 1: Billings is a city in the state of Montana in U.S.\n    billings = City(\"Billings\", \"Montana\")\n    states[0].cities.append(billings.name)\n\n    # Premise 2: The state of Montana includes the cities of Butte, Helena, and Missoula.\n    montana = State(\"Montana\")\n    montana.cities.extend([\"Butte\", \"Helena\", \"Missoula\"])\n\n    # Premise 3: White Sulphur Springs and Butte are cities in the same state in U.S.\n    whitesulphursprings = City(\"White Sulphur Springs\", \"Montana\")\n    montana.cities.append(whitesulphursprings.name)\n\n    # Premise 4: The city of St Pierre is not in the state of Montana.\n    stpierre = City(\"St Pierre\", None)\n    if \"Montana\" in [city.state for city in cities if city.name == \"St Pierre\"]:\n        stpierre.state = \"Not Montana\"\n        changed = True\n\n    # Premise 5: Any city in Butte is not in St Pierre.\n    if \"Butte\" in [city.name for city in cities]:\n        for city in cities:\n            if city.name == \"Butte\":\n                if city.state == \"St Pierre\":\n                    city.state = \"Montana\"\n                    changed = True\n\n    # Premise 6: A city can only be in one state in U.S. except for Bristol, Texarkana, Texhoma, and Union City.\n    # No additional updates needed as this is a constraint and not a direct update.\n\n    return changed\n\ndef run_inference(cities: list[City], states: list[State]):\n    while apply_premises(cities, states):\n        pass\n\ndef check_conclusion(cities: list[City]) -> str:\n    run_inference(cities, states)\n    stpierre = [city for city in cities if city.name == \"St Pierre\"]\n    if stpierre and stpierre[0].state == \"Montana\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initialize cities and states\n    cities = [\n        City(\"Billings\", \"Montana\"),\n        City(\"Butte\", \"Montana\"),\n        City(\"Helena\", \"Montana\"),\n        City(\"Missoula\", \"Montana\"),\n        City(\"White Sulphur Springs\", \"Montana\"),\n        City(\"St Pierre\", None)\n    ]\n    states = [\n        State(\"Montana\"),\n        State(\"Not Montana\")\n    ]\n    return check_conclusion(cities)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Butte and St Pierre are in the same state?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBillings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\n</Premises>\n<Conclusion>\nButte and St Pierre are in the same state.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Butte and St Pierre are in the same state.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Billings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.",
        "conclusions": "St Pierre and Bismarck are in the same state.",
        "rationale": "from typing import Optional\n\nclass City:\n    def __init__(self, name: str, state: Optional[str] = None):\n        self.name = name\n        self.state = state\n\nclass State:\n    def __init__(self, name: str):\n        self.name = name\n        self.cities = []\n\ndef apply_premises() -> bool:\n    changed = False\n    \n    # Premise 1: Billings is a city in the state of Montana in U.S.\n    billings = City(\"Billings\", \"Montana\")\n    \n    # Premise 2: The state of Montana includes the cities of Butte, Helena, and Missoula.\n    montana = State(\"Montana\")\n    montana.cities.extend([\"Butte\", \"Helena\", \"Missoula\"])\n    \n    # Premise 3: White Sulphur Springs and Butte are cities in the same state in U.S.\n    whitesulphursprings = City(\"White Sulphur Springs\", \"Montana\")\n    \n    # Premise 4: The city of St Pierre is not in the state of Montana.\n    stpierre = City(\"St Pierre\", \"Not Montana\")\n    \n    # Premise 5: Any city in Butte is not in St Pierre.\n    # This is already covered by the state assignment for Butte and St Pierre.\n    \n    # Premise 6: A city can only be in one state in U.S. except for Bristol, Texarkana, Texhoma, and Union City.\n    # No additional information is needed for this premise as it is a general rule.\n    \n    # Adding cities to their respective states\n    montana.cities.append(\"Billings\")\n    montana.cities.append(\"White Sulphur Springs\")\n    \n    # Check if Bismarck is in Montana or St Pierre\n    bismarck = City(\"Bismarck\", None)\n    if bismarck.state is None:\n        if \"Bismarck\" in montana.cities:\n            bismarck.state = \"Montana\"\n            changed = True\n        else:\n            bismarck.state = \"St Pierre\"\n            changed = True\n    \n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    bismarck = City(\"Bismarck\", None)\n    stpierre = City(\"St Pierre\", \"Not Montana\")\n    \n    if bismarck.state == stpierre.state:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: St Pierre and Bismarck are in the same state?\", result)",
        "label": "Uncertain",
        "predict": "Unknow",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBillings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\n</Premises>\n<Conclusion>\nSt Pierre and Bismarck are in the same state.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? St Pierre and Bismarck are in the same state.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Billings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.",
        "conclusions": "Montana is home to the city of Missoula.",
        "rationale": "```python\nfrom typing import Optional\n\nclass City:\n    def __init__(self, name: str, state: Optional[str] = None):\n        self.name = name\n        self.state = state\n\nclass State:\n    def __init__(self, name: str, cities: Optional[list] = None):\n        self.name = name\n        self.cities = cities if cities is not None else []\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Billings is a city in the state of Montana in U.S.\n    if \"Billings\" not in [city.name for city in montana.cities]:\n        montana.cities.append(City(\"Billings\"))\n        changed = True\n\n    # Premise 2: The state of Montana includes the cities of Butte, Helena, and Missoula.\n    if \"Butte\" not in [city.name for city in montana.cities]:\n        montana.cities.append(City(\"Butte\"))\n        changed = True\n    if \"Helena\" not in [city.name for city in montana.cities]:\n        montana.cities.append(City(\"Helena\"))\n        changed = True\n    if \"Missoula\" not in [city.name for city in montana.cities]:\n        montana.cities.append(City(\"Missoula\"))\n        changed = True\n\n    # Premise 3: White Sulphur Springs and Butte are cities in the same state in U.S.\n    if \"White Sulphur Springs\" not in [city.name for city in montana.cities]:\n        montana.cities.append(City(\"White Sulphur Springs\"))\n        changed = True\n\n    # Premise 4: The city of St Pierre is not in the state of Montana.\n    if \"St Pierre\" not in [city.name for city in montana.cities]:\n        montana.cities.append(City(\"St Pierre\"))\n        changed = True\n\n    # Premise 5: Any city in Butte is not in St Pierre.\n    for city in montana.cities:\n        if city.name == \"Butte\" and city.state == \"St Pierre\":\n            city.state = \"Montana\"\n            changed = True\n\n    # Premise 6: A city can only be in one state in U.S. except for Bristol, Texarkana, Texhoma, and Union City.\n    for city in montana.cities:\n        if city.name not in [\"Bristol\", \"Texarkana\", \"Texhoma\", \"Union City\"] and city.state != \"Montana\":\n            city.state = \"Montana\"\n            changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    for city in montana.cities:\n        if city.name == \"Missoula\" and city.state == \"Montana\":\n            return \"True\"\n    return \"False\"\n\ndef func():\n    global montana\n    montana = State(\"Montana\", [])\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Montana is home to the city of Missoula?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBillings is a city in the state of Montana in U.S.\nThe state of Montana includes the cities of Butte, Helena, and Missoula.\nWhite Sulphur Springs and Butte are cities in the same state in U.S.\nThe city of St Pierre is not in the state of Montana.\nAny city in Butte is not in St Pierre.\nA city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City.\n</Premises>\n<Conclusion>\nMontana is home to the city of Missoula.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Montana is home to the city of Missoula.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "International students in the US have either an F1 visa or a J1 visa.\nAn international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.",
        "conclusions": "Mike has an F1 visa.",
        "rationale": "from typing import Optional\n\nclass Visa:\n    def __init__(self, type_: Optional[str] = None):\n        self.type_ = type_\n\nclass InternationalStudent:\n    def __init__(self,\n                 name: str,\n                 visa: Optional[Visa] = None,\n                 needs_cpt: Optional[bool] = None,\n                 needs_opt: Optional[bool] = None):\n        self.name = name\n        self.visa = visa\n        self.needs_cpt = needs_cpt\n        self.needs_opt = needs_opt\n\ndef apply_premises(student: InternationalStudent) -> bool:\n    changed = False\n\n    # Premise 1: International students in the US have either an F1 visa or a J1 visa.\n    if student.visa is None:\n        student.visa = Visa(type_=None)  # Will be updated to either 'F1' or 'J1'.\n        changed = True\n\n    # Premise 2: An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n    if student.visa.type_ == 'F1' and student.needs_cpt is None:\n        student.needs_cpt = True\n        changed = True\n    if student.visa.type_ == 'F1' and student.needs_opt is None:\n        student.needs_opt = True\n        changed = True\n\n    # Premise 3: Mike is an international student.\n    # This premise does not affect the state of the object, as Mike's attributes are initially None.\n\n    # Premise 4: Mike needs to apply for CPT if he wants to work in the US.\n    if student.name == \"Mike\" and student.needs_cpt is None:\n        student.needs_cpt = True\n        changed = True\n\n    return changed\n\ndef run_inference(student: InternationalStudent):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: InternationalStudent) -> str:\n    run_inference(student)\n    if student.name == \"Mike\":\n        if student.visa.type_ == 'F1':\n            return \"True\"\n        elif student.visa.type_ == 'J1':\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    student = InternationalStudent(\n        name=\"Mike\",\n        visa=None,\n        needs_cpt=None,\n        needs_opt=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Mike has an F1 visa?\", result)",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nInternational students in the US have either an F1 visa or a J1 visa.\nAn international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.\n</Premises>\n<Conclusion>\nMike has an F1 visa.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Mike has an F1 visa.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "International students in the US have either an F1 visa or a J1 visa.\nAn international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.",
        "conclusions": "Mike has a J1 visa.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Visa:\n    def __init__(self, type: Optional[str] = None):\n        self.type = type\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 visa: Optional[Visa] = None,\n                 needs_cpt: Optional[bool] = None,\n                 needs_opt: Optional[bool] = None):\n        self.name = name\n        self.visa = visa\n        self.needs_cpt = needs_cpt\n        self.needs_opt = needs_opt\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: International students in the US have either an F1 visa or a J1 visa.\n    if student.name == \"Mike\":\n        if student.visa is None:\n            # We can't determine the visa type based on the given information.\n            # Therefore, we return False to indicate that the conclusion is uncertain.\n            return False\n\n    # Premise 2: An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\n    if student.name == \"Mike\" and student.visa.type == \"F1\":\n        if student.needs_cpt is None:\n            student.needs_cpt = True\n            changed = True\n        if student.needs_opt is None:\n            student.needs_opt = True\n            changed = True\n\n    # Premise 3: Mike needs to apply for CPT if he wants to work in the US.\n    if student.name == \"Mike\" and student.needs_cpt is True:\n        if student.visa is None:\n            # Since Mike needs CPT, he must have an F1 visa.\n            student.visa = Visa(type=\"F1\")\n            changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    if student.visa is None or student.visa.type != \"J1\":\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    student = Student(\n        name=\"Mike\",\n        visa=None,\n        needs_cpt=None,\n        needs_opt=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Mike has a J1 visa?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nInternational students in the US have either an F1 visa or a J1 visa.\nAn international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.\nMike is an international student.\nMike needs to apply for CPT if he wants to work in the US.\n</Premises>\n<Conclusion>\nMike has a J1 visa.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Mike has a J1 visa.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.",
        "conclusions": "Ted is a pet.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Cattle:\n    def __init__(self, is_brown_swiss: Optional[bool] = None):\n        self.is_brown_swiss = is_brown_swiss\n\nclass Cow:\n    def __init__(self, is domesticated: Optional[bool] = None):\n        self.is_domesticated = is_domesticated\n\nclass Animal:\n    def __init__(self, is_alligator: Optional[bool] = None):\n        self.is_alligator = is_alligator\n\nclass Pet:\n    def __init__(self, is_pet: Optional[bool] = None):\n        self.is_pet = is_pet\n\ndef apply_premises(ted: Animal, pet: Pet, cattle: Cattle, cow: Cow) -> bool:\n    changed = False\n\n    # Premise 1: All Brown Swiss cattle are cows.\n    if cattle.is_brown_swiss is True and cow.is_domesticated is not True:\n        cow.is_domesticated = True\n        changed = True\n\n    # Premise 2: Some pets are Brown Swiss Cattle.\n    # This does not provide specific information about which pets are Brown Swiss Cattle.\n\n    # Premise 3: All cows are domesticated animals.\n    if cow.is_domesticated is False:\n        cow.is_domesticated = True\n        changed = True\n\n    # Premise 4: Alligators are not domesticated animals.\n    if ted.is_alligator is True and cow.is_domesticated is True:\n        cow.is_domesticated = False\n        changed = True\n\n    # Premise 5: Ted is an alligator.\n    if ted.is_alligator is True and pet.is_pet is not False:\n        pet.is_pet = False\n        changed = True\n\n    return changed\n\ndef run_inference(ted: Animal, pet: Pet, cattle: Cattle, cow: Cow):\n    while apply_premises(ted, pet, cattle, cow):\n        pass\n\ndef check_conclusion(ted: Animal, pet: Pet) -> str:\n    run_inference(ted, pet, cattle, cow)\n    if pet.is_pet is None:\n        return \"Uncertain\"\n    if pet.is_pet is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions:\n    # Ted is an alligator.\n    ted = Animal(is_alligator=True)\n    pet = Pet()\n    cattle = Cattle(is_brown_swiss=None)\n    cow = Cow(is_domesticated=None)\n    return check_conclusion(ted, pet)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ted is a pet?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.\n</Premises>\n<Conclusion>\nTed is a pet.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Ted is a pet.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.",
        "conclusions": "Ted is a pet and Brown Swiss cattle",
        "rationale": "from typing import Optional\n\nclass Cattle:\n    def __init__(self, is_brown_swiss: Optional[bool] = None, is_pet: Optional[bool] = None):\n        self.is_brown_swiss = is_brown_swiss\n        self.is_pet = is_pet\n\nclass Cow:\n    def __init__(self, is_domesticated: Optional[bool] = None):\n        self.is_domesticated = is_domesticated\n\nclass Animal:\n    def __init__(self, is_domesticated: Optional[bool] = None):\n        self.is_domesticated = is_domesticated\n\nclass Ted(Animal):\n    def __init__(self, is_alligator: Optional[bool] = None):\n        super().__init__()\n        self.is_alligator = is_alligator\n\ndef apply_premises(ted: Ted, cattle: Cattle):\n    changed = False\n\n    # Premise 1: All Brown Swiss cattle are cows.\n    if cattle.is_brown_swiss is True and cattle.is_pet is None:\n        cattle.is_pet = False\n        changed = True\n\n    # Premise 2: Some pets are Brown Swiss Cattle.\n    # This does not affect the state of the cattle directly but helps to understand the relationship.\n    \n    # Premise 3: All cows are domesticated animals.\n    if cattle.is_brown_swiss is True and cattle.is_pet is None and cattle.is_domesticated is not True:\n        cattle.is_domesticated = True\n        changed = True\n\n    # Premise 4: Alligators are not domesticated animals.\n    if ted.is_alligator is True and ted.is_domesticated is not False:\n        ted.is_domesticated = False\n        changed = True\n\n    # Premise 5: Ted is an alligator.\n    if ted.is_alligator is None:\n        ted.is_alligator = True\n        changed = True\n\n    return changed\n\ndef run_inference(ted: Ted, cattle: Cattle):\n    while apply_premises(ted, cattle):\n        pass\n\ndef check_conclusion(ted: Ted, cattle: Cattle) -> str:\n    run_inference(ted, cattle)\n    # Conclusion: Ted is a pet and Brown Swiss cattle\n    if ted.is_alligator is True and cattle.is_brown_swiss is None and cattle.is_pet is None:\n        return \"Uncertain\"\n    elif ted.is_alligator is True and cattle.is_brown_swiss is True and cattle.is_pet is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    cattle = Cattle(is_brown_swiss=None, is_pet=None)\n    ted = Ted(is_alligator=None)\n    return check_conclusion(ted, cattle)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Is Ted a pet and Brown Swiss cattle?\", result)",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.\n</Premises>\n<Conclusion>\nTed is a pet and Brown Swiss cattle\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Ted is a pet and Brown Swiss cattle\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.",
        "conclusions": "If Ted is a Brown Swiss cattle, then Ted is not a pet.",
        "rationale": "from typing import Optional\n\nclass Cattle:\n    def __init__(self, is_brown_swiss: Optional[bool] = None, is_pet: Optional[bool] = None):\n        self.is_brown_swiss = is_brown_swiss\n        self.is_pet = is_pet\n\nclass Cow:\n    def __init__(self, is_domesticated: Optional[bool] = None):\n        self.is_domesticated = is_domesticated\n\nclass Alligator:\n    def __init__(self, is_domesticated: Optional[bool] = None):\n        self.is_domesticated = is_domesticated\n\ndef apply_premises(ted: Cattle, cow: Cow, alligator: Alligator) -> bool:\n    changed = False\n\n    # Premise 1: All Brown Swiss cattle are cows.\n    if ted.is_brown_swiss is True and ted.is_pet is not None and ted.is_pet is True:\n        changed = True\n        # If Ted is a Brown Swiss cattle, he must be a cow.\n        ted.is_pet = None  # Uncertain if he is a pet\n        cow.is_domesticated = True  # All cows are domesticated animals\n\n    # Premise 2: Some pets are Brown Swiss Cattle.\n    # This premise does not provide enough information to update the state.\n    \n    # Premise 3: All cows are domesticated animals.\n    if ted.is_brown_swiss is True and ted.is_pet is not None and ted.is_pet is True:\n        changed = True\n        cow.is_domesticated = True\n\n    # Premise 4: Alligators are not domesticated animals.\n    if alligator.is_domesticated is not None and alligator.is_domesticated is True:\n        changed = True\n        alligator.is_domesticated = False\n\n    # Premise 5: Ted is an alligator.\n    if ted.is_brown_swiss is not None and ted.is_brown_swiss is True:\n        changed = True\n        ted.is_brown_swiss = False\n        ted.is_pet = False\n        alligator.is_domesticated = True\n\n    return changed\n\ndef run_inference(ted: Cattle, cow: Cow, alligator: Alligator):\n    while apply_premises(ted, cow, alligator):\n        pass\n\ndef check_conclusion(ted: Cattle) -> str:\n    run_inference(ted, cow, alligator)\n    # Conclusion: If Ted is a Brown Swiss cattle, then Ted is not a pet.\n    if ted.is_brown_swiss is True:\n        if ted.is_pet is False:\n            return \"True\"\n        elif ted.is_pet is None:\n            return \"Uncertain\"\n        else:\n            return \"False\"\n    else:\n        return \"True\"  # If Ted is not a Brown Swiss cattle, the implication is vacuously true.\n\ndef func():\n    # Initial conditions\n    ted = Cattle(is_brown_swiss=None, is_pet=None)\n    cow = Cow(is_domesticated=None)\n    alligator = Alligator(is_domesticated=None)\n    return check_conclusion(ted)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Ted is a Brown Swiss cattle, then Ted is not a pet?\", result)",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll Brown Swiss cattle are cows.\nSome pets are Brown Swiss Cattle.\nAll cows are domesticated animals.\nAlligators are not domesticated animals.\nTed is an alligator.\n</Premises>\n<Conclusion>\nIf Ted is a Brown Swiss cattle, then Ted is not a pet.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Ted is a Brown Swiss cattle, then Ted is not a pet.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Yale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
        "conclusions": "A private Ivy League research university moved to New Haven.",
        "rationale": "```python\nfrom typing import Optional\n\nclass University:\n    def __init__(self,\n                 name: str,\n                 is_private: Optional[bool] = None,\n                 is_ivy_league: Optional[bool] = None,\n                 is_research: Optional[bool] = None,\n                 location_moved: Optional[str] = None,\n                 year_moved: Optional[int] = None):\n        self.name = name\n        self.is_private = is_private\n        self.is_ivy_league = is_ivy_league\n        self.is_research = is_research\n        self.location_moved = location_moved\n        self.year_moved = year_moved\n\ndef apply_premises(university: University) -> bool:\n    changed = False\n\n    # Premise 1: Yale University is a private Ivy League research university.\n    if university.name == \"Yale University\":\n        if university.is_private is None:\n            university.is_private = True\n            changed = True\n        if university.is_ivy_league is None:\n            university.is_ivy_league = True\n            changed = True\n        if university.is_research is None:\n            university.is_research = True\n            changed = True\n\n    # Premise 2: Yale University moved to New Haven in 1716.\n    if university.name == \"Yale University\":\n        if university.location_moved is None:\n            university.location_moved = \"New Haven\"\n            changed = True\n        if university.year_moved is None:\n            university.year_moved = 1716\n            changed = True\n\n    return changed\n\ndef run_inference(university: University):\n    while apply_premises(university):\n        pass\n\ndef check_conclusion(university: University) -> str:\n    run_inference(university)\n    if university.is_private is True and university.is_ivy_league is True and university.location_moved == \"New Haven\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    university = University(\n        name=\"Yale University\",\n        is_private=None,\n        is_ivy_league=None,\n        is_research=None,\n        location_moved=None,\n        year_moved=None\n    )\n    return check_conclusion(university)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A private Ivy League research university moved to New Haven?\", result)\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nYale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n</Premises>\n<Conclusion>\nA private Ivy League research university moved to New Haven.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? A private Ivy League research university moved to New Haven.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Yale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
        "conclusions": "Yale University has the largest university endowment of any educational institution.",
        "rationale": "```python\nfrom typing import Optional\n\nclass University:\n    def __init__(self, name: str, endowment: Optional[float] = None):\n        self.name = name\n        self.endowment = endowment\n\ndef apply_premises(university: University) -> bool:\n    changed = False\n\n    # Premise 1: Yale University is a private Ivy League research university.\n    if university.name == \"Yale University\":\n        if university.endowment is None:\n            university.endowment = 42.3e9\n            changed = True\n\n    return changed\n\ndef run_inference(university: University):\n    while apply_premises(university):\n        pass\n\ndef check_conclusion(university: University) -> str:\n    run_inference(university)\n    if university.endowment is None:\n        return \"Uncertain\"\n    # Given no other university's endowment is provided, we cannot determine if it is the largest.\n    return \"Uncertain\"\n\ndef func():\n    university = University(name=\"Yale University\", endowment=None)\n    return check_conclusion(university)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Yale University has the largest university endowment of any educational institution?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nYale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n</Premises>\n<Conclusion>\nYale University has the largest university endowment of any educational institution.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Yale University has the largest university endowment of any educational institution.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Yale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.",
        "conclusions": "Pierson College is a residential college at Yale.",
        "rationale": "```python\nfrom typing import Optional\n\nclass ResidentialCollege:\n    def __init__(self, name: str, is_at_yale: Optional[bool] = None):\n        self.name = name\n        self.is_at_yale = is_at_yale\n\nclass YaleUniversity:\n    def __init__(self,\n                 is_private: Optional[bool] = None,\n                 is_ivy_league: Optional[bool] = None,\n                 is_research: Optional[bool] = None,\n                 endowment_value: Optional[float] = None,\n                 residential_colleges: Optional[list] = None):\n        self.is_private = is_private\n        self.is_ivy_league = is_ivy_league\n        self.is_research = is_research\n        self.endowment_value = endowment_value\n        self.residential_colleges = residential_colleges\n\ndef apply_premises(university: YaleUniversity) -> bool:\n    changed = False\n\n    # Premise 1: Yale University is a private Ivy League research university.\n    if university.is_private is None:\n        university.is_private = True\n        changed = True\n    if university.is_ivy_league is None:\n        university.is_ivy_league = True\n        changed = True\n    if university.is_research is None:\n        university.is_research = True\n        changed = True\n\n    # Premise 2: Yale University moved to New Haven in 1716.\n    # This premise does not affect the current state of residential colleges.\n    # Premise 3: Yale University's endowment was valued at $42.3 billion.\n    # This premise does not affect the current state of residential colleges.\n    # Premise 4: A list of residential colleges at Yale.\n    if university.residential_colleges is None:\n        university.residential_colleges = [\n            \"Benjamin Franklin College\",\n            \"Berkeley College\",\n            \"Branford College\",\n            \"Davenport College\",\n            \"Ezra Stiles College\",\n            \"Grace Hopper College\",\n            \"Jonathan Edwards College\",\n            \"Morse College\",\n            \"Pauli Murray College\",\n            \"Pierson College\",\n            \"Saybrook College\",\n            \"Silliman College\",\n            \"Timothy Dwight College\",\n            \"Trumbull College\"\n        ]\n        changed = True\n\n    return changed\n\ndef run_inference(university: YaleUniversity):\n    while apply_premises(university):\n        pass\n\ndef check_conclusion(college_name: str) -> str:\n    run_inference(university)\n    if college_name in university.residential_colleges:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    university = YaleUniversity(\n        is_private=None,\n        is_ivy_league=None,\n        is_research=None,\n        endowment_value=None,\n        residential_colleges=None\n    )\n    return check_conclusion(\"Pierson College\")\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Pierson College is a residential college at Yale?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nYale University is a private Ivy League research university.\nYale University moved to New Haven in 1716.\nYale university's endowment was valued at $42.3 billion.\nA list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College.\n</Premises>\n<Conclusion>\nPierson College is a residential college at Yale.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Pierson College is a residential college at Yale.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Badults is a British Sitcom series starring members of Pappy's.\nBadults was piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults.",
        "conclusions": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".",
        "rationale": "```python\nfrom typing import Optional\n\nclass Series:\n    def __init__(self,\n                 working_title: Optional[str] = None,\n                 script_editor: Optional[str] = None):\n        self.working_title = working_title\n        self.script_editor = script_editor\n\ndef apply_premises(series: Series) -> bool:\n    changed = False\n\n    # Premise 1: Badults was piloted in July 2013 on BBC Three.\n    # This premise is not relevant to the conclusion, so no changes are made.\n\n    # Premise 2: The Working title \"The Secret Dude Society\" was used for Badults.\n    if series.working_title is None:\n        series.working_title = \"The Secret Dude Society\"\n        changed = True\n\n    # Premise 3: Andrew Collins was the script editor for Badults.\n    if series.script_editor is None:\n        series.script_editor = \"Andrew Collins\"\n        changed = True\n\n    return changed\n\ndef run_inference(series: Series):\n    while apply_premises(series):\n        pass\n\ndef check_conclusion(series: Series) -> str:\n    run_inference(series)\n    if series.script_editor == \"Andrew Collins\" and series.working_title == \"The Secret Dude Society\":\n        return \"True\"\n    elif series.script_editor != \"Andrew Collins\" or series.working_title != \"The Secret Dude Society\":\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    series = Series(working_title=None, script_editor=None)\n    return check_conclusion(series)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Andrew Collins was the script editor for a series with the working title 'The Secret Dude Society'? \", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBadults is a British Sitcom series starring members of Pappy's.\nBadults was piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults.\n</Premises>\n<Conclusion>\nAndrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Badults is a British Sitcom series starring members of Pappy's.\nBadults was piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults.",
        "conclusions": "No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.",
        "rationale": "from typing import Optional\n\nclass Show:\n    def __init__(self, title: Optional[str] = None, network: Optional[str] = None, pilot_date: Optional[str] = None, working_title: Optional[str] = None):\n        self.title = title\n        self.network = network\n        self.pilot_date = pilot_date\n        self.working_title = working_title\n\nclass Member:\n    def __init__(self, name: str, starred_in: Optional[str] = None):\n        self.name = name\n        self.starred_in = starred_in\n\nclass Pappy:\n    def __init__(self, members: Optional[list[Member]] = None):\n        self.members = members if members is not None else []\n\ndef apply_premises(pappy: Pappy, badults: Show) -> bool:\n    changed = False\n\n    # Premise 1: Badults is a British Sitcom series starring members of Pappy's.\n    if badults.title == \"Badults\" and pappy.members is not None:\n        for member in pappy.members:\n            if member.starred_in is None:\n                member.starred_in = \"Badults\"\n                changed = True\n\n    # Premise 2: Badults was piloted in July 2013 on BBC Three.\n    if badults.title == \"Badults\" and badults.network is None:\n        badults.network = \"BBC Three\"\n        changed = True\n\n    # Premise 3: The Working title \"The Secret Dude Society\" was used for Badults.\n    if badults.title == \"Badults\" and badults.working_title is None:\n        badults.working_title = \"The Secret Dude Society\"\n        changed = True\n\n    # Premise 4: Andrew Collins was the script editor for Badults.\n    # No update to the premises, but if needed, we can add a check here.\n\n    return changed\n\ndef run_inference(pappy: Pappy, badults: Show):\n    while apply_premises(pappy, badults):\n        pass\n\ndef check_conclusion(pappy: Pappy, badults: Show) -> str:\n    run_inference(pappy, badults)\n    # Conclusion: No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.\n    # We need to check if any member has starred in a show on BBC Two or BBC Three.\n    for member in pappy.members:\n        if member.starred_in is not None and \"BBC Two\" in member.starred_in or \"BBC Three\" in member.starred_in:\n            return \"False\"\n    return \"True\"\n\ndef func():\n    # Initial conditions:\n    pappy = Pappy(\n        members=[\n            Member(name=\"John Doe\"),\n            Member(name=\"Jane Smith\"),\n            Member(name=\"Andrew Collins\")\n        ]\n    )\n    badults = Show(title=\"Badults\", network=None, pilot_date=None, working_title=None)\n    return check_conclusion(pappy, badults)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No members of Pappy's have starred in a show piloting on BBC Two or BBC Three?\", result)",
        "label": "False",
        "predict": "True",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBadults is a British Sitcom series starring members of Pappy's.\nBadults was piloted in July 2013 on BBC Three.\nThe Working title \"The Secret Dude Society\" was used for Badults.\nAndrew Collins was the script editor for Badults.\n</Premises>\n<Conclusion>\nNo members of Pappy's have starred in a show piloting on BBC Two or BBC Three.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? No members of Pappy's have starred in a show piloting on BBC Two or BBC Three.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.",
        "conclusions": "KO is a stock.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Stock:\n    def __init__(self, is_growth: Optional[bool] = None, is_mature: Optional[bool] = None):\n        self.is_growth = is_growth\n        self.is_mature = is_mature\n\ndef apply_premises(stock: Stock) -> bool:\n    changed = False\n\n    # Premise 1: All growth stocks are bought to earn profits from rapid price appreciation.\n    # No need to update as it's a definition.\n    \n    # Premise 2: If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\n    # No need to update as it's a definition.\n    \n    # Premise 3: Some stocks are growth stocks.\n    if stock.is_growth is None:\n        stock.is_growth = True  # Assume at least one stock is a growth stock for inference\n        changed = True\n    \n    # Premise 4: All mature stocks are suitable for a retirement fund.\n    # No need to update as it's a definition.\n    \n    # Premise 5: KO is a mature stock.\n    if stock.is_mature is None:\n        stock.is_mature = True\n        changed = True\n\n    return changed\n\ndef run_inference(stock: Stock):\n    while apply_premises(stock):\n        pass\n\ndef check_conclusion(stock: Stock) -> str:\n    run_inference(stock)\n    if stock.is_growth is None and stock.is_mature is None:\n        return \"Uncertain\"\n    if stock.is_growth is not None or stock.is_mature is not None:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    stock = Stock(is_growth=None, is_mature=None)\n    return check_conclusion(stock)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KO is a stock?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.\n</Premises>\n<Conclusion>\nKO is a stock.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? KO is a stock.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.",
        "conclusions": "KO is a stock and a growth stock.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Stock:\n    def __init__(self,\n                 is_growth_stock: Optional[bool] = None,\n                 is_mature_stock: Optional[bool] = None,\n                 suitable_for_retirement_fund: Optional[bool] = None):\n        self.is_growth_stock = is_growth_stock\n        self.is_mature_stock = is_mature_stock\n        self.suitable_for_retirement_fund = suitable_for_retirement_fund\n\ndef apply_premises(stock: Stock) -> bool:\n    changed = False\n\n    # Premise 1: All growth stocks are bought to earn profits from rapid price appreciation.\n    # This premise is not directly relevant for the conclusion, but it helps in understanding the properties.\n    if stock.is_growth_stock is True and stock.suitable_for_retirement_fund is not False:\n        stock.suitable_for_retirement_fund = False\n        changed = True\n\n    # Premise 2: If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\n    # This premise is not directly relevant for the conclusion, but it helps in understanding the properties.\n    if stock.is_growth_stock is not None and stock.suitable_for_retirement_fund is not None:\n        if stock.is_growth_stock and stock.suitable_for_retirement_fund:\n            stock.suitable_for_retirement_fund = False\n            changed = True\n\n    # Premise 3: Some stocks are growth stocks.\n    # This premise is not directly relevant for the conclusion, but it helps in understanding the properties.\n    if stock.is_growth_stock is None:\n        stock.is_growth_stock = True\n        changed = True\n\n    # Premise 4: All mature stocks are suitable for a retirement fund.\n    if stock.is_mature_stock is True and stock.suitable_for_retirement_fund is not True:\n        stock.suitable_for_retirement_fund = True\n        changed = True\n\n    # Premise 5: KO is a mature stock.\n    if stock.name == \"KO\":\n        if stock.is_mature_stock is None:\n            stock.is_mature_stock = True\n            changed = True\n\n    return changed\n\ndef run_inference(stock: Stock):\n    while apply_premises(stock):\n        pass\n\ndef check_conclusion(stock: Stock) -> str:\n    run_inference(stock)\n    if stock.name == \"KO\":\n        if stock.is_growth_stock is True and stock.is_mature_stock is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    stock = Stock(\n        is_growth_stock=None,\n        is_mature_stock=None,\n        suitable_for_retirement_fund=None\n    )\n    return check_conclusion(stock)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KO is a stock and a growth stock?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.\n</Premises>\n<Conclusion>\nKO is a stock and a growth stock.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? KO is a stock and a growth stock.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.",
        "conclusions": "If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Stock:\n    def __init__(self,\n                 is_growth: Optional[bool] = None,\n                 is_mature: Optional[bool] = None,\n                 bought_for_profits: Optional[bool] = None,\n                 is_volatile: Optional[bool] = None):\n        self.is_growth = is_growth\n        self.is_mature = is_mature\n        self.bought_for_profits = bought_for_profits\n        self.is_volatile = is_volatile\n\ndef apply_premises(stock: Stock) -> bool:\n    changed = False\n\n    # Premise 1: All growth stocks are bought to earn profits from rapid price appreciation.\n    if stock.is_growth is True and stock.bought_for_profits is None:\n        stock.bought_for_profits = True\n        changed = True\n\n    # Premise 2: If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\n    if stock.bought_for_profits is True and stock.is_mature is not False:\n        stock.is_mature = False\n        changed = True\n\n    # Premise 3: Some stocks are growth stocks.\n    # This premise does not provide specific information about KO, so no changes are made here.\n\n    # Premise 4: All mature stocks are suitable for a retirement fund.\n    if stock.is_mature is True and stock.bought_for_profits is not False:\n        stock.bought_for_profits = False\n        changed = True\n\n    # Premise 5: KO is a mature stock.\n    if stock.name == \"KO\" and stock.is_mature is None:\n        stock.is_mature = True\n        changed = True\n\n    return changed\n\ndef run_inference(stock: Stock):\n    while apply_premises(stock):\n        pass\n\ndef check_conclusion(stock: Stock) -> str:\n    run_inference(stock)\n    if stock.name == \"KO\":\n        if stock.is_growth is True or stock.bought_for_profits is True:\n            if stock.is_growth is None or stock.is_mature is None or stock.is_volatile is None:\n                return \"Uncertain\"\n            if stock.is_growth is False and stock.bought_for_profits is False and stock.is_volatile is False:\n                return \"True\"\n            else:\n                return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions\n    stock = Stock(\n        is_growth=None,\n        is_mature=None,\n        bought_for_profits=None,\n        is_volatile=None,\n        name=\"KO\"\n    )\n    return check_conclusion(stock)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll growth stocks are bought to earn profits from rapid price appreciation.\nIf the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund.\nSome stocks are growth stocks.\nAll mature stocks are suitable for a retirement fund.\nKO is a mature stock.\n</Premises>\n<Conclusion>\nIf KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul. \nJoe's vehicle registration plate is from Istanbul. \nTom's license plate begins with the number 35. \nIf a license plate begins with the number 35, then it does not begin with the number 34.",
        "conclusions": "Joe's license plate begins with the number 34.",
        "rationale": "```python\nfrom typing import Optional\n\nclass VehicleRegistrationPlate:\n    def __init__(self, number: Optional[str] = None, is_from_istanbul: Optional[bool] = None):\n        self.number = number\n        self.is_from_istanbul = is_from_istanbul\n\ndef apply_premises(istanbul_plate: VehicleRegistrationPlate, istanbul: bool = True) -> bool:\n    changed = False\n\n    # Premise 1: All vehicle registration plates in Istanbul begin with the number 34.\n    if istanbul and istanbul_plate.number is None:\n        istanbul_plate.number = \"34\"\n        changed = True\n\n    # Premise 2: Plates that do not begin with the number 34 are not from Istanbul.\n    if not istanbul_plate.number.startswith(\"34\") and istanbul_plate.is_from_istanbul is not False:\n        istanbul_plate.is_from_istanbul = False\n        changed = True\n\n    # Premise 3: Joe's vehicle registration plate is from Istanbul.\n    if istanbul and istanbul_plate.number is None and istanbul_plate.is_from_istanbul is None:\n        istanbul_plate.is_from_istanbul = True\n        changed = True\n\n    # Premise 4: Tom's license plate begins with the number 35.\n    # This premise is used to infer more about the rules but does not directly affect Joe's plate.\n    if not istanbul and istanbul_plate.number is None:\n        changed = True\n\n    # Premise 5: If a license plate begins with the number 35, then it does not begin with the number 34.\n    # This premise is used to infer more about the rules but does not directly affect Joe's plate.\n    return changed\n\ndef run_inference(istanbul_plate: VehicleRegistrationPlate):\n    while apply_premises(istanbul_plate):\n        pass\n\ndef check_conclusion(istanbul_plate: VehicleRegistrationPlate) -> str:\n    run_inference(istanbul_plate)\n    if istanbul_plate.number is None or istanbul_plate.number != \"34\":\n        return \"Uncertain\"\n    else:\n        return \"True\"\n\ndef func():\n    # Initial conditions\n    # Joe's vehicle registration plate is from Istanbul.\n    # We assume the number is initially unknown.\n    istanbul_plate = VehicleRegistrationPlate(is_from_istanbul=True)\n    return check_conclusion(istanbul_plate)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Joe's license plate begins with the number 34?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul. \nJoe's vehicle registration plate is from Istanbul. \nTom's license plate begins with the number 35. \nIf a license plate begins with the number 35, then it does not begin with the number 34.\n</Premises>\n<Conclusion>\nJoe's license plate begins with the number 34.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Joe's license plate begins with the number 34.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul. \nJoe's vehicle registration plate is from Istanbul. \nTom's license plate begins with the number 35. \nIf a license plate begins with the number 35, then it does not begin with the number 34.",
        "conclusions": "Tom's license plate is from Istanbul.",
        "rationale": "```python\nfrom typing import Optional\n\nclass VehiclePlate:\n    def __init__(self, begins_with: Optional[str] = None, is_from_istanbul: Optional[bool] = None):\n        self.begins_with = begins_with\n        self.is_from_istanbul = is_from_istanbul\n\ndef apply_premises(plate: VehiclePlate) -> bool:\n    changed = False\n\n    # Premise 1: All vehicle registration plates in Istanbul begin with the number 34.\n    if plate.is_from_istanbul is True and plate.begins_with != \"34\":\n        plate.begins_with = \"34\"\n        changed = True\n\n    # Premise 2: Plates that do not begin with the number 34 are not from Istanbul.\n    if plate.begins_with != \"34\" and plate.is_from_istanbul is not False:\n        plate.is_from_istanbul = False\n        changed = True\n\n    # Premise 3: Joe's vehicle registration plate is from Istanbul.\n    # This premise does not affect Tom's plate directly, but it helps to understand the context.\n    if plate.begins_with != \"34\" and plate.is_from_istanbul is not False:\n        plate.is_from_istanbul = False\n        changed = True\n\n    # Premise 4: Tom's license plate begins with the number 35.\n    if plate.begins_with != \"35\":\n        plate.begins_with = \"35\"\n        changed = True\n\n    # Premise 5: If a license plate begins with the number 35, then it does not begin with the number 34.\n    if plate.begins_with == \"35\" and plate.begins_with != \"34\":\n        changed = True\n\n    return changed\n\ndef run_inference(plate: VehiclePlate):\n    while apply_premises(plate):\n        pass\n\ndef check_conclusion(plate: VehiclePlate) -> str:\n    run_inference(plate)\n    if plate.is_from_istanbul is None:\n        return \"Uncertain\"\n    if plate.is_from_istanbul is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    plate = VehiclePlate(begins_with=\"35\", is_from_istanbul=None)\n    return check_conclusion(plate)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom's license plate is from Istanbul?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll vehicle registration plates in Istanbul begin with the number 34.\nPlates that do not begin with the number 34 are not from Istanbul. \nJoe's vehicle registration plate is from Istanbul. \nTom's license plate begins with the number 35. \nIf a license plate begins with the number 35, then it does not begin with the number 34.\n</Premises>\n<Conclusion>\nTom's license plate is from Istanbul.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Tom's license plate is from Istanbul.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.",
        "conclusions": "Hannah needs to earn money to help pay for her college tuition.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 works_in_student_jobs: Optional[bool] = None,\n                 needs_money: Optional[bool] = None,\n                 enjoys_dining_hall: Optional[bool] = None,\n                 is_picky_eater: Optional[bool] = None,\n                 spends_time_eating: Optional[bool] = None):\n        self.name = name\n        self.works_in_student_jobs = works_in_student_jobs\n        self.needs_money = needs_money\n        self.enjoys_dining_hall = enjoys_dining_hall\n        self.is_picky_eater = is_picky_eater\n        self.spends_time_eating = spends_time_eating\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n    if person.name == \"Hannah\" and person.works_in_student_jobs is True:\n        if person.needs_money is None:\n            person.needs_money = True\n            changed = True\n\n    # Premise 2: If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\n    if person.name == \"Hannah\" and person.works_in_student_jobs is None and person.needs_money is None:\n        if person.needs_money is None:\n            person.needs_money = False\n            changed = True\n\n    # Premise 3: People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\n    if person.name == \"Hannah\" and person.enjoys_dining_hall is None and (person.works_in_student_jobs is True or person.needs_money is True):\n        if person.enjoys_dining_hall is None:\n            person.enjoys_dining_hall = False\n            changed = True\n\n    # Premise 4: If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\n    if person.name == \"Hannah\" and person.enjoys_dining_hall is True and person.is_picky_eater is None:\n        if person.is_picky_eater is None:\n            person.is_picky_eater = False\n            changed = True\n\n    # Premise 5: If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n    if person.name == \"Hannah\" and person.spends_time_eating is None and person.enjoys_dining_hall is True:\n        if person.spends_time_eating is None:\n            person.spends_time_eating = True\n            changed = True\n\n    # Premise 6: Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n    if person.name == \"Hannah\" and person.works_in_student_jobs is True and person.needs_money is not None and person.is_picky_eater is not True and person.spends_time_eating is not True:\n        if person.needs_money is True:\n            person.needs_money = False\n            changed = True\n        elif person.needs_money is False:\n            person.needs_money = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.needs_money is None:\n        return \"Uncertain\"\n    elif person.needs_money is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    hannah = Person(\n        name=\"Hannah\",\n        works_in_student_jobs=None,\n        needs_money=None,\n        enjoys_dining_hall=None,\n        is_picky_eater=None,\n        spends_time_eating=None\n    )\n    return check_conclusion(hannah)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Hannah needs to earn money to help pay for her college tuition?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n</Premises>\n<Conclusion>\nHannah needs to earn money to help pay for her college tuition.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Hannah needs to earn money to help pay for her college tuition.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.",
        "conclusions": "Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_picky_eater: Optional[bool] = None, spends_time_eating: Optional[bool] = None):\n        self.name = name\n        self.is_picky_eater = is_picky_eater\n        self.spends_time_eating = spends_time_eating\n\nclass MarySchool:\n    def __init__(self, works_in_student_jobs: Optional[bool] = None, orders_takeout_frequently: Optional[bool] = None, enjoys_dining_hall: Optional[bool] = None):\n        self.works_in_student_jobs = works_in_student_jobs\n        self.orders_takeout_frequently = orders_takeout_frequently\n        self.enjoys_dining_hall = enjoys_dining_hall\n\ndef apply_premises(person: Person, mary_school: MarySchool) -> bool:\n    changed = False\n\n    # Premise 1: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n    if mary_school.works_in_student_jobs is True and person.spends_time_eating is None:\n        person.spends_time_eating = True\n        changed = True\n\n    # Premise 2: If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\n    if mary_school.orders_takeout_frequently is True and mary_school.works_in_student_jobs is not True:\n        mary_school.works_in_student_jobs = True\n        changed = True\n\n    # Premise 3: People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\n    if mary_school.orders_takeout_frequently is not True and mary_school.enjoys_dining_hall is not True:\n        mary_school.enjoys_dining_hall = True\n        changed = True\n\n    # Premise 4: If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\n    if mary_school.enjoys_dining_hall is True and person.is_picky_eater is not False:\n        person.is_picky_eater = False\n        changed = True\n\n    # Premise 5: If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n    if mary_school.enjoys_dining_hall is True and person.spends_time_eating is not True:\n        person.spends_time_eating = True\n        changed = True\n\n    # Premise 6: Hannah is at Mary's school.\n    if person.name == \"Hannah\" and (person.spends_time_eating is None or person.is_picky_eater is None):\n        person.spends_time_eating = True\n        person.is_picky_eater = False\n        changed = True\n\n    # Premise 7: If Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n    if person.name == \"Hannah\" and person.spends_time_eating is None and person.is_picky_eater is None:\n        person.spends_time_eating = True\n        person.is_picky_eater = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person, mary_school: MarySchool):\n    while apply_premises(person, mary_school):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person, mary_school)\n    if person.name == \"Hannah\" and person.is_picky_eater is False and person.spends_time_eating is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(name=\"Hannah\", is_picky_eater=None, spends_time_eating=None)\n    mary_school = MarySchool(works_in_student_jobs=None, orders_takeout_frequently=None, enjoys_dining_hall=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls?\", result)",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n</Premises>\n<Conclusion>\nHannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.",
        "conclusions": "Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 works_in_student_jobs: Optional[bool] = None,\n                 needs_to_earn_money: Optional[bool] = None,\n                 is_picky_eater: Optional[bool] = None,\n                 spends_time_eating: Optional[bool] = None):\n        self.name = name\n        self.works_in_student_jobs = works_in_student_jobs\n        self.needs_to_earn_money = needs_to_earn_money\n        self.is_picky_eater = is_picky_eater\n        self.spends_time_eating = spends_time_eating\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\n    if person.name == \"Hannah\" and person.works_in_student_jobs is True and person.needs_to_earn_money is None:\n        person.needs_to_earn_money = True\n        changed = True\n\n    # Premise 2: If people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\n    if person.name == \"Hannah\" and person.works_in_student_jobs is None and person.needs_to_earn_money is True:\n        person.works_in_student_jobs = True\n        changed = True\n\n    # Premise 3: People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\n    # This premise does not provide direct information about Hannah's status, but it sets up the context.\n\n    # Premise 4: If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\n    if person.name == \"Hannah\" and person.is_picky_eater is None and person.spends_time_eating is None and person.needs_to_earn_money is False:\n        person.is_picky_eater = False\n        changed = True\n\n    # Premise 5: If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\n    if person.name == \"Hannah\" and person.is_picky_eater is False and person.spends_time_eating is None:\n        person.spends_time_eating = True\n        changed = True\n\n    # Premise 6: Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n    if person.name == \"Hannah\" and person.works_in_student_jobs is True and person.needs_to_earn_money is True:\n        person.is_picky_eater = False\n        person.needs_to_earn_money = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name != \"Hannah\":\n        return \"Uncertain\"\n    if person.is_picky_eater is None or person.spends_time_eating is None:\n        return \"Uncertain\"\n    if person.is_picky_eater is False or (person.is_picky_eater is True and person.spends_time_eating is True):\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"Hannah\",\n        works_in_student_jobs=None,\n        needs_to_earn_money=None,\n        is_picky_eater=None,\n        spends_time_eating=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls?\", result)",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition.\nIf people at Mary's school order takeout frequently in college, then they work in student jobs on campus.\nPeople at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters.\nIf people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.\nHannah is at Mary's school.\nHannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition.\n</Premises>\n<Conclusion>\nHannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are products of Baked by Melissa.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Product:\n    def __init__(self, name: str, is_spicy: Optional[bool] = None, is_from_baked_by_melissa: Optional[bool] = None):\n        self.name = name\n        self.is_spicy = is_spicy\n        self.is_from_baked_by_melissa = is_from_baked_by_melissa\n\nclass BakedSweet(Product):\n    pass\n\nclass Cupcake(BakedSweet):\n    pass\n\nclass MalaHotpot(Product):\n    pass\n\nclass DriedThaiChili(Product):\n    pass\n\ndef apply_premises(product: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    if isinstance(product, BakedSweet):\n        if product.is_spicy is None:\n            product.is_spicy = False\n            changed = True\n\n    # Premise 2: All cupcakes are baked sweets.\n    if isinstance(product, Cupcake):\n        if not isinstance(product, BakedSweet):\n            product = BakedSweet(name=product.name, is_spicy=None, is_from_baked_by_melissa=None)\n            changed = True\n\n    # Premise 3: All mala hotpots are spicy.\n    if isinstance(product, MalaHotpot):\n        if product.is_spicy is None:\n            product.is_spicy = True\n            changed = True\n\n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    if product.is_from_baked_by_melissa is None and isinstance(product, Cupcake):\n        product.is_from_baked_by_melissa = True\n        changed = True\n\n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    if isinstance(product, DriedThaiChili):\n        if product.is_spicy is None:\n            product.is_spicy = True\n            changed = True\n        if not isinstance(product, BakedSweet):\n            product.is_spicy = True\n            changed = True\n        if not any([isinstance(product, MalaHotpot), product.is_spicy is True]):\n            product.is_spicy = False\n            changed = True\n\n    return changed\n\ndef run_inference(product: Product):\n    while apply_premises(product):\n        pass\n\ndef check_conclusion(product: Product) -> str:\n    run_inference(product)\n    if product.is_from_baked_by_melissa is None:\n        return \"Uncertain\"\n    if product.is_from_baked_by_melissa is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions\n    dried_thai_chili = DriedThaiChili(name=\"Dried Thai Chilies\")\n    return check_conclusion(dried_thai_chili)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are products of Baked by Melissa?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</Premises>\n<Conclusion>\nDried Thai chilies are products of Baked by Melissa.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are products of Baked by Melissa.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are not products of Baked by Melissa.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Product:\n    def __init__(self, name: str, is_spicy: Optional[bool] = None, is_from_baked_by_melissa: Optional[bool] = None):\n        self.name = name\n        self.is_spicy = is_spicy\n        self.is_from_baked_by_melissa = is_from_baked_by_melissa\n\ndef apply_premises(product: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    # This premise does not directly affect the state of the product.\n    \n    # Premise 2: All cupcakes are baked sweets.\n    # This premise does not directly affect the state of the product.\n    \n    # Premise 3: All mala hotpots are spicy.\n    if product.name == \"mala hotpot\":\n        if product.is_spicy is None:\n            product.is_spicy = True\n            changed = True\n    \n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    if product.name == \"cupcake\":\n        if product.is_from_baked_by_melissa is None:\n            product.is_from_baked_by_melissa = True\n            changed = True\n    \n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    if product.name == \"dried Thai chilies\":\n        if product.is_spicy is None:\n            product.is_spicy = True\n            changed = True\n    \n    return changed\n\ndef run_inference(product: Product):\n    while apply_premises(product):\n        pass\n\ndef check_conclusion(product: Product) -> str:\n    run_inference(product)\n    if product.name == \"dried Thai chilies\" and product.is_from_baked_by_melissa is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    product = Product(name=\"dried Thai chilies\", is_spicy=None, is_from_baked_by_melissa=None)\n    return check_conclusion(product)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are not products of Baked by Melissa?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</Premises>\n<Conclusion>\nDried Thai chilies are not products of Baked by Melissa.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are not products of Baked by Melissa.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are a mala hotpot.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Product:\n    def __init__(self, name: str, is_spicy: Optional[bool] = None, is_mala_hotpot: Optional[bool] = None):\n        self.name = name\n        self.is_spicy = is_spicy\n        self.is_mala_hotpot = is_mala_hotpot\n\ndef apply_premises(chili: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    if chili.name == \"Dried Thai chilies\":\n        if chili.is_spicy is None and chili.is_mala_hotpot is None:\n            chili.is_spicy = False\n            changed = True\n\n    # Premise 2: All cupcakes are baked sweets.\n    if chili.name == \"Dried Thai chilies\":\n        if chili.is_spicy is None and chili.is_mala_hotpot is None:\n            if not chili.is_spicy:\n                chili.is_spicy = True\n                changed = True\n\n    # Premise 3: All mala hotpots are spicy.\n    if chili.name == \"Dried Thai chilies\":\n        if chili.is_spicy is None and chili.is_mala_hotpot is None:\n            if chili.is_spicy:\n                chili.is_mala_hotpot = True\n                changed = True\n\n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    # This premise does not directly affect dried Thai chilies, so no change here.\n\n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    if chili.name == \"Dried Thai chilies\":\n        if chili.is_spicy is None and chili.is_mala_hotpot is None:\n            chili.is_spicy = True\n            chili.is_mala_hotpot = True\n            changed = True\n\n    return changed\n\ndef run_inference(chili: Product):\n    while apply_premises(chili):\n        pass\n\ndef check_conclusion(chili: Product) -> str:\n    run_inference(chili)\n    if chili.is_mala_hotpot is True:\n        return \"True\"\n    elif chili.is_mala_hotpot is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    chili = Product(name=\"Dried Thai chilies\")\n    return check_conclusion(chili)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are a mala hotpot?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</Premises>\n<Conclusion>\nDried Thai chilies are a mala hotpot.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are a mala hotpot.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Product:\n    def __init__(self,\n                 is_spicy: Optional[bool] = None,\n                 is_from_baked_by_melissa: Optional[bool] = None,\n                 is_baked_sweet: Optional[bool] = None):\n        self.is_spicy = is_spicy\n        self.is_from_baked_by_melissa = is_from_baked_by_melissa\n        self.is_baked_sweet = is_baked_sweet\n\ndef apply_premises(chili: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    # If a product is a baked sweet, it cannot be spicy.\n    if chili.is_baked_sweet is True and chili.is_spicy is not False:\n        chili.is_spicy = False\n        changed = True\n\n    # Premise 2: All cupcakes are baked sweets.\n    # If a product is a cupcake, it is a baked sweet.\n    if chili.is_from_baked_by_melissa is True and chili.is_baked_sweet is not True:\n        chili.is_baked_sweet = True\n        changed = True\n\n    # Premise 3: All mala hotpots are spicy.\n    # If a product is a mala hotpot, it is spicy.\n    if chili.is_baked_sweet is False and chili.is_from_baked_by_melissa is False and chili.is_spicy is not True:\n        chili.is_spicy = True\n        changed = True\n\n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    # If a product is from Baked by Melissa, it is a cupcake.\n    if chili.is_from_baked_by_melissa is True and chili.is_baked_sweet is not True:\n        chili.is_baked_sweet = True\n        changed = True\n\n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    # If a product is a dried Thai chili, it is spicy, a mala hotpot, or not a baked sweet.\n    if chili.is_baked_sweet is not False and chili.is_spicy is not True and chili.is_from_baked_by_melissa is not True:\n        chili.is_spicy = True\n        changed = True\n\n    return changed\n\ndef run_inference(chili: Product):\n    while apply_premises(chili):\n        pass\n\ndef check_conclusion(chili: Product) -> str:\n    run_inference(chili)\n    # Conclusion: Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.\n    if chili.is_from_baked_by_melissa is True or chili.is_baked_sweet is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    # Initial conditions: Dried Thai chilies are not specified to be from Baked by Melissa or baked sweets.\n    chili = Product(is_spicy=None, is_from_baked_by_melissa=None, is_baked_sweet=None)\n    return check_conclusion(chili)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are neither products of Baked by Melissa nor baked sweets?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</Premises>\n<Conclusion>\nDried Thai chilies are neither products of Baked by Melissa nor baked sweets.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are neither products of Baked by Melissa nor baked sweets.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.",
        "conclusions": "Dried Thai chilies are cupcakes and products of Baked by Melissa.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Product:\n    def __init__(self,\n                 is_baked_sweet: Optional[bool] = None,\n                 is_spicy: Optional[bool] = None,\n                 is_cupcake: Optional[bool] = None,\n                 is_mala_hotpot: Optional[bool] = None,\n                 is_from_baked_by_melissa: Optional[bool] = None,\n                 is_dried_thai_chili: Optional[bool] = None):\n        self.is_baked_sweet = is_baked_sweet\n        self.is_spicy = is_spicy\n        self.is_cupcake = is_cupcake\n        self.is_mala_hotpot = is_mala_hotpot\n        self.is_from_baked_by_melissa = is_from_baked_by_melissa\n        self.is_dried_thai_chili = is_dried_thai_chili\n\ndef apply_premises(product: Product) -> bool:\n    changed = False\n\n    # Premise 1: No baked sweets are spicy.\n    if product.is_baked_sweet is True and product.is_spicy is True:\n        product.is_spicy = False\n        changed = True\n\n    # Premise 2: All cupcakes are baked sweets.\n    if product.is_cupcake is True and product.is_baked_sweet is not True:\n        product.is_baked_sweet = True\n        changed = True\n\n    # Premise 3: All mala hotpots are spicy.\n    if product.is_mala_hotpot is True and product.is_spicy is not True:\n        product.is_spicy = True\n        changed = True\n\n    # Premise 4: All products from Baked by Melissa are cupcakes.\n    if product.is_from_baked_by_melissa is True and product.is_cupcake is not True:\n        product.is_cupcake = True\n        changed = True\n\n    # Premise 5: Dried Thai chilies are spicy or mala hotpots or not baked sweets.\n    if product.is_dried_thai_chili is True:\n        if product.is_spicy is None:\n            product.is_spicy = True\n            changed = True\n        if product.is_mala_hotpot is None:\n            product.is_mala_hotpot = True\n            changed = True\n        if product.is_baked_sweet is None:\n            product.is_baked_sweet = False\n            changed = True\n\n    return changed\n\ndef run_inference(product: Product):\n    while apply_premises(product):\n        pass\n\ndef check_conclusion(product: Product) -> str:\n    run_inference(product)\n    if product.is_dried_thai_chili is True:\n        if product.is_cupcake is True and product.is_from_baked_by_melissa is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    product = Product(\n        is_baked_sweet=None,\n        is_spicy=None,\n        is_cupcake=None,\n        is_mala_hotpot=None,\n        is_from_baked_by_melissa=None,\n        is_dried_thai_chili=True\n    )\n    return check_conclusion(product)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dried Thai chilies are cupcakes and products of Baked by Melissa?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo baked sweets are spicy.\nAll cupcakes are baked sweets.\nAll mala hotpots are spicy.\nAll products from Baked by Melissa are cupcakes.\nDried Thai chilies are spicy or mala hotpots or not baked sweets.\n</Premises>\n<Conclusion>\nDried Thai chilies are cupcakes and products of Baked by Melissa.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Dried Thai chilies are cupcakes and products of Baked by Melissa.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.",
        "conclusions": "If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Restaurant:\n    def __init__(self,\n                 provides_take_out: Optional[bool] = None,\n                 has_negative_reviews: Optional[bool] = None,\n                 rating: Optional[int] = None):\n        self.provides_take_out = provides_take_out\n        self.has_negative_reviews = has_negative_reviews\n        self.rating = rating\n\ndef apply_premises(store: Restaurant) -> bool:\n    changed = False\n\n    # Premise 1: If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\n    if store.rating > 4 and store.has_negative_reviews is not False:\n        store.has_negative_reviews = False\n        changed = True\n\n    # Premise 2: All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\n    if store.rating > 4 and store.provides_take_out is None:\n        store.provides_take_out = False\n        changed = True\n\n    # Premise 3: Some restaurants that do not provide take-out service receive many negative reviews.\n    if not store.provides_take_out and store.has_negative_reviews is None:\n        store.has_negative_reviews = True\n        changed = True\n\n    # Premise 4: All restaurants that are popular among local residents have ratings greater than four.\n    if store.provides_take_out is None and store.rating is None:\n        store.rating = 5\n        store.provides_take_out = True\n        changed = True\n\n    # Premise 5: The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n    if store.rating is None:\n        store.rating = 5\n        store.provides_take_out = True\n        changed = True\n\n    return changed\n\ndef run_inference(store: Restaurant):\n    while apply_premises(store):\n        pass\n\ndef check_conclusion(store: Restaurant) -> str:\n    run_inference(store)\n    if (store.has_negative_reviews is True and store.provides_take_out is True and\n            store.rating > 4 and store.provides_take_out is False):\n        return \"True\"\n    else:\n        return \"False\" if (store.has_negative_reviews is True and store.provides_take_out is True and\n                           store.rating > 4 and store.provides_take_out is False) else \"Uncertain\"\n\ndef func():\n    store = Restaurant(\n        provides_take_out=None,\n        has_negative_reviews=None,\n        rating=None\n    )\n    return check_conclusion(store)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n</Premises>\n<Conclusion>\nIf the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.",
        "conclusions": "The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Restaurant:\n    def __init__(self,\n                 has_take_out: Optional[bool] = None,\n                 rating: Optional[int] = None,\n                 listed_in_yelp: Optional[bool] = None,\n                 negative_reviews: Optional[bool] = None,\n                 popular_among_residents: Optional[bool] = None):\n        self.has_take_out = has_take_out\n        self.rating = rating\n        self.listed_in_yelp = listed_in_yelp\n        self.negative_reviews = negative_reviews\n        self.popular_among_residents = popular_among_residents\n\ndef apply_premises(restaurant: Restaurant) -> bool:\n    changed = False\n\n    # Premise 2: All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\n    if restaurant.rating > 4 and restaurant.listed_in_yelp is None:\n        restaurant.listed_in_yelp = True\n        changed = True\n\n    # Premise 1: If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\n    if restaurant.listed_in_yelp is True and restaurant.negative_reviews is None:\n        restaurant.negative_reviews = False\n        changed = True\n\n    # Premise 3: Some restaurants that do not provide take-out service receive many negative reviews.\n    # This does not directly change the state but informs us that there are such restaurants.\n    # No direct update needed for this premise.\n\n    # Premise 4: All restaurants that are popular among local residents have ratings greater than four.\n    if restaurant.popular_among_residents is True and restaurant.rating is None:\n        restaurant.rating = 5  # Assume the highest rating for simplicity\n        changed = True\n\n    # Premise 5: The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n    if restaurant.name == \"The Hamden Plaza Subway store\":\n        if restaurant.rating is None:\n            restaurant.rating = 5  # Assume the highest rating for simplicity\n            changed = True\n        if restaurant.popular_among_residents is None:\n            restaurant.popular_among_residents = True\n            changed = True\n\n    return changed\n\ndef run_inference(restaurant: Restaurant):\n    while apply_premises(restaurant):\n        pass\n\ndef check_conclusion(restaurant: Restaurant) -> str:\n    run_inference(restaurant)\n    # Conclusion: The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.\n    if restaurant.has_take_out is None and restaurant.negative_reviews is None:\n        return \"Uncertain\"\n    if restaurant.has_take_out is True or restaurant.negative_reviews is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions:\n    restaurant = Restaurant(\n        name=\"The Hamden Plaza Subway store\",\n        has_take_out=None,\n        rating=None,\n        listed_in_yelp=None,\n        negative_reviews=None,\n        popular_among_residents=None\n    )\n    return check_conclusion(restaurant)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n</Premises>\n<Conclusion>\nThe Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.",
        "conclusions": "The Hamden Plaza store does not provide take-out service.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Restaurant:\n    def __init__(self,\n                 rating: Optional[int] = None,\n                 listed_in_yelp: Optional[bool] = None,\n                 popular_among_residents: Optional[bool] = None,\n                 provides_take_out: Optional[bool] = None):\n        self.rating = rating\n        self.listed_in_yelp = listed_in_yelp\n        self.popular_among_residents = popular_among_residents\n        self.provides_take_out = provides_take_out\n\ndef apply_premises(restaurant: Restaurant) -> bool:\n    changed = False\n\n    # Premise 1: If a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\n    # Since we are not given information about negative reviews, we focus on the implications of being listed in Yelp's recommendations.\n    if restaurant.listed_in_yelp is True:\n        if restaurant.rating is None:\n            restaurant.rating = 5  # Assuming a rating greater than 4\n            changed = True\n        if restaurant.popular_among_residents is None:\n            restaurant.popular_among_residents = False\n            changed = True\n\n    # Premise 2: All restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\n    if restaurant.rating > 4:\n        if restaurant.listed_in_yelp is None:\n            restaurant.listed_in_yelp = True\n            changed = True\n\n    # Premise 3: Some restaurants that do not provide take-out service receive many negative reviews.\n    # This does not directly affect the take-out service, so no changes here.\n\n    # Premise 4: All restaurants that are popular among local residents have ratings greater than four.\n    if restaurant.popular_among_residents is True:\n        if restaurant.rating is None:\n            restaurant.rating = 5\n            changed = True\n\n    # Premise 5: The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n    if restaurant.name == \"The Hamden Plaza Subway store\":\n        if restaurant.rating is None:\n            restaurant.rating = 5  # Assuming a rating greater than 4\n            changed = True\n        if restaurant.popular_among_residents is None:\n            restaurant.popular_among_residents = True\n            changed = True\n\n    return changed\n\ndef run_inference(restaurant: Restaurant):\n    while apply_premises(restaurant):\n        pass\n\ndef check_conclusion(restaurant: Restaurant) -> str:\n    run_inference(restaurant)\n    if restaurant.provides_take_out is None:\n        return \"Uncertain\"\n    if not restaurant.provides_take_out:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions:\n    # The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n    restaurant = Restaurant(\n        name=\"The Hamden Plaza Subway store\",\n        rating=None,\n        listed_in_yelp=None,\n        popular_among_residents=None,\n        provides_take_out=None\n    )\n    return check_conclusion(restaurant)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Hamden Plaza store does not provide take-out service?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf a restaurant is listed in Yelp\u2019s recommendations, then the restaurant has not received many negative reviews.\nAll restaurants with a rating greater than four are listed in Yelp\u2019s recommendations.\nSome restaurants that do not provide take-out service receive many negative reviews.\nAll restaurants that are popular among local residents have ratings greater than four.\nThe Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents.\n</Premises>\n<Conclusion>\nThe Hamden Plaza store does not provide take-out service.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The Hamden Plaza store does not provide take-out service.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "In superhero movies, the good guys always win.\nThe Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\nGood guys fight bad guys and vice versa.\nSir Digby fights his nemesis.\nIf a superhero movie is named after a character, that character is a good guy.\nThe Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\nIf somebody wins a fight, the person they are fighting does not win.\nIf a superhero movie is named after a character, that character is in the movie.",
        "conclusions": "Sir Digby\u2019s nemesis does not win.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Character:\n    def __init__(self, name: str, is_good_guy: Optional[bool] = None, is_nemesis: Optional[bool] = None):\n        self.name = name\n        self.is_good_guy = is_good_guy\n        self.is_nemesis = is_nemesis\n\nclass Movie:\n    def __init__(self, name: str, is_superhero_movie: Optional[bool] = None, named_after_character: Optional[bool] = None):\n        self.name = name\n        self.is_superhero_movie = is_superhero_movie\n        self.named_after_character = named_after_character\n\ndef apply_premises(movie: Movie, character: Character) -> bool:\n    changed = False\n\n    # Premise 1: In superhero movies, the good guys always win.\n    # This premise does not directly affect the characters' win status, so we skip it for inference.\n\n    # Premise 2: The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\n    if movie.name == \"The Surprising Adventures of Sir Digby Chicken Caesar\" and movie.is_superhero_movie is None:\n        movie.is_superhero_movie = True\n        changed = True\n\n    # Premise 3: Good guys fight bad guys and vice versa.\n    # This premise does not directly affect the characters' win status, so we skip it for inference.\n\n    # Premise 4: Sir Digby fights his nemesis.\n    if character.name == \"Sir Digby\" and character.is_nemesis is None:\n        character.is_nemesis = True\n        changed = True\n\n    # Premise 5: If a superhero movie is named after a character, that character is a good guy.\n    if movie.name == \"The Surprising Adventures of Sir Digby Chicken Caesar\" and movie.named_after_character is True and character.is_good_guy is None:\n        character.is_good_guy = True\n        changed = True\n\n    # Premise 6: The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\n    if movie.name == \"The Surprising Adventures of Sir Digby Chicken Caesar\" and movie.named_after_character is None:\n        movie.named_after_character = True\n        changed = True\n\n    # Premise 7: If somebody wins a fight, the person they are fighting does not win.\n    if character.is_nemesis is True and character.is_good_guy is not False:\n        # If Sir Digby is a good guy and he fights his nemesis, his nemesis cannot win.\n        character.is_nemesis = True  # Already set, so no change here.\n        changed = True\n\n    # Premise 8: If a superhero movie is named after a character, that character is in the movie.\n    if movie.name == \"The Surprising Adventures of Sir Digby Chicken Caesar\" and movie.named_after_character is True:\n        character.is_good_guy = True  # Reaffirms the character is a good guy.\n        changed = True\n\n    return changed\n\ndef run_inference(movie: Movie, character: Character):\n    while apply_premises(movie, character):\n        pass\n\ndef check_conclusion(movie: Movie, character: Character) -> str:\n    run_inference(movie, character)\n    if character.is_good_guy is True and character.is_nemesis is True:\n        # If Sir Digby is a good guy and he fights his nemesis, his nemesis cannot win.\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    movie = Movie(name=\"The Surprising Adventures of Sir Digby Chicken Caesar\",\n                  is_superhero_movie=None,\n                  named_after_character=None)\n    character = Character(name=\"Sir Digby\", is_good_guy=None, is_nemesis=None)\n    return check_conclusion(movie, character)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Sir Digby\u2019s nemesis does not win?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIn superhero movies, the good guys always win.\nThe Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.\nGood guys fight bad guys and vice versa.\nSir Digby fights his nemesis.\nIf a superhero movie is named after a character, that character is a good guy.\nThe Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.\nIf somebody wins a fight, the person they are fighting does not win.\nIf a superhero movie is named after a character, that character is in the movie.\n</Premises>\n<Conclusion>\nSir Digby\u2019s nemesis does not win.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Sir Digby\u2019s nemesis does not win.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Books contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.",
        "conclusions": "Walden contains knowledge.",
        "rationale": "from typing import Optional\n\nclass Book:\n    def __init__(self, name: str, contains\u77e5\u8bc6: Optional[bool] = None):\n        self.name = name\n        self.contains\u77e5\u8bc6 = contains\u77e5\u8bc6  # can be True, False, or None\n\nclass Person:\n    def __init__(self, name: str, has\u77e5\u8bc6: Optional[bool] = None):\n        self.name = name\n        self.has\u77e5\u8bc6 = has\u77e5\u8bc6  # can be True, False, or None\n\ndef apply_premises(book: Book, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Books contain tons of knowledge.\n    if book.contains\u77e5\u8bc6 is None:\n        book.contains\u77e5\u8bc6 = True\n        changed = True\n\n    # Premise 2: When a person reads a book, that person gains knowledge.\n    if person.name == \"Harry\" and book.name == \"Walden\" and book.contains\u77e5\u8bc6 is True and person.has\u77e5\u8bc6 is not True:\n        person.has\u77e5\u8bc6 = True\n        changed = True\n\n    # Premise 3: If a person gains knowledge, they become smarter.\n    # No action needed for this premise as it only describes a consequence.\n\n    # Premise 4: Harry read the book \"Walden\" by Henry Thoreau.\n    # This premise is used to trigger the second premise to update the person's knowledge state.\n    if person.name == \"Harry\" and book.name == \"Walden\":\n        changed = True\n\n    return changed\n\ndef run_inference(book: Book, person: Person):\n    while apply_premises(book, person):\n        pass\n\ndef check_conclusion(book: Book) -> str:\n    run_inference(book, Person(name=\"Harry\"))\n    if book.contains\u77e5\u8bc6 is True:\n        return \"True\"\n    elif book.contains\u77e5\u8bc6 is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    book = Book(name=\"Walden\", contains\u77e5\u8bc6=None)\n    return check_conclusion(book)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Walden contains knowledge?\", result)",
        "label": "True",
        "predict": "Unknow",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBooks contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\n</Premises>\n<Conclusion>\nWalden contains knowledge.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Walden contains knowledge.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Books contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.",
        "conclusions": "Harry is smarter than before.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Book:\n    def __init__(self, title: str, author: str):\n        self.title = title\n        self.author = author\n\nclass Person:\n    def __init__(self, name: str, smarter: Optional[bool] = None):\n        self.name = name\n        self.smarter = smarter\n\ndef apply_premises(person: Person, book: Book) -> bool:\n    changed = False\n\n    # Premise 1: Books contain tons of knowledge.\n    # This premise is a general statement and does not directly affect person's knowledge.\n\n    # Premise 2: When a person reads a book, that person gains knowledge.\n    if person.name == \"Harry\" and book.title == \"Walden\" and book.author == \"Henry Thoreau\" and person.smarter is None:\n        person.smarter = True\n        changed = True\n\n    # Premise 3: If a person gains knowledge, they become smarter.\n    if person.smarter is True:\n        person.smarter = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person, book: Book):\n    while apply_premises(person, book):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person, Book(\"Walden\", \"Henry Thoreau\"))\n    if person.smarter is True:\n        return \"True\"\n    elif person.smarter is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(name=\"Harry\", smarter=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Harry is smarter than before?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBooks contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\n</Premises>\n<Conclusion>\nHarry is smarter than before.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Harry is smarter than before.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Books contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.",
        "conclusions": "A smarter person has gained knowledge.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, smarter: Optional[bool] = None, has_gained_knowledge: Optional[bool] = None):\n        self.name = name\n        self.smarter = smarter\n        self.has_gained_knowledge = has_gained_knowledge\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Books contain tons of knowledge.\n    # This premise does not directly affect the state of the person.\n\n    # Premise 2: When a person reads a book, that person gains knowledge.\n    if person.name == \"Harry\" and person.has_gained_knowledge is None and person.smarter is None:\n        person.has_gained_knowledge = True\n        person.smarter = True\n        changed = True\n\n    # Premise 3: If a person gains knowledge, they become smarter.\n    if person.has_gained_knowledge is True and person.smarter is not True:\n        person.smarter = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: A smarter person has gained knowledge.\n    if person.smarter is True and person.has_gained_knowledge is not False:\n        return \"True\"\n    elif person.smarter is False or person.has_gained_knowledge is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions:\n    # Harry read the book \"Walden\" by Henry Thoreau.\n    person = Person(name=\"Harry\", smarter=None, has_gained_knowledge=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: A smarter person has gained knowledge?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBooks contain tons of knowledge.\nWhen a person reads a book, that person gains knowledge. \nIf a person gains knowledge, they become smarter.\nHarry read the book \u201cWalden\u201d by Henry Thoreau.\n</Premises>\n<Conclusion>\nA smarter person has gained knowledge.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? A smarter person has gained knowledge.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "A natural language processing task can be categorized as either a language generation task or a language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.",
        "conclusions": "Machine translation is a language generation task.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Task:\n    def __init__(self, category: Optional[str] = None, is_generation: Optional[bool] = None):\n        self.category = category\n        self.is_generation = is_generation\n\ndef apply_premises(task: Task) -> bool:\n    changed = False\n\n    # Premise 1: A natural language processing task can be categorized as either a language generation task or a language understanding task.\n    if task.category is None:\n        task.category = \"language generation\"  # We assume it's a generation task for the given premises.\n        changed = True\n\n    # Premise 2: If the output of a natural language processing task is a text sequence, then it is a language generation task.\n    if task.category is not None and task.is_generation is None:\n        task.is_generation = True\n        changed = True\n\n    # Premise 3: Machine translation is a natural language processing task.\n    if task.category is not None and task.is_generation is None:\n        task.is_generation = True  # Since machine translation outputs a text sequence, it must be a generation task.\n        changed = True\n\n    # Premise 4: The output of machine translation is a text sequence.\n    if task.is_generation is None:\n        task.is_generation = True  # Given that machine translation outputs a text sequence, it is a generation task.\n        changed = True\n\n    return changed\n\ndef run_inference(task: Task):\n    while apply_premises(task):\n        pass\n\ndef check_conclusion(task: Task) -> str:\n    run_inference(task)\n    if task.is_generation is True:\n        return \"True\"\n    elif task.is_generation is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    task = Task()\n    return check_conclusion(task)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Machine translation is a language generation task?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nA natural language processing task can be categorized as either a language generation task or a language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</Premises>\n<Conclusion>\nMachine translation is a language generation task.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Machine translation is a language generation task.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "A natural language processing task can be categorized as either a language generation task or a language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.",
        "conclusions": "Machine translation is a language understanding task.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Task:\n    def __init__(self, category: Optional[str] = None):\n        self.category = category\n\nclass LanguageProcessingTask(Task):\n    def __init__(self, is_language_generation: Optional[bool] = None, is_language_understanding: Optional[bool] = None):\n        super().__init__()\n        self.is_language_generation = is_language_generation\n        self.is_language_understanding = is_language_understanding\n\ndef apply_premises(task: LanguageProcessingTask) -> bool:\n    changed = False\n\n    # Premise 1: A natural language processing task can be categorized as either a language generation task or a language understanding task.\n    if task.category is None:\n        task.category = \"language generation or language understanding\"\n        changed = True\n\n    # Premise 2: If the output of a natural language processing task is a text sequence, then it is a language generation task.\n    if task.is_language_generation is None and task.category == \"language generation or language understanding\":\n        task.is_language_generation = True\n        changed = True\n\n    # Premise 3: Machine translation is a natural language processing task.\n    if task.category == \"language generation or language understanding\" and task.category != \"machine translation\":\n        task.category = \"machine translation\"\n        changed = True\n\n    # Premise 4: The output of machine translation is a text sequence.\n    if task.is_language_generation is None and task.category == \"machine translation\":\n        task.is_language_generation = True\n        changed = True\n\n    return changed\n\ndef run_inference(task: LanguageProcessingTask):\n    while apply_premises(task):\n        pass\n\ndef check_conclusion(task: LanguageProcessingTask) -> str:\n    run_inference(task)\n    if task.category == \"machine translation\" and task.is_language_understanding is None:\n        return \"Uncertain\"\n    elif task.category == \"machine translation\" and task.is_language_understanding is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    task = LanguageProcessingTask()\n    return check_conclusion(task)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Machine translation is a language understanding task?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nA natural language processing task can be categorized as either a language generation task or a language understanding task.\nIf the output of a natural language processing task is a text sequence, then it is a language generation task.\nMachine translation is a natural language processing task.\nThe output of machine translation is a text sequence.\n</Premises>\n<Conclusion>\nMachine translation is a language understanding task.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Machine translation is a language understanding task.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Pets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. ",
        "conclusions": "Tom will rent an apartment in The Olive Garden.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Building:\n    def __init__(self, name: str, is_managed: bool = False, allows_pets: Optional[bool] = None, monthly_rent: Optional[int] = None, deposit: Optional[int] = None):\n        self.name = name\n        self.is_managed = is_managed\n        self.allows_pets = allows_pets\n        self.monthly_rent = monthly_rent\n        self.deposit = deposit\n\nclass Person:\n    def __init__(self, name: str, has_pet: Optional[bool] = None, can_rent: Optional[bool] = None):\n        self.name = name\n        self.has_pet = has_pet\n        self.can_rent = can_rent\n\ndef apply_premises(building: Building, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Pets are allowed in some managed buildings.\n    if building.is_managed is True and building.allows_pets is None:\n        building.allows_pets = True\n        changed = True\n\n    # Premise 2: A deposit is required to rent an apartment in a managed building.\n    if building.is_managed is True and building.deposit is None:\n        building.deposit = 0  # Placeholder, will be updated later\n\n    # Premise 3: The security deposit can be either equal to the monthly rent at a managed building or more.\n    if building.is_managed is True and building.deposit is None and building.monthly_rent is not None:\n        building.deposit = building.monthly_rent\n        changed = True\n\n    # Premise 4: Fluffy is Tom's cat.\n    if person.name == \"Tom\":\n        if person.has_pet is None:\n            person.has_pet = True\n            changed = True\n\n    # Premise 5: Cats are pets.\n    if person.has_pet is True and person.can_rent is None:\n        person.can_rent = True\n        changed = True\n\n    # Premise 6: The Olive Garden is a managed building.\n    if building.name == \"The Olive Garden\" and building.is_managed is None:\n        building.is_managed = True\n        changed = True\n\n    # Premise 7: The monthly rent at the Olive Garden is $2000.\n    if building.name == \"The Olive Garden\" and building.monthly_rent is None:\n        building.monthly_rent = 2000\n        changed = True\n\n    # Premise 8: $2000 is more than $1500.\n    if building.monthly_rent == 2000 and building.deposit is not None and building.deposit <= 1500:\n        building.deposit = 2000\n        changed = True\n\n    # Premise 9: Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n    if person.name == \"Tom\" and person.can_rent is True and building.allows_pets is True and building.deposit <= 1500:\n        person.can_rent = True\n        changed = True\n\n    # Premise 10: If a managed building allows pets, then people are allowed to move in with a pet.\n    if building.is_managed is True and building.allows_pets is True and person.has_pet is True:\n        person.can_rent = True\n        changed = True\n\n    return changed\n\ndef run_inference(building: Building, person: Person):\n    while apply_premises(building, person):\n        pass\n\ndef check_conclusion(building: Building, person: Person) -> str:\n    run_inference(building, person)\n    if person.name == \"Tom\" and person.can_rent is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    building = Building(name=\"The Olive Garden\", is_managed=None, allows_pets=None, monthly_rent=None, deposit=None)\n    person = Person(name=\"Tom\", has_pet=None, can_rent=None)\n    return check_conclusion(building, person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom will rent an apartment in The Olive Garden?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. \n</Premises>\n<Conclusion>\nTom will rent an apartment in The Olive Garden.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Tom will rent an apartment in The Olive Garden.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Pets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. ",
        "conclusions": "Tom is allowed to move into an apartment in The Olive Garden with Fluffy.",
        "rationale": "```python\nfrom typing import Optional\n\nclass ManagedBuilding:\n    def __init__(self, name: str, allows_pets: Optional[bool] = None, monthly_rent: Optional[int] = None, deposit: Optional[int] = None):\n        self.name = name\n        self.allows_pets = allows_pets\n        self.monthly_rent = monthly_rent\n        self.deposit = deposit\n\nclass Pet:\n    def __init__(self, name: str, is_pet: bool = True):\n        self.name = name\n        self.is_pet = is_pet\n\nclass Person:\n    def __init__(self, name: str, can_move_in_with_pet: Optional[bool] = None):\n        self.name = name\n        self.can_move_in_with_pet = can_move_in_with_pet\n\ndef apply_premises(building: ManagedBuilding, pet: Pet, person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Pets are allowed in some managed buildings.\n    if building.allows_pets is None:\n        building.allows_pets = True\n        changed = True\n\n    # Premise 2: A deposit is required to rent an apartment in a managed building.\n    if building.deposit is None:\n        building.deposit = 2000\n        changed = True\n\n    # Premise 3: The security deposit can be either equal to the monthly rent at a managed building or more.\n    if building.deposit is not None and building.monthly_rent is not None:\n        if building.deposit <= building.monthly_rent:\n            pass\n        elif building.deposit > building.monthly_rent:\n            pass\n        else:\n            building.deposit = building.monthly_rent\n            changed = True\n\n    # Premise 4: Fluffy is Tom's cat.\n    if pet.name == \"Fluffy\":\n        if pet.is_pet is None:\n            pet.is_pet = True\n            changed = True\n\n    # Premise 5: Cats are pets.\n    if pet.is_pet is None:\n        pet.is_pet = True\n        changed = True\n\n    # Premise 6: The Olive Garden is a managed building.\n    if building.name == \"The Olive Garden\":\n        if building.allows_pets is None:\n            building.allows_pets = True\n            changed = True\n        if building.monthly_rent is None:\n            building.monthly_rent = 2000\n            changed = True\n        if building.deposit is None:\n            building.deposit = 2000\n            changed = True\n\n    # Premise 7: $2000 is more than $1500.\n    if building.deposit is not None and 1500 < building.deposit <= 2000:\n        pass\n\n    # Premise 8: Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n    if person.name == \"Tom\":\n        if person.can_move_in_with_pet is None:\n            if building.allows_pets is True and building.deposit <= 1500:\n                person.can_move_in_with_pet = True\n                changed = True\n            else:\n                person.can_move_in_with_pet = False\n                changed = True\n\n    # Premise 9: If a managed building allows pets, then people are allowed to move in with a pet.\n    if building.allows_pets is True:\n        if person.can_move_in_with_pet is None:\n            person.can_move_in_with_pet = True\n            changed = True\n\n    return changed\n\ndef run_inference(building: ManagedBuilding, pet: Pet, person: Person):\n    while apply_premises(building, pet, person):\n        pass\n\ndef check_conclusion(building: ManagedBuilding, pet: Pet, person: Person) -> str:\n    run_inference(building, pet, person)\n    if person.can_move_in_with_pet is True:\n        return \"True\"\n    elif person.can_move_in_with_pet is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    building = ManagedBuilding(name=\"The Olive Garden\")\n    pet = Pet(name=\"Fluffy\")\n    person = Person(name=\"Tom\")\n    return check_conclusion(building, pet, person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is allowed to move into an apartment in The Olive Garden with Fluffy?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. \n</Premises>\n<Conclusion>\nTom is allowed to move into an apartment in The Olive Garden with Fluffy.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Tom is allowed to move into an apartment in The Olive Garden with Fluffy.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Pets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. ",
        "conclusions": "The security deposit at the Olive Garden is either $2000 or more.",
        "rationale": "```python\nfrom typing import Optional\n\nclass ManagedBuilding:\n    def __init__(self, name: str, allows_pets: Optional[bool] = None, monthly_rent: Optional[int] = None, security_deposit: Optional[int] = None):\n        self.name = name\n        self.allows_pets = allows_pets\n        self.monthly_rent = monthly_rent\n        self.security_deposit = security_deposit\n\nclass Person:\n    def __init__(self, name: str, has_cat: Optional[bool] = None):\n        self.name = name\n        self.has_cat = has_cat\n\ndef apply_premises(building: ManagedBuilding, person: Person):\n    changed = False\n\n    # Premise 1: Pets are allowed in some managed buildings.\n    # We do not know if Olive Garden is one of them, so we cannot change this premise here.\n    \n    # Premise 2: A deposit is required to rent an apartment in a managed building.\n    # This is a fact, no change needed.\n    \n    # Premise 3: The security deposit can be either equal to the monthly rent at a managed building or more.\n    # This is a fact, no change needed.\n    \n    # Premise 4: Fluffy is Tom's cat.\n    if person.name == \"Tom\":\n        if person.has_cat is None:\n            person.has_cat = True\n            changed = True\n    \n    # Premise 5: Cats are pets.\n    # This is a fact, no change needed.\n    \n    # Premise 6: The Olive Garden is a managed building.\n    if building.name == \"The Olive Garden\":\n        if building.allows_pets is None:\n            # Premise 8: If a managed building allows pets, then people are allowed to move in with a pet.\n            # We need to check if the building allows pets to determine if Tom can move in with Fluffy.\n            if person.has_cat is True and building.allows_pets is None:\n                building.allows_pets = True\n                changed = True\n    \n    # Premise 7: The monthly rent at the Olive Garden is $2000.\n    if building.name == \"The Olive Garden\":\n        if building.monthly_rent is None:\n            building.monthly_rent = 2000\n            changed = True\n    \n    # Premise 9: $2000 is more than $1500.\n    # This is a fact, no change needed.\n    \n    # Premise 10: Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\n    # We need to check if the security deposit is no more than $1500 to determine if Tom will rent an apartment.\n    if person.has_cat is True and building.allows_pets is True and building.security_deposit is not None:\n        if building.security_deposit > 1500:\n            changed = True\n\n    return changed\n\ndef run_inference(building: ManagedBuilding, person: Person):\n    while apply_premises(building, person):\n        pass\n\ndef check_conclusion(building: ManagedBuilding) -> str:\n    run_inference(building, Person(name=\"Tom\", has_cat=None))\n    if building.security_deposit is None:\n        return \"Uncertain\"\n    if building.security_deposit == 2000 or building.security_deposit > 2000:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    building = ManagedBuilding(name=\"The Olive Garden\", monthly_rent=2000)\n    return check_conclusion(building)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The security deposit at the Olive Garden is either $2000 or more?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPets are allowed in some managed buildings.\nA deposit is required to rent an apartment in a managed building.\nThe security deposit can be either equal to the monthly rent at a managed building or more.\nFluffy is Tom's cat.\nCats are pets.\nThe Olive Garden is a managed building.\nThe monthly rent at the Olive Garden is $2000.\n$2000 is more than $1500.\nTom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.\nIf a managed building allows pets, then people are allowed to move in with a pet. \n</Premises>\n<Conclusion>\nThe security deposit at the Olive Garden is either $2000 or more.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The security deposit at the Olive Garden is either $2000 or more.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. ",
        "conclusions": "The Harvard Weekly Book club has legal obligations.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Organization:\n    def __init__(self,\n                 is_business: Optional[bool] = None,\n                 is_company: Optional[bool] = None,\n                 is_private_company: Optional[bool] = None,\n                 is_legal_entity: Optional[bool] = None,\n                 created_under_law: Optional[bool] = None,\n                 has_legal_obligations: Optional[bool] = None):\n        self.is_business = is_business\n        self.is_company = is_company\n        self.is_private_company = is_private_company\n        self.is_legal_entity = is_legal_entity\n        self.created_under_law = created_under_law\n        self.has_legal_obligations = has_legal_obligations\n\ndef apply_premises(organization: Organization) -> bool:\n    changed = False\n\n    # Premise 1: All business organizations are legal entities.\n    if organization.is_business is True and organization.is_legal_entity is not True:\n        organization.is_legal_entity = True\n        changed = True\n\n    # Premise 2: All companies are business organizations.\n    if organization.is_company is True and organization.is_business is not True:\n        organization.is_business = True\n        changed = True\n\n    # Premise 3: All private companies are companies.\n    if organization.is_private_company is True and organization.is_company is not True:\n        organization.is_company = True\n        changed = True\n\n    # Premise 4: All legal entities are created under law.\n    if organization.is_legal_entity is True and organization.created_under_law is not True:\n        organization.created_under_law = True\n        changed = True\n\n    # Premise 5: All legal entities have legal obligations.\n    if organization.is_legal_entity is True and organization.has_legal_obligations is not True:\n        organization.has_legal_obligations = True\n        changed = True\n\n    # Premise 6: If the Harvard Weekly Book Club is created under law, then it is not a private company.\n    # Since we do not know if it is created under law, we cannot directly set is_private_company to False.\n    # We only know that if it is created under law, it is not a private company.\n    if organization.created_under_law is True and organization.is_private_company is True:\n        organization.is_private_company = False\n        changed = True\n\n    return changed\n\ndef run_inference(organization: Organization):\n    while apply_premises(organization):\n        pass\n\ndef check_conclusion(organization: Organization) -> str:\n    run_inference(organization)\n    if organization.has_legal_obligations is True:\n        return \"True\"\n    elif organization.has_legal_obligations is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    organization = Organization(\n        is_business=None,\n        is_company=None,\n        is_private_company=None,\n        is_legal_entity=None,\n        created_under_law=None,\n        has_legal_obligations=None\n    )\n    return check_conclusion(organization)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Harvard Weekly Book club has legal obligations?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. \n</Premises>\n<Conclusion>\nThe Harvard Weekly Book club has legal obligations.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The Harvard Weekly Book club has legal obligations.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. ",
        "conclusions": "The Harvard Weekly Book club has legal obligations and is a private company.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Organization:\n    def __init__(self, is_legal_entity: Optional[bool] = None, is_created_under_law: Optional[bool] = None, is_company: Optional[bool] = None, is_private_company: Optional[bool] = None, has_legal_obligations: Optional[bool] = None):\n        self.is_legal_entity = is_legal_entity\n        self.is_created_under_law = is_created_under_law\n        self.is_company = is_company\n        self.is_private_company = is_private_company\n        self.has_legal_obligations = has_legal_obligations\n\ndef apply_premises(organization: Organization) -> bool:\n    changed = False\n\n    # Premise 1: All business organizations are legal entities.\n    if organization.is_company and organization.is_business_organization is None:\n        organization.is_business_organization = True\n        changed = True\n\n    # Premise 2: All companies are business organizations.\n    if organization.is_company and organization.is_business_organization is not True:\n        organization.is_business_organization = True\n        changed = True\n\n    # Premise 3: All private companies are companies.\n    if organization.is_private_company and organization.is_company is not True:\n        organization.is_company = True\n        changed = True\n\n    # Premise 4: All legal entities are created under law.\n    if organization.is_legal_entity and organization.is_created_under_law is not True:\n        organization.is_created_under_law = True\n        changed = True\n\n    # Premise 5: All legal entities have legal obligations.\n    if organization.is_legal_entity and organization.has_legal_obligations is not True:\n        organization.has_legal_obligations = True\n        changed = True\n\n    # Premise 6: If the Harvard Weekly Book Club is created under law, then it is not a private company.\n    if organization.is_created_under_law and organization.is_private_company is not False:\n        organization.is_private_company = False\n        changed = True\n\n    return changed\n\ndef run_inference(organization: Organization):\n    while apply_premises(organization):\n        pass\n\ndef check_conclusion(organization: Organization) -> str:\n    run_inference(organization)\n    if organization.is_private_company is True and organization.has_legal_obligations is True:\n        return \"True\"\n    else:\n        return \"False\" if organization.is_private_company is not True or organization.has_legal_obligations is not True else \"Uncertain\"\n\ndef func():\n    organization = Organization(\n        is_legal_entity=None,\n        is_created_under_law=None,\n        is_company=None,\n        is_private_company=None,\n        has_legal_obligations=None\n    )\n    return check_conclusion(organization)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Harvard Weekly Book club has legal obligations and is a private company?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. \n</Premises>\n<Conclusion>\nThe Harvard Weekly Book club has legal obligations and is a private company.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The Harvard Weekly Book club has legal obligations and is a private company.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. ",
        "conclusions": "If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Organization:\n    def __init__(self, is_business: Optional[bool] = None, is_company: Optional[bool] = None, is_private_company: Optional[bool] = None, is_legal_entity: Optional[bool] = None, created_under_law: Optional[bool] = None, has_legal_obligations: Optional[bool] = None):\n        self.is_business = is_business\n        self.is_company = is_company\n        self.is_private_company = is_private_company\n        self.is_legal_entity = is_legal_entity\n        self.created_under_law = created_under_law\n        self.has_legal_obligations = has_legal_obligations\n\ndef apply_premises(org: Organization) -> bool:\n    changed = False\n\n    # Premise 1: All business organizations are legal entities.\n    if org.is_business is True and org.is_legal_entity is not True:\n        org.is_legal_entity = True\n        changed = True\n\n    # Premise 2: All companies are business organizations.\n    if org.is_company is True and org.is_business is not True:\n        org.is_business = True\n        changed = True\n\n    # Premise 3: All private companies are companies.\n    if org.is_private_company is True and org.is_company is not True:\n        org.is_company = True\n        changed = True\n\n    # Premise 4: All legal entities are created under law.\n    if org.is_legal_entity is True and org.created_under_law is not True:\n        org.created_under_law = True\n        changed = True\n\n    # Premise 5: All legal entities have legal obligations.\n    if org.is_legal_entity is True and org.has_legal_obligations is not True:\n        org.has_legal_obligations = True\n        changed = True\n\n    # Premise 6: If the Harvard Weekly Book Club is created under law, then it is not a private company.\n    if org.created_under_law is True and org.is_private_company is not False:\n        org.is_private_company = False\n        changed = True\n\n    return changed\n\ndef run_inference(org: Organization):\n    while apply_premises(org):\n        pass\n\ndef check_conclusion(org: Organization) -> str:\n    run_inference(org)\n    # Conclusion: If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.\n    if org.is_private_company is True:\n        if org.has_legal_obligations is not None and org.created_under_law is not None:\n            if org.has_legal_obligations or org.created_under_law:\n                return \"True\"\n            else:\n                return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"True\"\n\ndef func():\n    org = Organization(\n        is_business=None,\n        is_company=None,\n        is_private_company=None,\n        is_legal_entity=None,\n        created_under_law=None,\n        has_legal_obligations=None\n    )\n    return check_conclusion(org)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll business organizations are legal entities.\nAll companies are business organizations.\nAll private companies are companies.\nAll legal entities are created under law. \nAll legal entities have legal obligations.\nIf the Harvard Weekly Book Club is created under law, then it is not a private company. \n</Premises>\n<Conclusion>\nIf the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Animals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.",
        "conclusions": "Harry is a queen bee.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self, has_backbone: Optional[bool] = None, reproduces_by_mating: Optional[bool] = None, is_queen_bee: Optional[bool] = None):\n        self.has_backbone = has_backbone\n        self.reproduces_by_mating = reproduces_by_mating\n        self.is_queen_bee = is_queen_bee\n\nclass Harry(Animal):\n    def __init__(self):\n        super().__init__(has_backbone=None, reproduces_by_mating=None, is_queen_bee=None)\n\ndef apply_premises(harry: Harry) -> bool:\n    changed = False\n\n    # Premise 1: Animals are either invertebrates or vertebrates.\n    # Since Harry is a bee, we can infer he is a vertebrate.\n    if harry.reproduces_by_mating is not None and harry.reproduces_by_mating is False and harry.is_queen_bee is not None and harry.is_queen_bee is False:\n        harry.has_backbone = True\n        changed = True\n\n    # Premise 2: All animals with backbones reproduce by male-and-female mating.\n    # Since Harry is a vertebrate and a bee, we can infer he reproduces by male-and-female mating if he has a backbone.\n    if harry.has_backbone is True and harry.reproduces_by_mating is not True:\n        harry.reproduces_by_mating = True\n        changed = True\n\n    # Premise 3: All vertebrate animals have a backbone.\n    # Since Harry is a vertebrate, we can infer he has a backbone.\n    if harry.has_backbone is not True and harry.is_queen_bee is not None and harry.is_queen_bee is False:\n        harry.has_backbone = True\n        changed = True\n\n    # Premise 4: All bees do not reproduce by male-and-female mating.\n    # Since Harry is a bee, we can infer he does not reproduce by male-and-female mating.\n    if harry.reproduces_by_mating is not None and harry.reproduces_by_mating is True and harry.is_queen_bee is not None and harry.is_queen_bee is False:\n        harry.reproduces_by_mating = False\n        changed = True\n\n    # Premise 5: All queen bees are bees.\n    # Since Harry is a bee, we can infer he is a queen bee if he is a queen bee.\n    if harry.is_queen_bee is not True and harry.reproduces_by_mating is False:\n        harry.is_queen_bee = True\n        changed = True\n\n    return changed\n\ndef run_inference(harry: Harry):\n    while apply_premises(harry):\n        pass\n\ndef check_conclusion(harry: Harry) -> str:\n    run_inference(harry)\n    if harry.is_queen_bee is True:\n        return \"True\"\n    elif harry.is_queen_bee is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    harry = Harry()\n    return check_conclusion(harry)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Harry is a queen bee?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAnimals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.\n</Premises>\n<Conclusion>\nHarry is a queen bee.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Harry is a queen bee.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Animals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.",
        "conclusions": "Harry is an invertebrate or a queen bee.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self, has_backbone: Optional[bool] = None, is_bee: Optional[bool] = None, is_queen_bee: Optional[bool] = None):\n        self.has_backbone = has_backbone\n        self.is_bee = is_bee\n        self.is_queen_bee = is_queen_bee\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Animals are either invertebrates or vertebrates.\n    if animal.is_bee is True and animal.has_backbone is None:\n        animal.has_backbone = False\n        changed = True\n\n    # Premise 2: All animals with backbones reproduce by male-and-female mating.\n    if animal.has_backbone is True and animal.is_bee is not True:\n        if animal.is_bee is None:\n            animal.is_bee = False\n            changed = True\n\n    # Premise 3: All vertebrate animals have a backbone.\n    if animal.is_bee is False and animal.has_backbone is not True:\n        animal.has_backbone = True\n        changed = True\n\n    # Premise 4: All bees do not reproduce by male-and-female mating.\n    if animal.is_bee is True and animal.is_bee is True:\n        if animal.is_bee is True and animal.is_bee is not False:\n            animal.is_bee = False\n            changed = True\n\n    # Premise 5: All queen bees are bees.\n    if animal.is_queen_bee is True and animal.is_bee is not True:\n        animal.is_bee = True\n        changed = True\n\n    # Harry is a bee (Premise 6)\n    if animal.name == \"Harry\" and animal.is_bee is None:\n        animal.is_bee = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    if animal.name == \"Harry\":\n        if animal.is_bee is True or animal.is_queen_bee is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Harry is a bee (Premise 6)\n    animal = Animal(is_bee=True, is_queen_bee=None)\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Harry is an invertebrate or a queen bee?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAnimals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.\n</Premises>\n<Conclusion>\nHarry is an invertebrate or a queen bee.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Harry is an invertebrate or a queen bee.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Animals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.",
        "conclusions": "If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self, is_invertebrate: Optional[bool] = None, is_vertebrate: Optional[bool] = None, has_backbone: Optional[bool] = None):\n        self.is_invertebrate = is_invertebrate\n        self.is_vertebrate = is_vertebrate\n        self.has_backbone = has_backbone\n\nclass Bee:\n    def __init__(self, is_queen: Optional[bool] = None):\n        self.is_queen = is_queen\n\ndef apply_premises(animal: Animal, bee: Bee) -> bool:\n    changed = False\n\n    # Premise 1: Animals are either invertebrates or vertebrates.\n    if animal.is_invertebrate is None and animal.is_vertebrate is None:\n        animal.is_invertebrate = True\n        animal.is_vertebrate = False\n        changed = True\n\n    # Premise 2: All animals with backbones reproduce by male-and-female mating.\n    # Not directly relevant to the conclusion, but we need to know if an animal has a backbone.\n\n    # Premise 3: All vertebrate animals have a backbone.\n    if animal.is_vertebrate is True and animal.has_backbone is None:\n        animal.has_backbone = True\n        changed = True\n\n    # Premise 4: All bees do not reproduce by male-and-female mating.\n    # Not directly relevant to the conclusion, but we need to know if Harry is a bee.\n\n    # Premise 5: All queen bees are bees.\n    # Not directly relevant to the conclusion, but we need to know if Harry is a queen bee.\n\n    # Premise 6: Harry is a bee.\n    if bee.is_queen is None and animal.is_invertebrate is not True and animal.is_vertebrate is not True:\n        bee.is_queen = False\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal, bee: Bee):\n    while apply_premises(animal, bee):\n        pass\n\ndef check_conclusion(animal: Animal, bee: Bee) -> str:\n    run_inference(animal, bee)\n    # Conclusion: If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.\n    if (animal.is_vertebrate is True and animal.has_backbone is True) or (animal.is_vertebrate is False and animal.has_backbone is False):\n        if animal.is_invertebrate is False and bee.is_queen is False:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions:\n    animal = Animal(is_invertebrate=None, is_vertebrate=None, has_backbone=None)\n    bee = Bee(is_queen=None)\n    return check_conclusion(animal, bee)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAnimals are either invertebrates or vertebrates.\nAll animals with backbones reproduce by male-and-female mating. \nAll vertebrate animals have a backbone.\nAll bees do not reproduce by male-and-female mating.\nAll queen bees are bees.\nHarry is a bee.\n</Premises>\n<Conclusion>\nIf Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers",
        "conclusions": "Luke spends a lot of time hanging out and playing with his siblings.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_born_multiple: Optional[bool] = None,\n                 live_with_strangers: Optional[bool] = None,\n                 has_born_together_siblings: Optional[bool] = None,\n                 often_complains: Optional[bool] = None):\n        self.is_born_multiple = is_born_multiple\n        self.live_with_strangers = live_with_strangers\n        self.has_born_together_siblings = has_born_together_siblings\n        self.often_complains = often_complains\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\n    if person.is_born_multiple is True and person.often_spends_time_with_siblings is None:\n        person.often_spends_time_with_siblings = True\n        changed = True\n\n    # Premise 2: If people have siblings who were born together, then they were born in a multiple birth.\n    if person.has_born_together_siblings is True and person.is_born_multiple is None:\n        person.is_born_multiple = True\n        changed = True\n\n    # Premise 3: If people complain often about annoying siblings, then they have siblings who were born together.\n    if person.often_complains is True and person.has_born_together_siblings is None:\n        person.has_born_together_siblings = True\n        changed = True\n\n    # Premise 4: If people live at home, then they do not live with strangers.\n    if person.live_with_strangers is False and person.live_at_home is None:\n        person.live_at_home = True\n        changed = True\n\n    # Premise 5: If people spend a lot of time hanging out with and playing with their siblings, then they often live at home.\n    if person.often_spends_time_with_siblings is True and person.live_at_home is None:\n        person.live_at_home = True\n        changed = True\n\n    # Luke's condition\n    if person.name == \"Luke\":\n        if person.is_born_multiple is None and person.live_with_strangers is None:\n            if person.is_born_multiple is True and person.live_with_strangers is False:\n                person.often_spends_time_with_siblings = True\n            elif person.is_born_multiple is False and person.live_with_strangers is True:\n                person.often_spends_time_with_siblings = False\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.often_spends_time_with_siblings is None:\n        return \"Uncertain\"\n    if person.often_spends_time_with_siblings is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"Luke\",\n        is_born_multiple=None,\n        live_with_strangers=None,\n        has_born_together_siblings=None,\n        often_complains=None,\n        often_spends_time_with_siblings=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Luke spends a lot of time hanging out and playing with his siblings?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPeople who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\n</Premises>\n<Conclusion>\nLuke spends a lot of time hanging out and playing with his siblings.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Luke spends a lot of time hanging out and playing with his siblings.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers",
        "conclusions": "Luke complains often about annoying siblings.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_multiple_birth: Optional[bool] = None,\n                 lives_with_strangers: Optional[bool] = None,\n                 has_together_born_siblings: Optional[bool] = None,\n                 complains_about_annoying_siblings: Optional[bool] = None):\n        self.is_multiple_birth = is_multiple_birth\n        self.lives_with_strangers = lives_with_strangers\n        self.has_together_born_siblings = has_together_born_siblings\n        self.complains_about_annoying_siblings = complains_about_annoying_siblings\n\ndef apply_premises(luke: Person) -> bool:\n    changed = False\n\n    # Premise 1: People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\n    if luke.is_multiple_birth is True and luke.has_together_born_siblings is None:\n        luke.has_together_born_siblings = True\n        changed = True\n\n    # Premise 2: If people have siblings who were born together, then they were born in a multiple birth.\n    if luke.has_together_born_siblings is True and luke.is_multiple_birth is None:\n        luke.is_multiple_birth = True\n        changed = True\n\n    # Premise 3: If people complain often about annoying siblings, then they have siblings who were born together.\n    if luke.complains_about_annoying_siblings is True and luke.has_together_born_siblings is None:\n        luke.has_together_born_siblings = True\n        changed = True\n\n    # Premise 4: If people live at home, then they do not live with strangers.\n    if luke.lives_with_strangers is False and luke.has_together_born_siblings is None:\n        luke.has_together_born_siblings = True\n        changed = True\n\n    # Premise 5: If people spend a lot of time hanging out with and playing with their siblings, then they often live at home.\n    if luke.has_together_born_siblings is True and luke.lives_with_strangers is None:\n        luke.lives_with_strangers = False\n        changed = True\n\n    # Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers.\n    if (luke.is_multiple_birth is True and luke.lives_with_strangers is True) or (luke.is_multiple_birth is False and luke.lives_with_strangers is False):\n        if luke.is_multiple_birth is True:\n            luke.lives_with_strangers = True\n        else:\n            luke.lives_with_strangers = False\n        changed = True\n\n    return changed\n\ndef run_inference(luke: Person):\n    while apply_premises(luke):\n        pass\n\ndef check_conclusion(luke: Person) -> str:\n    run_inference(luke)\n    if luke.complains_about_annoying_siblings is True:\n        return \"True\"\n    elif luke.complains_about_annoying_siblings is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    luke = Person(\n        is_multiple_birth=None,\n        lives_with_strangers=None,\n        has_together_born_siblings=None,\n        complains_about_annoying_siblings=None\n    )\n    return check_conclusion(luke)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Luke complains often about annoying siblings?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPeople who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\n</Premises>\n<Conclusion>\nLuke complains often about annoying siblings.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Luke complains often about annoying siblings.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers",
        "conclusions": "Luke is neither born in a multiple birth nor complains often about annoying siblings.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_multiple_birth: Optional[bool] = None,\n                 complains_about_siblings: Optional[bool] = None,\n                 lives_with_strangers: Optional[bool] = None):\n        self.is_multiple_birth = is_multiple_birth\n        self.complains_about_siblings = complains_about_siblings\n        self.lives_with_strangers = lives_with_strangers\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\n    if person.is_multiple_birth is True and person.complains_about_siblings is None:\n        person.complains_about_siblings = False\n        changed = True\n\n    # Premise 2: If people have siblings who were born together, then they were born in a multiple birth.\n    if person.complains_about_siblings is True and person.is_multiple_birth is None:\n        person.is_multiple_birth = True\n        changed = True\n\n    # Premise 3: If people complain often about annoying siblings, then they have siblings who were born together.\n    if person.complains_about_siblings is True and person.lives_with_strangers is None:\n        person.lives_with_strangers = False\n        changed = True\n\n    # Premise 4: If people live at home, then they do not live with strangers.\n    if person.lives_with_strangers is True and person.is_multiple_birth is None:\n        person.is_multiple_birth = False\n        changed = True\n\n    # Premise 5: If people spend a lot of time hanging out with and playing with their siblings, then they often live at home.\n    if person.complains_about_siblings is False and person.lives_with_strangers is None:\n        person.lives_with_strangers = True\n        changed = True\n\n    # Luke's condition: Either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers.\n    if person.is_multiple_birth is None and person.lives_with_strangers is None:\n        if person.is_multiple_birth is True:\n            person.lives_with_strangers = True\n        else:\n            person.lives_with_strangers = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Luke is neither born in a multiple birth nor complains often about annoying siblings.\n    if person.is_multiple_birth is False and person.complains_about_siblings is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions based on the premise about Luke.\n    person = Person(is_multiple_birth=None, complains_about_siblings=None, lives_with_strangers=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Luke is neither born in a multiple birth nor complains often about annoying siblings?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPeople who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings.\nIf people have siblings who were born together, then they were born in a multiple birth.\nIf people complain often about annoying siblings, then they have siblings who were born together.\nIf people live at home, then they do not live with strangers.\nIf people spend a lot of time hanging out with and playing with their siblings, then they often live at home. \nLuke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers\n</Premises>\n<Conclusion>\nLuke is neither born in a multiple birth nor complains often about annoying siblings.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Luke is neither born in a multiple birth nor complains often about annoying siblings.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "It costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.",
        "conclusions": "ETS provides financial aid to Tom.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Applicant:\n    def __init__(self,\n                 is_single_parent: Optional[bool] = None,\n                 has_few_resources: Optional[bool] = None):\n        self.is_single_parent = is_single_parent\n        self.has_few_resources = has_few_resources\n\nclass FinancialAid:\n    def __init__(self, provides_aid: Optional[bool] = None):\n        self.provides_aid = provides_aid\n\ndef apply_premises(applicant: Applicant, aid: FinancialAid) -> bool:\n    changed = False\n\n    # Premise 1: Those living in single-parent families or having few resources available to them can prove economic hardship.\n    if applicant.is_single_parent is True and aid.provides_aid is not True:\n        aid.provides_aid = True\n        changed = True\n\n    if applicant.has_few_resources is True and aid.provides_aid is not True:\n        aid.provides_aid = True\n        changed = True\n\n    return changed\n\ndef run_inference(applicant: Applicant, aid: FinancialAid):\n    while apply_premises(applicant, aid):\n        pass\n\ndef check_conclusion(applicant: Applicant, aid: FinancialAid) -> str:\n    run_inference(applicant, aid)\n    if aid.provides_aid is True:\n        return \"True\"\n    elif aid.provides_aid is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Premises:\n    # Tom lives in a single-parent family.\n    # Tom's dad has been out of work, and Tom has few resources available to them.\n    applicant = Applicant(\n        is_single_parent=True,\n        has_few_resources=True\n    )\n    aid = FinancialAid()\n    return check_conclusion(applicant, aid)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: ETS provides financial aid to Tom?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIt costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.\n</Premises>\n<Conclusion>\nETS provides financial aid to Tom.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? ETS provides financial aid to Tom.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "It costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.",
        "conclusions": "It costs below US $300 to take the GRE test.",
        "rationale": "```python\nfrom typing import Optional\n\nclass GRETest:\n    def __init__(self, cost: Optional[int] = None):\n        self.cost = cost\n\ndef apply_premises(test: GRETest) -> bool:\n    changed = False\n\n    # Premise 1: It costs $205 to take the GRE test, which is cheaper than $300.\n    if test.cost is None:\n        test.cost = 205\n        changed = True\n\n    return changed\n\ndef run_inference(test: GRETest):\n    while apply_premises(test):\n        pass\n\ndef check_conclusion(test: GRETest) -> str:\n    run_inference(test)\n    if test.cost < 300:\n        return \"True\"\n    elif test.cost >= 300:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    test = GRETest()\n    return check_conclusion(test)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: It costs below US $300 to take the GRE test?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIt costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.\n</Premises>\n<Conclusion>\nIt costs below US $300 to take the GRE test.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? It costs below US $300 to take the GRE test.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "It costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.",
        "conclusions": "No one taking the GRE test has financial aid provided to them by something.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Applicant:\n    def __init__(self, name: str, has_financial_aid: Optional[bool] = None):\n        self.name = name\n        self.has_financial_aid = has_financial_aid\n\nclass GRETest:\n    def __init__(self, cost: int = 205):\n        self.cost = cost\n\ndef apply_premises(applicant: Applicant, gre_test: GRETest) -> bool:\n    changed = False\n\n    # Premise 1: It costs $205 to take the GRE test, which is cheaper than $300.\n    # This premise is only about the cost and does not affect the financial aid directly.\n\n    # Premise 2: ETS provides financial aid to those GRE applicants who prove economic hardship.\n    if applicant.name == \"Tom\" and applicant.has_financial_aid is None:\n        applicant.has_financial_aid = True\n        changed = True\n\n    # Premise 3: Those living in single-parent families or having few resources available to them can prove economic hardship.\n    if applicant.name == \"Tom\" and applicant.has_financial_aid is None:\n        applicant.has_financial_aid = True\n        changed = True\n\n    # Premise 4: Tom lives in a single-parent family.\n    # This premise is already considered in the previous premises.\n\n    # Premise 5: Tom's dad has been out of work, and Tom has few resources available to them.\n    # This premise is already considered in the previous premises.\n\n    # Premise 6: Tom is applying to take the GRE test.\n    # This premise is already considered in the previous premises.\n\n    return changed\n\ndef run_inference(applicant: Applicant, gre_test: GRETest):\n    while apply_premises(applicant, gre_test):\n        pass\n\ndef check_conclusion(applicant: Applicant, gre_test: GRETest) -> str:\n    run_inference(applicant, gre_test)\n    # Conclusion: No one taking the GRE test has financial aid provided to them by something.\n    if applicant.has_financial_aid is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    applicant = Applicant(name=\"Tom\", has_financial_aid=None)\n    gre_test = GRETest()\n    return check_conclusion(applicant, gre_test)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No one taking the GRE test has financial aid provided to them by something?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIt costs $205 to take the GRE test, which is cheaper than $300.\nETS provides financial aid to those GRE applicants who prove economic hardship.\nThose living in single-parent families or having few resources available to them can prove economic hardship.\nTom lives in a single-parent family.\nTom's dad has been out of work, and Tom has few resources available to them. \nTom is applying to take the GRE test.\n</Premises>\n<Conclusion>\nNo one taking the GRE test has financial aid provided to them by something.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? No one taking the GRE test has financial aid provided to them by something.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly",
        "conclusions": "Peter is notably tidy.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 spills_food: Optional[bool] = None,\n                 is_clean: Optional[bool] = None,\n                 is_notably_tidy: Optional[bool] = None):\n        self.spills_food = spills_food\n        self.is_clean = is_clean\n        self.is_notably_tidy = is_notably_tidy\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people spill a lot of food on their clothing, then they are not notably tidy.\n    if person.spills_food is True and person.is_notably_tidy is not False:\n        person.is_notably_tidy = False\n        changed = True\n\n    # Premise 2: All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n    # This premise does not directly provide information about Peter, but we will consider it in the inference process.\n    \n    # Premise 3: If people are cleanly, then they are notably tidy.\n    if person.is_clean is True and person.is_notably_tidy is not True:\n        person.is_notably_tidy = True\n        changed = True\n\n    # Premise 4: If people value order and spotlessness, then they are cleanly.\n    # This premise does not directly provide information about Peter, but we will consider it in the inference process.\n    \n    # Premise 5: All people whose families prioritize order and spotlessness themselves value order and spotlessness.\n    # This premise does not directly provide information about Peter, but we will consider it in the inference process.\n    \n    # Premise 6: Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly.\n    if (person.spills_food is None and person.is_clean is None) or \\\n       (person.spills_food is not None and person.is_clean is not None):\n        if person.spills_food is True and person.is_clean is True:\n            person.is_notably_tidy = False\n            changed = True\n        elif person.spills_food is False and person.is_clean is False:\n            person.is_notably_tidy = False\n            changed = True\n        elif person.spills_food is True and person.is_clean is False:\n            person.is_notably_tidy = False\n            changed = True\n        elif person.spills_food is False and person.is_clean is True:\n            person.is_notably_tidy = True\n            changed = True\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.is_notably_tidy is True:\n        return \"True\"\n    elif person.is_notably_tidy is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        spills_food=None,\n        is_clean=None,\n        is_notably_tidy=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter is notably tidy?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\n</Premises>\n<Conclusion>\nPeter is notably tidy.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Peter is notably tidy.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly",
        "conclusions": "Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 spills_food: Optional[bool] = None,\n                 is_clumsy_foolie: Optional[bool] = None,\n                 goes_out_frequently: Optional[bool] = None,\n                 is_cleanly: Optional[bool] = None,\n                 values_order_spotlessness: Optional[bool] = None,\n                 family_prioritizes_order_spotlessness: Optional[bool] = None):\n        self.spills_food = spills_food\n        self.is_clumsy_foolie = is_clumsy_foolie\n        self.goes_out_frequently = goes_out_frequently\n        self.is_cleanly = is_cleanly\n        self.values_order_spotlessness = values_order_spotlessness\n        self.family_prioritizes_order_spotlessness = family_prioritizes_order_spotlessness\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people spill a lot of food on their clothing, then they are not notably tidy.\n    if person.spills_food is True and person.is_cleanly is not False:\n        person.is_cleanly = False\n        changed = True\n\n    # Premise 2: All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n    if person.is_clumsy_foolie is True and person.goes_out_frequently is True and person.spills_food is not True:\n        person.spills_food = True\n        changed = True\n\n    # Premise 3: If people are cleanly, then they are notably tidy.\n    if person.is_cleanly is True and person.is_cleanly is not True:\n        person.is_cleanly = True\n        changed = True\n\n    # Premise 4: If people value order and spotlessness, then they are cleanly.\n    if person.values_order_spotlessness is True and person.is_cleanly is not True:\n        person.is_cleanly = True\n        changed = True\n\n    # Premise 5: All people whose families prioritize order and spotlessness themselves value order and spotlessness.\n    if person.family_prioritizes_order_spotlessness is True and person.values_order_spotlessness is not True:\n        person.values_order_spotlessness = True\n        changed = True\n\n    # Premise 6: Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly.\n    if person.spills_food is None or person.is_cleanly is None:\n        person.spills_food = True if person.is_cleanly is True else False\n        person.is_cleanly = True if person.spills_food is True else False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Peter is either a clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.\n    if person.is_clumsy_foolie is True and person.goes_out_frequently is True or person.family_prioritizes_order_spotlessness is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        spills_food=None,\n        is_clumsy_foolie=None,\n        goes_out_frequently=None,\n        is_cleanly=None,\n        values_order_spotlessness=None,\n        family_prioritizes_order_spotlessness=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter is either a clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\n</Premises>\n<Conclusion>\nPeter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly",
        "conclusions": "Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 spills_food: Optional[bool] = None,\n                 is_clean: Optional[bool] = None,\n                 is_clumsy_foodie: Optional[bool] = None,\n                 goes_out_frequently: Optional[bool] = None,\n                 family_prioritizes_order: Optional[bool] = None):\n        self.spills_food = spills_food\n        self.is_clean = is_clean\n        self.is_clumsy_foodie = is_clumsy_foodie\n        self.goes_out_frequently = goes_out_frequently\n        self.family_prioritizes_order = family_prioritizes_order\n\ndef apply_premises(peter: Person) -> bool:\n    changed = False\n\n    # Premise 1: If people spill a lot of food on their clothing, then they are not notably tidy.\n    if peter.spills_food is True and peter.is_clean is not False:\n        peter.is_clean = False\n        changed = True\n\n    # Premise 2: All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\n    if peter.is_clumsy_foodie is True and peter.goes_out_frequently is True and peter.spills_food is not True:\n        peter.spills_food = True\n        changed = True\n\n    # Premise 3: If people are cleanly, then they are notably tidy.\n    if peter.is_clean is True and peter.is_clean is not True:\n        peter.is_clean = True\n        changed = True\n\n    # Premise 4: If people value order and spotlessness, then they are cleanly.\n    if peter.is_clean is False and peter.family_prioritizes_order is True:\n        peter.is_clean = True\n        changed = True\n\n    # Premise 5: All people whose families prioritize order and spotlessness themselves value order and spotlessness.\n    if peter.family_prioritizes_order is True and peter.is_clean is False:\n        peter.is_clean = True\n        changed = True\n\n    # Premise 6: Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly.\n    if (peter.spills_food is True and peter.is_clean is True) or (peter.spills_food is False and peter.is_clean is False):\n        pass\n    else:\n        if peter.spills_food is None:\n            peter.spills_food = False\n        if peter.is_clean is None:\n            peter.is_clean = True\n        changed = True\n\n    return changed\n\ndef run_inference(peter: Person):\n    while apply_premises(peter):\n        pass\n\ndef check_conclusion(peter: Person) -> str:\n    run_inference(peter)\n    # Conclusion: Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and someone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.\n    if (peter.is_clumsy_foodie is True and peter.goes_out_frequently is True and peter.family_prioritizes_order is True) or (peter.is_clumsy_foodie is False and peter.goes_out_frequently is False and peter.family_prioritizes_order is False):\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions: Unknown values\n    peter = Person(\n        spills_food=None,\n        is_clean=None,\n        is_clumsy_foodie=None,\n        goes_out_frequently=None,\n        family_prioritizes_order=None\n    )\n    return check_conclusion(peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and someone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf people spill a lot of food on their clothing, then they are not notably tidy.\nAll clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.\nIf people are cleanly, then they are notably tidy.\nIf people value order and spotlessness, then they are cleanly.\nAll people whose families prioritize order and spotlessness themselves value order and spotlessness.\nPeter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly\n</Premises>\n<Conclusion>\nPeter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All fir trees are evergreens.\nSome objects of worship are fir trees.",
        "conclusions": "Some evergreens are not objects of worship.",
        "rationale": "from typing import Optional\n\nclass Tree:\n    def __init__(self, is_fir: Optional[bool] = None, is_evergreen: Optional[bool] = None):\n        self.is_fir = is_fir\n        self.is_evergreen = is_evergreen\n\nclass ObjectOfWorship:\n    def __init__(self, is_fir: Optional[bool] = None):\n        self.is_fir = is_fir\n\ndef apply_premises(fir_tree: Tree, object_of_worship: ObjectOfWorship) -> bool:\n    changed = False\n\n    # Premise 1: All fir trees are evergreens.\n    if fir_tree.is_fir is True and fir_tree.is_evergreen is not True:\n        fir_tree.is_evergreen = True\n        changed = True\n\n    # Premise 2: Some objects of worship are fir trees.\n    # We need to find an object of worship that is a fir tree.\n    if object_of_worship.is_fir is None:\n        object_of_worship.is_fir = True\n        changed = True\n\n    return changed\n\ndef run_inference(fir_tree: Tree, object_of_worship: ObjectOfWorship):\n    while apply_premises(fir_tree, object_of_worship):\n        pass\n\ndef check_conclusion(fir_tree: Tree, object_of_worship: ObjectOfWorship) -> str:\n    run_inference(fir_tree, object_of_worship)\n    # Conclusion: Some evergreens are not objects of worship.\n    # We need to check if there exists an evergreen that is not an object of worship.\n    if fir_tree.is_evergreen is True and object_of_worship.is_fir is True:\n        # If all fir trees are evergreens and some objects of worship are fir trees,\n        # then at least one evergreen (the fir tree that is an object of worship) is also an object of worship.\n        # Therefore, we cannot conclude that some evergreens are not objects of worship.\n        return \"False\"\n    else:\n        # Since we cannot definitively conclude that some evergreens are not objects of worship,\n        # the result is \"Uncertain\".\n        return \"Uncertain\"\n\ndef func():\n    fir_tree = Tree(is_fir=True, is_evergreen=None)\n    object_of_worship = ObjectOfWorship(is_fir=None)\n    return check_conclusion(fir_tree, object_of_worship)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some evergreens are not objects of worship?\", result)",
        "label": "Uncertain",
        "predict": "False",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll fir trees are evergreens.\nSome objects of worship are fir trees.\n</Premises>\n<Conclusion>\nSome evergreens are not objects of worship.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Some evergreens are not objects of worship.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "The Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.",
        "conclusions": "Juan de Onate visited a mountain range in New Mexico.",
        "rationale": "```python\nfrom typing import Optional\n\nclass MountainRange:\n    def __init__(self, name: str, state: Optional[str] = None):\n        self.name = name\n        self.state = state\n\nclass Location:\n    def __init__(self, name: str, has_donated_mine: Optional[bool] = None, is_in_new_mexico: Optional[bool] = None):\n        self.name = name\n        self.has_donated_mine = has_donated_mine\n        self.is_in_new_mexico = is_in_new_mexico\n\ndef apply_premises() -> bool:\n    changed = False\n    \n    # Premise 1: The Picuris Mountains are a mountain range in New Mexico or Texas.\n    picuris_mountains = MountainRange(\"Picuris Mountains\")\n    if picuris_mountains.state is None:\n        picuris_mountains.state = \"New Mexico or Texas\"\n        changed = True\n\n    # Premise 2: Juan de Onate visited the Picuris Mountains.\n    # No action needed here as it's a statement of fact.\n    \n    # Premise 3: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n    picuris_mountains.has_donated_mine = True\n    \n    # Premise 4: There are no mountain ranges in Texas that have mines that have been donated.\n    if picuris_mountains.state == \"Texas\" and picuris_mountains.has_donated_mine:\n        picuris_mountains.state = \"New Mexico\"\n        changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    picuris_mountains = MountainRange(\"Picuris Mountains\")\n    if picuris_mountains.state == \"New Mexico\":\n        return \"True\"\n    elif picuris_mountains.state == \"Texas\":\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Juan de Onate visited a mountain range in New Mexico?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.\n</Premises>\n<Conclusion>\nJuan de Onate visited a mountain range in New Mexico.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Juan de Onate visited a mountain range in New Mexico.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "The Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.",
        "conclusions": "Juan de Onate visited a mountain range in Texas.",
        "rationale": "from typing import Optional\n\nclass MountainRange:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass Person:\n    def __init__(self, name: str, visited: Optional[str] = None):\n        self.name = name\n        self.visited = visited\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: The Picuris Mountains are a mountain range in New Mexico or Texas.\n    picuris_mountains = MountainRange(\"Picuris Mountains\")\n    if picuris_mountains.location is None:\n        picuris_mountains.location = \"New Mexico or Texas\"\n        changed = True\n\n    # Premise 2: Juan de Onate visited the Picuris Mountains.\n    juan_de_onate = Person(\"Juan de Onate\")\n    if juan_de_onate.visited is None:\n        juan_de_onate.visited = \"Picuris Mountains\"\n        changed = True\n\n    # Premise 3: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n    # This premise does not provide new information about the location of the Picuris Mountains.\n\n    # Premise 4: There are no mountain ranges in Texas that have mines that have been donated.\n    # This premise implies that the Picuris Mountains, if in Texas, do not have donated mines.\n    # Since the Picuris Mountains are either in New Mexico or Texas, and it cannot be in Texas due to the donation rule,\n    # the Picuris Mountains must be in New Mexico.\n\n    if picuris_mountains.location == \"New Mexico or Texas\" and \"Texas\" in picuris_mountains.location:\n        picuris_mountains.location = \"New Mexico\"\n        changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    picuris_mountains = MountainRange(\"Picuris Mountains\")\n    juan_de_onate = Person(\"Juan de Onate\")\n    if picuris_mountains.location == \"Texas\" and juan_de_onate.visited == \"Picuris Mountains\":\n        return \"True\"\n    else:\n        return \"False\" if picuris_mountains.location != \"Texas\" else \"Uncertain\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Juan de Onate visited a mountain range in Texas?\", result)",
        "label": "Uncertain",
        "predict": "Unknow",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.\n</Premises>\n<Conclusion>\nJuan de Onate visited a mountain range in Texas.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Juan de Onate visited a mountain range in Texas.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "The Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.",
        "conclusions": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.",
        "rationale": "```python\nfrom typing import Optional\n\nclass MountainRange:\n    def __init__(self, name: str, state: Optional[str] = None):\n        self.name = name\n        self.state = state\n\nclass Mine:\n    def __init__(self, name: str, location: Optional[MountainRange] = None):\n        self.name = name\n        self.location = location\n\nclass Person:\n    def __init__(self, name: str, visited: Optional[str] = None):\n        self.name = name\n        self.visited = visited\n\ndef apply_premises():\n    picuris_mountains = MountainRange(\"Picuris Mountains\", state=None)\n    harding_mine = Mine(\"Harding Pegmatite Mine\", location=picuris_mountains)\n    person = Person(\"Juan de Onate\", visited=\"Picuris Mountains\")\n\n    # Premise 1: The Picuris Mountains are a mountain range in New Mexico or Texas.\n    if picuris_mountains.state is None:\n        picuris_mountains.state = \"New Mexico or Texas\"\n        return True\n\n    # Premise 2: Juan de Onate visited the Picuris Mountains.\n    if person.visited != \"Picuris Mountains\":\n        person.visited = \"Picuris Mountains\"\n        return True\n\n    # Premise 3: The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\n    # This premise is about the donation status of the mine and does not affect the location.\n    # Premise 4: There are no mountain ranges in Texas that have mines that have been donated.\n    if picuris_mountains.state == \"Texas\" and harding_mine.location is not None:\n        harding_mine.location = None\n        return True\n\n    return False\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    if harding_mine.location is not None and harding_mine.location.name == \"Picuris Mountains\" and harding_mine.location.state == \"New Mexico\":\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The Harding Pegmatite Mine is not located in a mountain range in New Mexico?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknow",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThe Picuris Mountains are a mountain range in New Mexico or Texas.\nJuan de Onate visited the Picuris Mountains.\nThe Harding Pegmatite Mine, located in the Picuris Mountains, was donated.\nThere are no mountain ranges in texas that have mines that have been donated.\n</Premises>\n<Conclusion>\nThe Harding Pegmatite Mine is not located in a mountain range in New Mexico.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The Harding Pegmatite Mine is not located in a mountain range in New Mexico.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.",
        "conclusions": "Peter is shorter than a man in Michael's class.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_man: bool = True, is_taller: Optional[bool] = None, can_jump: Optional[bool] = None, is_great_shooter: Optional[bool] = None):\n        self.name = name\n        self.is_man = is_man\n        self.is_taller = is_taller\n        self.can_jump = can_jump\n        self.is_great_shooter = is_great_shooter\n\ndef apply_premises(persons: dict) -> bool:\n    changed = False\n\n    # Premise 1: If a man is taller than another man, the taller one can block the other's shooting.\n    for p1 in persons.values():\n        if p1.is_man and p1.is_taller is not None:\n            for p2 in persons.values():\n                if p2.is_man and p2.is_taller is not None and p1 != p2:\n                    if p1.is_taller and p2.is_taller:\n                        if p1.name < p2.name and persons[p1.name].can_block is None and persons[p2.name].can_block is not None:\n                            persons[p1.name].can_block = True\n                            changed = True\n                        if p1.name > p2.name and persons[p1.name].can_block is None and persons[p2.name].can_block is not None:\n                            persons[p1.name].can_block = False\n                            changed = True\n\n    # Premise 2: Michael is a man who is taller than everyone else in his class.\n    for p in persons.values():\n        if p.name == \"Michael\":\n            p.is_taller = True\n            p.can_block = True\n            p.can_block_windys_shooting = False\n            changed = True\n\n    # Premise 3: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\n    for p1 in persons.values():\n        if p1.is_man and p1.is_taller is not None:\n            for p2 in persons.values():\n                if p2.is_man and p2.is_taller is not None and p1 != p2:\n                    for p3 in persons.values():\n                        if p3.is_man and p3.is_taller is not None and p1 != p3 and p2 != p3:\n                            if p1.is_taller and p2.is_taller and p3.is_taller:\n                                if (p1.name < p2.name and p2.name < p3.name) or (p1.name > p2.name and p2.name > p3.name):\n                                    if persons[p1.name].is_taller is None:\n                                        persons[p1.name].is_taller = True\n                                        changed = True\n                                    if persons[p2.name].is_taller is None:\n                                        persons[p2.name].is_taller = True\n                                        changed = True\n                                    if persons[p3.name].is_taller is None:\n                                        persons[p3.name].is_taller = False\n                                        changed = True\n\n    # Premise 4: Peter is a man who is taller than Michael.\n    for p in persons.values():\n        if p.name == \"Peter\":\n            p.is_man = True\n            p.is_taller = True\n            changed = True\n\n    # Premise 5: Michael can block any shooting from a person as long as the person does not jump when shooting.\n    for p in persons.values():\n        if p.name == \"Michael\":\n            p.can_block = True\n            p.can_block_windys_shooting = True\n            changed = True\n\n    # Premise 6: Michael cannot block Windy's shooting.\n    for p in persons.values():\n        if p.name == \"Windy\":\n            p.can_jump = True\n            p.can_block = False\n            changed = True\n\n    # Premise 7: Every shooter who can jump when shooting is a great shooter.\n    for p in persons.values():\n        if p.can_jump is not None:\n            p.is_great_shooter = p.can_jump\n\n    return changed\n\ndef run_inference(persons: dict):\n    while apply_premises(persons):\n        pass\n\ndef check_conclusion(persons: dict) -> str:\n    run_inference(persons)\n    # Conclusion: Peter is shorter than a man in Michael's class.\n    for p in persons.values():\n        if p.name == \"Peter\":\n            for m in persons.values():\n                if m.is_man and m.is_taller is True and m.name != \"Peter\":\n                    if p.is_taller is None:\n                        return \"Uncertain\"\n                    if p.is_taller is False:\n                        return \"True\"\n    return \"False\"\n\ndef func():\n    persons = {\n        \"Michael\": Person(name=\"Michael\"),\n        \"Peter\": Person(name=\"Peter\"),\n        \"Windy\": Person(name=\"Windy\")\n    }\n    return check_conclusion(persons)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter is shorter than a man in Michael's class?\", result)",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.\n</Premises>\n<Conclusion>\nPeter is shorter than a man in Michael's class.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Peter is shorter than a man in Michael's class.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.",
        "conclusions": "Windy is a great shooter.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_man: bool, is_taller_than: Optional['Person'] = None, can_jump: Optional[bool] = None, is_great_shooter: Optional[bool] = None):\n        self.name = name\n        self.is_man = is_man\n        self.is_taller_than = is_taller_than\n        self.can_jump = can_jump\n        self.is_great_shooter = is_great_shooter\n\ndef apply_premises(persons: dict[str, Person]) -> bool:\n    changed = False\n\n    # Premise 1: If a man is taller than another man, the taller one can block the other's shooting.\n    # This premise is not directly used to infer anything about great shooters, but it sets the context.\n\n    # Premise 2: Michael is a man who is taller than everyone else in his class.\n    if persons['Michael'].is_man and persons['Michael'].is_taller_than is None:\n        changed = True\n\n    # Premise 3: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\n    # This is a transitive property and is already handled by the `is_taller_than` attribute.\n\n    # Premise 4: Peter is a man who is taller than Michael.\n    if persons['Peter'].is_man and persons['Peter'].is_taller_than is None:\n        persons['Peter'].is_taller_than = persons['Michael']\n        changed = True\n\n    # Premise 5: Michael can block any shooting from a person as long as the person does not jump when shooting.\n    # This premise is not directly used to infer anything about great shooters, but it sets the context.\n\n    # Premise 6: Michael cannot block Windy's shooting.\n    if persons['Michael'].is_taller_than == persons['Windy']:\n        persons['Windy'].can_jump = True\n        changed = True\n\n    # Premise 7: Every shooter who can jump when shooting is a great shooter.\n    if persons['Windy'].can_jump is True:\n        persons['Windy'].is_great_shooter = True\n        changed = True\n\n    return changed\n\ndef run_inference(persons: dict[str, Person]):\n    while apply_premises(persons):\n        pass\n\ndef check_conclusion(persons: dict[str, Person]) -> str:\n    run_inference(persons)\n    if persons['Windy'].is_great_shooter is True:\n        return \"True\"\n    elif persons['Windy'].is_great_shooter is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    persons = {\n        'Michael': Person(name='Michael', is_man=True, is_taller_than=None),\n        'Peter': Person(name='Peter', is_man=True, is_taller_than=persons['Michael']),\n        'Windy': Person(name='Windy', is_man=False, is_taller_than=persons['Michael'], can_jump=None, is_great_shooter=None)\n    }\n    return check_conclusion(persons)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Windy is a great shooter?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.\n</Premises>\n<Conclusion>\nWindy is a great shooter.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Windy is a great shooter.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.",
        "conclusions": "Peter can block Windy's shooting.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_man: bool, is_taller_than: Optional['Person'] = None, can_jump: Optional[bool] = None):\n        self.name = name\n        self.is_man = is_man\n        self.is_taller_than = is_taller_than\n        self.can_jump = can_jump\n\n    def is_taller(self, other: 'Person') -> bool:\n        if self.is_taller_than is None:\n            return False\n        if self.is_taller_than.name == other.name:\n            return True\n        return self.is_taller_than.is_taller(other)\n\ndef apply_premises(persons: dict[str, Person]) -> bool:\n    changed = False\n\n    # Premise 1: If a man is taller than another man, the taller one can block the other's shooting.\n    for taller, shorter in persons.items():\n        if shorter.is_man and shorter.is_taller(persons[taller]):\n            if persons[taller].can_jump is None:\n                persons[taller].can_jump = False\n                changed = True\n\n    # Premise 2: Michael is a man who is taller than everyone else in his class.\n    michael = persons['Michael']\n    if michael.is_man:\n        for name in persons:\n            if name != 'Michael':\n                if persons[name].is_taller(michael):\n                    persons[name].is_taller_than = michael\n                    changed = True\n\n    # Premise 3: If person x is taller than person y, and person y is taller than person z, then x is taller than z.\n    for x in persons:\n        for y in persons:\n            for z in persons:\n                if persons[x].is_taller(persons[y]) and persons[y].is_taller(persons[z]):\n                    if not persons[x].is_taller(persons[z]):\n                        persons[x].is_taller_than = persons[y].is_taller_than\n                        changed = True\n\n    # Premise 4: Peter is a man who is taller than Michael.\n    peter = persons['Peter']\n    if peter.is_man and peter.is_taller(persons['Michael']):\n        if persons['Michael'].is_taller_than.name == 'Michael':\n            persons['Michael'].is_taller_than = peter\n            changed = True\n\n    # Premise 5: Michael can block any shooting from a person as long as the person does not jump when shooting.\n    if persons['Michael'].can_jump is None:\n        persons['Michael'].can_jump = False\n        changed = True\n\n    # Premise 6: Michael cannot block Windy's shooting.\n    if persons['Michael'].can_jump is False and persons['Windy'].is_man:\n        persons['Windy'].can_jump = True\n        changed = True\n\n    # Premise 7: Every shooter who can jump when shooting is a great shooter.\n    # This premise does not affect the blocking ability directly.\n\n    return changed\n\ndef run_inference(persons: dict[str, Person]):\n    while apply_premises(persons):\n        pass\n\ndef check_conclusion(persons: dict[str, Person]) -> str:\n    run_inference(persons)\n    if persons['Peter'].can_jump is None:\n        return \"Uncertain\"\n    if persons['Peter'].can_jump is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    persons = {\n        'Michael': Person('Michael', True),\n        'Peter': Person('Peter', True),\n        'Windy': Person('Windy', True)\n    }\n    return check_conclusion(persons)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Peter can block Windy's shooting?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf a man is taller than another man, the taller one can block the other's shooting.\nMichael is a man who is taller than everyone else in his class.\nIf person x is taller than person y, and person y is taller than person z, then x is taller than z\nPeter is a man who is taller than Michael.\nMichael can block any shooting from a person as long as the person does not jump when shooting.\nMichael cannot block Windy's shooting.\nEvery shooter who can jump when shooting is a great shooter.\n</Premises>\n<Conclusion>\nPeter can block Windy's shooting.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Peter can block Windy's shooting.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.",
        "conclusions": "Barutin Cove is named after all islands in Antarctica.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Place:\n    def __init__(self, name: str, is_cove: Optional[bool] = None, is_named_after: Optional[str] = None, location: Optional[str] = None):\n        self.name = name\n        self.is_cove = is_cove\n        self.is_named_after = is_named_after\n        self.location = location\n\nclass Island:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass Antarctica:\n    def __init__(self):\n        self.islands = []\n\n    def add_island(self, island: Island):\n        self.islands.append(island)\n\ndef apply_premises(places: list[Place], antarctica: Antarctica) -> bool:\n    changed = False\n\n    # Premise 1: Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\n    if places[0].name == \"Barutin Cove\":\n        if places[0].is_cove is None:\n            places[0].is_cove = True\n            changed = True\n        if places[0].is_named_after is None:\n            places[0].is_named_after = \"Barutin\"\n            changed = True\n\n    # Premise 2: Barutin Cove is on the southwest coast of Snow Island.\n    if places[0].name == \"Barutin Cove\":\n        if places[1].name == \"Snow Island\":\n            if places[1].location is None:\n                places[1].location = \"Southwest coast\"\n                changed = True\n\n    # Premise 3: Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\n    if places[1].name == \"Snow Island\":\n        if places[1].location is None:\n            places[1].location = \"South Shetland Islands\"\n            changed = True\n    if places[2].name == \"Greenwich Island\":\n        if places[2].location is None:\n            places[2].location = \"South Shetland Islands\"\n            changed = True\n    if places[3].name == \"Deception Island\":\n        if places[3].location is None:\n            places[3].location = \"South Shetland Islands\"\n            changed = True\n\n    # Premise 4: Antarctica is located on the South Shetland Islands.\n    if places[4].name == \"Antarctica\":\n        if places[4].location is None:\n            places[4].location = \"South Shetland Islands\"\n            changed = True\n\n    # Premise 5: If place A is located in place B and place B is located in place C, then place A is located in place C.\n    for island in antarctica.islands:\n        if island.location == \"South Shetland Islands\":\n            if places[4].location is None:\n                places[4].location = \"South Shetland Islands\"\n                changed = True\n\n    return changed\n\ndef run_inference(places: list[Place], antarctica: Antarctica):\n    while apply_premises(places, antarctica):\n        pass\n\ndef check_conclusion(places: list[Place], antarctica: Antarctica) -> str:\n    run_inference(places, antarctica)\n    # Conclusion: Barutin Cove is named after all islands in Antarctica.\n    # Check if Barutin Cove is named after each island in Antarctica.\n    if places[0].is_named_after is None:\n        return \"Uncertain\"\n    for island in antarctica.islands:\n        if places[0].is_named_after != island.name:\n            return \"False\"\n    return \"True\"\n\ndef func():\n    places = [\n        Place(name=\"Barutin Cove\", is_cove=None, is_named_after=None),\n        Place(name=\"Snow Island\", location=None),\n        Place(name=\"Greenwich Island\", location=None),\n        Place(name=\"Deception Island\", location=None),\n        Place(name=\"Antarctica\", location=None)\n    ]\n    antarctica = Antarctica()\n    antarctica.add_island(Island(name=\"Snow Island\"))\n    antarctica.add_island(Island(name=\"Greenwich Island\"))\n    antarctica.add_island(Island(name=\"Deception Island\"))\n    return check_conclusion(places, antarctica)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Barutin Cove is named after all islands in Antarctica?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBarutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.\n</Premises>\n<Conclusion>\nBarutin Cove is named after all islands in Antarctica.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Barutin Cove is named after all islands in Antarctica.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.",
        "conclusions": "There is at least one cove in Antarctica named after a place in Bulgaria.",
        "rationale": "from typing import Optional\n\nclass Place:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass Cove(Place):\n    def __init__(self, name: str, location: Optional[str] = None, named_after: Optional[str] = None):\n        super().__init__(name, location)\n        self.named_after = named_after\n\nclass Island(Place):\n    def __init__(self, name: str, location: Optional[str] = None):\n        super().__init__(name, location)\n\nclass Antarctica(Place):\n    def __init__(self, name: str = \"Antarctica\", location: Optional[str] = None):\n        super().__init__(name, location)\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\n    barutin_cove = Cove(\"Barutin Cove\", named_after=\"Barutin\")\n    changed = True\n\n    # Premise 2: Barutin Cove is on the southwest coast of Snow Island.\n    snow_island = Island(\"Snow Island\")\n    barutin_cove.location = snow_island.name\n    changed = True\n\n    # Premise 3: Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\n    south_shetland_islands = Place(\"South Shetland Islands\")\n    snow_island.location = south_shetland_islands.name\n    greenwich_island = Island(\"Greenwich Island\")\n    greenwich_island.location = south_shetland_islands.name\n    deception_island = Island(\"Deception Island\")\n    deception_island.location = south_shetland_islands.name\n    changed = True\n\n    # Premise 4: Antarctica is located on the South Shetland Islands.\n    antarctica = Antarctica()\n    antarctica.location = south_shetland_islands.name\n    changed = True\n\n    # Premise 5: If place A is located in place B and place B is located in place C, then place A is located in place C.\n    # This premise is already encoded in the location attributes of the places.\n\n    return changed\n\ndef run_inference():\n    apply_premises()\n\ndef check_conclusion() -> str:\n    run_inference()\n    # Conclusion: There is at least one cove in Antarctica named after a place in Bulgaria.\n    for place in [barutin_cove]:\n        if place.location == antarctica.name and place.named_after is not None:\n            if \"Bulgaria\" in place.named_after:\n                return \"True\"\n    return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: There is at least one cove in Antarctica named after a place in Bulgaria?\", result)",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBarutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.\n</Premises>\n<Conclusion>\nThere is at least one cove in Antarctica named after a place in Bulgaria.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? There is at least one cove in Antarctica named after a place in Bulgaria.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.",
        "conclusions": "Barutin Cove is not located in Antarctica.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Place:\n    def __init__(self, name: str, located_in: Optional[str] = None):\n        self.name = name\n        self.located_in = located_in\n\nclass Island(Place):\n    pass\n\nclass Cove(Place):\n    pass\n\ndef apply_premises(barutin_cove: Cove, snow_island: Island, greenwich_island: Island, deception_island: Island, antarctica: Island) -> bool:\n    changed = False\n\n    # Premise 1: Barutin Cove is a cove named after the Bulgarian settlement of Barutin.\n    if barutin_cove.name == \"Barutin Cove\":\n        if barutin_cove.located_in is None:\n            barutin_cove.located_in = \"Snow Island\"\n            changed = True\n\n    # Premise 2: Barutin Cove is on the southwest coast of Snow Island.\n    if barutin_cove.located_in == \"Snow Island\":\n        pass\n\n    # Premise 3: Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\n    if snow_island.name == \"Snow Island\" and snow_island.located_in is None:\n        snow_island.located_in = \"South Shetland Islands\"\n        changed = True\n    if greenwich_island.name == \"Greenwich Island\" and greenwich_island.located_in is None:\n        greenwich_island.located_in = \"South Shetland Islands\"\n        changed = True\n    if deception_island.name == \"Deception Island\" and deception_island.located_in is None:\n        deception_island.located_in = \"South Shetland Islands\"\n        changed = True\n\n    # Premise 4: Antarctica is located on the South Shetland Islands.\n    if antarctica.name == \"Antarctica\" and antarctica.located_in is None:\n        antarctica.located_in = \"South Shetland Islands\"\n        changed = True\n\n    # Premise 5: If place A is located in place B and place B is located in place C, then place A is located in place C.\n    def update_location(a: Place, b: Place, c: Place):\n        if a.located_in == b.name and b.located_in == c.name:\n            a.located_in = c.name\n            return True\n        return False\n\n    changed |= update_location(barutin_cove, snow_island, antarctica)\n    changed |= update_location(snow_island, antarctica, antarctica)\n    changed |= update_location(greenwich_island, antarctica, antarctica)\n    changed |= update_location(deception_island, antarctica, antarctica)\n\n    return changed\n\ndef run_inference(barutin_cove: Cove, snow_island: Island, greenwich_island: Island, deception_island: Island, antarctica: Island):\n    while apply_premises(barutin_cove, snow_island, greenwich_island, deception_island, antarctica):\n        pass\n\ndef check_conclusion(barutin_cove: Cove, antarctica: Island) -> str:\n    run_inference(barutin_cove, snow_island, greenwich_island, deception_island, antarctica)\n    if barutin_cove.located_in == \"Antarctica\":\n        return \"False\"\n    elif barutin_cove.located_in is None:\n        return \"Uncertain\"\n    else:\n        return \"True\"\n\ndef func():\n    barutin_cove = Cove(name=\"Barutin Cove\")\n    snow_island = Island(name=\"Snow Island\")\n    greenwich_island = Island(name=\"Greenwich Island\")\n    deception_island = Island(name=\"Deception Island\")\n    antarctica = Island(name=\"Antarctica\")\n    return check_conclusion(barutin_cove, antarctica)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Barutin Cove is not located in Antarctica?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBarutin Cove is a cove named after the Bulgarian settlement of Barutin.\nBarutin Cove is on the southwest coast of Snow Island.\nSnow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands.\nAntarctica is located on the South Shetland Islands. \nIf place A is located in place B and place B is located in place C, then place A is located in place C.\n</Premises>\n<Conclusion>\nBarutin Cove is not located in Antarctica.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Barutin Cove is not located in Antarctica.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some affection is love.\nSome love is positive.",
        "conclusions": "Some affection is positive.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Affection:\n    def __init__(self, is_love: Optional[bool] = None):\n        self.is_love = is_love\n\nclass Love:\n    def __init__(self, is_positive: Optional[bool] = None):\n        self.is_positive = is_positive\n\ndef apply_premises(affection: Affection, love: Love) -> bool:\n    changed = False\n\n    # Premise 1: Some affection is love.\n    # We can set one affection to be love, but we cannot determine which one.\n    if affection.is_love is None:\n        affection.is_love = True\n        changed = True\n\n    # Premise 2: Some love is positive.\n    # We can set one love to be positive, but we cannot determine which one.\n    if love.is_positive is None:\n        love.is_positive = True\n        changed = True\n\n    return changed\n\ndef run_inference(affection: Affection, love: Love):\n    while apply_premises(affection, love):\n        pass\n\ndef check_conclusion(affection: Affection, love: Love) -> str:\n    run_inference(affection, love)\n    # Conclusion: Some affection is positive.\n    if affection.is_love is None or love.is_positive is None:\n        return \"Uncertain\"\n    if affection.is_love and love.is_positive:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    affection = Affection(is_love=None)\n    love = Love(is_positive=None)\n    return check_conclusion(affection, love)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some affection is positive?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome affection is love.\nSome love is positive.\n</Premises>\n<Conclusion>\nSome affection is positive.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Some affection is positive.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. ",
        "conclusions": "John's car is a Tesla Model 3.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Car:\n    def __init__(self,\n                 is_tesla_model_3: Optional[bool] = None,\n                 is_one_seater: Optional[bool] = None,\n                 is_single_seat_electric: Optional[bool] = None):\n        self.is_tesla_model_3 = is_tesla_model_3\n        self.is_one_seater = is_one_seater\n        self.is_single_seat_electric = is_single_seat_electric\n\ndef apply_premises(car: Car) -> bool:\n    changed = False\n\n    # Premise 1: If something can transport multiple passengers, then they are not one-seaters.\n    # This premise does not directly affect the state of the car, so we skip it in this context.\n\n    # Premise 2: All Tesla Model 3 can transport multiple passengers.\n    # This implies that Tesla Model 3 are not one-seaters.\n    if car.is_tesla_model_3 is None and car.is_one_seater is not True:\n        car.is_tesla_model_3 = True\n        changed = True\n\n    # Premise 3: All single-seat electric cars are one-seaters.\n    if car.is_single_seat_electric is True and car.is_one_seater is not True:\n        car.is_one_seater = True\n        changed = True\n\n    # Premise 4: All Solo EV cars are single-seat electric cars.\n    if car.is_single_seat_electric is None and car.is_one_seater is not True:\n        car.is_single_seat_electric = True\n        car.is_tesla_model_3 = False\n        changed = True\n\n    # Premise 5: If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car.\n    # This is a conditional statement, and we use it to update the state.\n    if car.is_tesla_model_3 is not True and car.is_single_seat_electric is not True:\n        car.is_tesla_model_3 = False\n        car.is_single_seat_electric = False\n        changed = True\n\n    return changed\n\ndef run_inference(car: Car):\n    while apply_premises(car):\n        pass\n\ndef check_conclusion(car: Car) -> str:\n    run_inference(car)\n    if car.is_tesla_model_3 is True:\n        return \"True\"\n    elif car.is_tesla_model_3 is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    car = Car(is_tesla_model_3=None, is_one_seater=None, is_single_seat_electric=None)\n    return check_conclusion(car)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Is John's car a Tesla Model 3?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \n</Premises>\n<Conclusion>\nJohn's car is a Tesla Model 3.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? John's car is a Tesla Model 3.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. ",
        "conclusions": "John's car is a Solo EV.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Car:\n    def __init__(self,\n                 is_tesla_model_3: Optional[bool] = None,\n                 is_single_seat: Optional[bool] = None,\n                 is_solo_ev: Optional[bool] = None):\n        self.is_tesla_model_3 = is_tesla_model_3\n        self.is_single_seat = is_single_seat\n        self.is_solo_ev = is_solo_ev\n\ndef apply_premises(car: Car) -> bool:\n    changed = False\n\n    # Premise 1: If something can transport multiple passengers, then they are not one-seaters.\n    if car.is_tesla_model_3 is not None and car.is_tesla_model_3 is True and car.is_single_seat is not False:\n        car.is_single_seat = False\n        changed = True\n\n    # Premise 2: All Tesla Model 3 can transport multiple passengers.\n    if car.is_tesla_model_3 is not None and car.is_tesla_model_3 is True:\n        if car.is_single_seat is None:\n            car.is_single_seat = False\n            changed = True\n\n    # Premise 3: All single-seat electric cars are one-seaters.\n    if car.is_single_seat is not None and car.is_single_seat is True:\n        if car.is_solo_ev is not None and car.is_solo_ev is True:\n            car.is_solo_ev = False\n            changed = True\n\n    # Premise 4: All Solo EV cars are single-seat electric cars.\n    if car.is_solo_ev is not None and car.is_solo_ev is True:\n        if car.is_single_seat is None:\n            car.is_single_seat = True\n            changed = True\n\n    # Premise 5: If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car.\n    if car.is_tesla_model_3 is not None and car.is_tesla_model_3 is False:\n        if car.is_single_seat is not None and car.is_single_seat is True:\n            car.is_single_seat = False\n            changed = True\n\n    return changed\n\ndef run_inference(car: Car):\n    while apply_premises(car):\n        pass\n\ndef check_conclusion(car: Car) -> str:\n    run_inference(car)\n    if car.is_solo_ev is True:\n        return \"True\"\n    else:\n        return \"False\" if car.is_solo_ev is False else \"Uncertain\"\n\ndef func():\n    car = Car(\n        is_tesla_model_3=None,\n        is_single_seat=None,\n        is_solo_ev=None\n    )\n    return check_conclusion(car)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John's car is a Solo EV?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \n</Premises>\n<Conclusion>\nJohn's car is a Solo EV.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? John's car is a Solo EV.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. ",
        "conclusions": "John's car is not a Solo EV.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Car:\n    def __init__(self, is_tesla_model_3: Optional[bool] = None,\n                 is_single_seat: Optional[bool] = None,\n                 is_solo_ev: Optional[bool] = None):\n        self.is_tesla_model_3 = is_tesla_model_3\n        self.is_single_seat = is_single_seat\n        self.is_solo_ev = is_solo_ev\n\ndef apply_premises(car: Car) -> bool:\n    changed = False\n\n    # Premise 1: If something can transport multiple passengers, then they are not one-seaters.\n    # This premise does not directly affect the car attributes, so it is not encoded.\n\n    # Premise 2: All Tesla Model 3 can transport multiple passengers.\n    if car.is_tesla_model_3 is None:\n        car.is_tesla_model_3 = True\n        changed = True\n\n    # Premise 3: All single-seat electric cars are one-seaters.\n    if car.is_single_seat is None and car.is_solo_ev is True:\n        car.is_single_seat = True\n        changed = True\n\n    # Premise 4: All Solo EV cars are single-seat electric cars.\n    if car.is_solo_ev is None:\n        car.is_solo_ev = True\n        changed = True\n\n    # Premise 5: If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car.\n    # This can be broken down as:\n    # If John's car is not a Tesla Model 3, then John's car is not a single-seat electric car.\n    if car.is_tesla_model_3 is False:\n        car.is_single_seat = False\n        changed = True\n\n    return changed\n\ndef run_inference(car: Car):\n    while apply_premises(car):\n        pass\n\ndef check_conclusion(car: Car) -> str:\n    run_inference(car)\n    if car.is_solo_ev is None:\n        return \"Uncertain\"\n    if car.is_solo_ev is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    car = Car(is_tesla_model_3=None, is_single_seat=None, is_solo_ev=None)\n    return check_conclusion(car)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John's car is not a Solo EV?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf something can transport multiple passengers, then they are not one-seaters.\nAll Tesla Model 3 can transport multiple passengers.\nAll single-seat electric cars are one-seaters.\nAll Solo EV cars are single-seat electric cars. \nIf John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. \n</Premises>\n<Conclusion>\nJohn's car is not a Solo EV.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? John's car is not a Solo EV.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. ",
        "conclusions": "Rock is a monkey.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Pet:\n    def __init__(self, is_monkey: Optional[bool] = None, is_bird: Optional[bool] = None, can_fly: Optional[bool] = None, has_wings: Optional[bool] = None, is_animal: Optional[bool] = None):\n        self.is_monkey = is_monkey\n        self.is_bird = is_bird\n        self.can_fly = can_fly\n        self.has_wings = has_wings\n        self.is_animal = is_animal\n\ndef apply_premises(pet: Pet) -> bool:\n    changed = False\n\n    # Premise 1: All of Peter's pets that are mammals are also animals.\n    # Premise 2: All monkeys are mammals.\n    # Premise 3: Peter's pets are all either monkeys or birds.\n    # Premise 4: Peter's birds can fly.\n    # Premise 5: All animals that are Peter's pets can breathe.\n    # Premise 6: If Peter's pet can fly, then it has wings.\n    # Premise 7: Rock is Peter's pet.\n    # Premise 8: Rock can fly, or Rock is a bird, or Rock cannot breathe.\n\n    if pet.name == \"Rock\":\n        if pet.is_monkey is None and pet.is_bird is None and pet.can_fly is None and pet.has_wings is None and pet.is_animal is None:\n            pet.is_monkey = False  # Assume not monkey initially\n            pet.is_bird = False  # Assume not bird initially\n            pet.can_fly = True  # Assume can fly initially\n            pet.has_wings = None  # Assume no wings initially\n            pet.is_animal = True  # Assume is animal initially\n            changed = True\n\n    # Check and update based on premises\n    if pet.is_animal is True and pet.is_monkey is None:\n        pet.is_monkey = True  # All monkeys are mammals and all mammals are animals\n        changed = True\n\n    if pet.is_bird is True:\n        pet.can_fly = True  # All Peter's birds can fly\n        changed = True\n\n    if pet.can_fly is True:\n        pet.has_wings = True  # If Peter's pet can fly, then it has wings\n        changed = True\n\n    if pet.can_fly is True or pet.is_bird is True or pet.can_breathe is False:\n        # Rock can fly, or Rock is a bird, or Rock cannot breathe.\n        changed = True\n\n    return changed\n\ndef run_inference(pet: Pet):\n    while apply_premises(pet):\n        pass\n\ndef check_conclusion(pet: Pet) -> str:\n    run_inference(pet)\n    if pet.name == \"Rock\" and pet.is_monkey is True:\n        return \"True\"\n    else:\n        return \"False\" if pet.is_monkey is False else \"Uncertain\"\n\ndef func():\n    pet = Pet(name=\"Rock\")\n    return check_conclusion(pet)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rock is a monkey?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknow",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. \n</Premises>\n<Conclusion>\nRock is a monkey.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Rock is a monkey.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. ",
        "conclusions": "Rock has wings.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Pet:\n    def __init__(self, name: str, is_monkey: Optional[bool] = None, is_bird: Optional[bool] = None, can_fly: Optional[bool] = None, has_wings: Optional[bool] = None, can_breathe: Optional[bool] = None):\n        self.name = name\n        self.is_monkey = is_monkey\n        self.is_bird = is_bird\n        self.can_fly = can_fly\n        self.has_wings = has_wings\n        self.can_breathe = can_breathe\n\ndef apply_premises(pet: Pet) -> bool:\n    changed = False\n\n    # Premise 1: All of Peter's pets that are mammals are also animals.\n    # Premise 2: All monkeys are mammals.\n    # Premise 3: Peter's pets are all either monkeys or birds.\n    # Since all monkeys are mammals, and all of Peter's pets are either monkeys or birds,\n    # we can infer that if the pet is a monkey, it is a mammal and thus an animal.\n    if pet.is_monkey is None:\n        pet.is_monkey = True\n        pet.is_bird = False\n        pet.has_wings = None\n        changed = True\n\n    # If the pet is a bird, it can fly and breathe.\n    if pet.is_bird is None:\n        pet.is_bird = True\n        pet.can_fly = True\n        pet.can_breathe = True\n        pet.is_monkey = False\n        pet.has_wings = None\n        changed = True\n\n    # Premise 4: Peter's birds can fly.\n    if pet.is_bird is True and pet.can_fly is None:\n        pet.can_fly = True\n        changed = True\n\n    # Premise 5: All animals that are Peter's pets can breathe.\n    if pet.is_monkey is True or pet.is_bird is True and pet.can_breathe is None:\n        pet.can_breathe = True\n        changed = True\n\n    # Premise 6: If Peter's pet can fly, then it has wings.\n    if pet.can_fly is True and pet.has_wings is None:\n        pet.has_wings = True\n        changed = True\n\n    # Premise 7: Rock is Peter's pet.\n    if pet.name == \"Rock\" and (pet.is_monkey is None or pet.is_bird is None or pet.can_fly is None or pet.can_breathe is None):\n        pet.is_monkey = True\n        pet.is_bird = False\n        pet.can_fly = True\n        pet.can_breathe = True\n        changed = True\n\n    # Rock can fly, or Rock is a bird, or Rock cannot breathe.\n    if pet.name == \"Rock\" and (pet.can_fly is None or pet.is_bird is None or pet.can_breathe is None):\n        pet.can_fly = True\n        pet.is_bird = False\n        pet.can_breathe = True\n        changed = True\n\n    return changed\n\ndef run_inference(pet: Pet):\n    while apply_premises(pet):\n        pass\n\ndef check_conclusion(pet: Pet) -> str:\n    run_inference(pet)\n    if pet.name == \"Rock\" and pet.has_wings is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    pet = Pet(name=\"Rock\", is_monkey=None, is_bird=None, can_fly=None, has_wings=None, can_breathe=None)\n    return check_conclusion(pet)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rock has wings?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. \n</Premises>\n<Conclusion>\nRock has wings.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Rock has wings.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. ",
        "conclusions": "Rock does not have wings.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Pet:\n    def __init__(self, is_monkey: Optional[bool] = None, is_bird: Optional[bool] = None, can_fly: Optional[bool] = None, has_wings: Optional[bool] = None, can_breathe: Optional[bool] = None):\n        self.is_monkey = is_monkey\n        self.is_bird = is_bird\n        self.can_fly = can_fly\n        self.has_wings = has_wings\n        self.can_breathe = can_breathe\n\ndef apply_premises(pet: Pet) -> bool:\n    changed = False\n\n    # Premise 1: All of Peter's pets that are mammals are also animals.\n    # Since all monkeys are mammals, and all of Peter's pets are either monkeys or birds,\n    # we can infer that all of Peter's pets are animals.\n    if pet.is_monkey is True:\n        if pet.is_bird is None:\n            pet.is_bird = False\n            changed = True\n\n    # Premise 2: All monkeys are mammals.\n    # This is already encoded in the is_monkey attribute.\n    \n    # Premise 3: Peter's pets are all either monkeys or birds.\n    if pet.is_monkey is not True and pet.is_bird is not True:\n        pet.is_bird = True\n        changed = True\n\n    # Premise 4: Peter's birds can fly.\n    if pet.is_bird is True and pet.can_fly is None:\n        pet.can_fly = True\n        changed = True\n\n    # Premise 5: All animals that are Peter's pets can breathe.\n    if pet.can_breathe is None:\n        pet.can_breathe = True\n        changed = True\n\n    # Premise 6: If Peter's pet can fly, then it has wings.\n    if pet.can_fly is True and pet.has_wings is None:\n        pet.has_wings = True\n        changed = True\n\n    # Premise 7: Rock is Peter's pet.\n    # This does not change the state but ensures Rock is considered in the premises.\n    \n    # Premise 8: Rock can fly, or Rock is a bird, or Rock cannot breathe.\n    if pet.name == \"Rock\":\n        if pet.can_fly is None:\n            pet.can_fly = True\n            changed = True\n        if pet.is_bird is None:\n            pet.is_bird = True\n            changed = True\n        if pet.can_breathe is None:\n            pet.can_breathe = False\n            changed = True\n\n    return changed\n\ndef run_inference(pet: Pet):\n    while apply_premises(pet):\n        pass\n\ndef check_conclusion(pet: Pet) -> str:\n    run_inference(pet)\n    if pet.name == \"Rock\":\n        if pet.has_wings is None:\n            return \"Uncertain\"\n        if pet.has_wings is False:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    pet = Pet(\n        is_monkey=None,\n        is_bird=None,\n        can_fly=None,\n        has_wings=None,\n        can_breathe=None\n    )\n    return check_conclusion(pet)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Rock does not have wings?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll of Peter's pets that are mammals are also animals.\nAll monkeys are mammals. \nPeter's pets are all either monkeys or birds. \nPeter's birds can fly.\nAll animals that are Peter's pets can breathe.\nIf Peter's pet can fly, then it has wings.\nRock is Peter's pet.\nRock can fly, or Rock is a bird, or Rock cannot breathe. \n</Premises>\n<Conclusion>\nRock does not have wings.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Rock does not have wings.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. ",
        "conclusions": "John has a larger family.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_engaged: Optional[bool] = None, makes_wedding_plans: Optional[bool] = None,\n                 invites_to_ceremony: Optional[bool] = None, has_well_attended_wedding: Optional[bool] = None,\n                 has_larger_family: Optional[bool] = None):\n        self.name = name\n        self.is_engaged = is_engaged\n        self.makes_wedding_plans = makes_wedding_plans\n        self.invites_to_ceremony = invites_to_ceremony\n        self.has_well_attended_wedding = has_well_attended_wedding\n        self.has_larger_family = has_larger_family\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who make wedding plans are people who are engaged.\n    if person.makes_wedding_plans is True and person.is_engaged is not True:\n        person.is_engaged = True\n        changed = True\n\n    # Premise 2: All people who invite others to come to their ceremony make wedding plans.\n    if person.invites_to_ceremony is True and person.makes_wedding_plans is not True:\n        person.makes_wedding_plans = True\n        changed = True\n\n    # Premise 3: Anyone who has a well-attended wedding invites others to come to their ceremony.\n    if person.has_well_attended_wedding is True and person.invites_to_ceremony is not True:\n        person.invites_to_ceremony = True\n        changed = True\n\n    # Premise 4: Some people that have well-attended weddings have larger families.\n    # This premise does not directly update any variables but informs us that there is at least one person with a well-attended wedding and a larger family.\n    # We cannot determine if John is one of them based on this premise alone.\n\n    # Premise 5: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n    if person.name == \"John\" and person.is_engaged is True:\n        if person.invites_to_ceremony is None:\n            person.invites_to_ceremony = False\n            changed = True\n        if person.makes_wedding_plans is None:\n            person.makes_wedding_plans = False\n            changed = True\n\n    # Premise 6: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\n    if person.name == \"John\" and person.has_larger_family is True:\n        if person.has_well_attended_wedding is None:\n            person.has_well_attended_wedding = True\n            changed = True\n        if person.invites_to_ceremony is None:\n            person.invites_to_ceremony = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.has_larger_family is True:\n        return \"True\"\n    elif person.has_larger_family is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(name=\"John\", is_engaged=None, makes_wedding_plans=None, invites_to_ceremony=None,\n                    has_well_attended_wedding=None, has_larger_family=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John has a larger family?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \n</Premises>\n<Conclusion>\nJohn has a larger family.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? John has a larger family.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. ",
        "conclusions": "John does not have a larger family.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_engaged: Optional[bool] = None, has_well_attended_wedding: Optional[bool] = None, invites_friends: Optional[bool] = None, has_larger_family: Optional[bool] = None):\n        self.name = name\n        self.is_engaged = is_engaged\n        self.has_well_attended_wedding = has_well_attended_wedding\n        self.invites_friends = invites_friends\n        self.has_larger_family = has_larger_family\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who make wedding plans are people who are engaged.\n    # Premise 2: All people who invite others to come to their ceremony make wedding plans.\n    # Premise 3: Anyone who has a well-attended wedding invites others to come to their ceremony.\n    # Premise 4: Some people that have well-attended weddings have larger families.\n    # Premise 5: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n    # Premise 6: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\n    \n    if person.name == \"John\":\n        if person.is_engaged is None:\n            person.is_engaged = False  # Assume initially John is not engaged to derive a contradiction\n            changed = True\n\n        if person.is_engaged:\n            if person.invites_friends is None:\n                person.invites_friends = False\n                changed = True\n            if person.has_well_attended_wedding is None:\n                person.has_well_attended_wedding = False\n                changed = True\n\n        if person.has_larger_family is None:\n            if person.has_well_attended_wedding is not True and person.invites_friends is not True:\n                person.has_larger_family = False\n                changed = True\n            else:\n                person.has_larger_family = True\n                changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.has_larger_family is None:\n        return \"Uncertain\"\n    if person.has_larger_family is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"John\",\n        is_engaged=None,\n        has_well_attended_wedding=None,\n        invites_friends=None,\n        has_larger_family=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John does not have a larger family?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \n</Premises>\n<Conclusion>\nJohn does not have a larger family.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? John does not have a larger family.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. ",
        "conclusions": "John is engaged.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_engaged: Optional[bool] = None,\n                 has_well_attended_wedding: Optional[bool] = None,\n                 invites_friends: Optional[bool] = None,\n                 has_larger_family: Optional[bool] = None):\n        self.is_engaged = is_engaged\n        self.has_well_attended_wedding = has_well_attended_wedding\n        self.invites_friends = invites_friends\n        self.has_larger_family = has_larger_family\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who make wedding plans are people who are engaged.\n    if person.invites_friends is None and person.is_engaged is not None:\n        person.invites_friends = person.is_engaged\n        changed = True\n\n    # Premise 2: All people who invite others to come to their ceremony make wedding plans.\n    if person.has_well_attended_wedding is None and person.invites_friends is not None:\n        person.has_well_attended_wedding = person.invites_friends\n        changed = True\n\n    # Premise 3: Anyone who has a well-attended wedding invites others to come to their ceremony.\n    if person.invites_friends is None and person.has_well_attended_wedding is not None:\n        person.invites_friends = person.has_well_attended_wedding\n        changed = True\n\n    # Premise 4: Some people that have well-attended weddings have larger families.\n    # No direct update to other attributes, but we will use it for inference.\n    # Premise 5: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n    if person.is_engaged is True and (person.invites_friends is None or person.has_well_attended_wedding is None):\n        person.invites_friends = False\n        person.has_well_attended_wedding = False\n        changed = True\n\n    # Premise 6: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\n    if person.has_larger_family is True and (person.has_well_attended_wedding is None or person.invites_friends is None):\n        if person.has_well_attended_wedding is None:\n            person.has_well_attended_wedding = True\n            changed = True\n        if person.invites_friends is None:\n            person.invites_friends = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.is_engaged is None:\n        return \"Uncertain\"\n    elif person.is_engaged is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        is_engaged=None,\n        has_well_attended_wedding=None,\n        invites_friends=None,\n        has_larger_family=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John is engaged?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \n</Premises>\n<Conclusion>\nJohn is engaged.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? John is engaged.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. ",
        "conclusions": "John neither has a larger family nor does he invite others to his wedding.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_engaged: Optional[bool] = None, has_well_attended_wedding: Optional[bool] = None, invites_others: Optional[bool] = None, has_larger_family: Optional[bool] = None):\n        self.name = name\n        self.is_engaged = is_engaged\n        self.has_well_attended_wedding = has_well_attended_wedding\n        self.invites_others = invites_others\n        self.has_larger_family = has_larger_family\n\ndef apply_premises(john: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who make wedding plans are people who are engaged.\n    if john.invites_others is True and john.is_engaged is None:\n        john.is_engaged = True\n        changed = True\n\n    # Premise 2: All people who invite others to come to their ceremony make wedding plans.\n    if john.invites_others is True and john.has_well_attended_wedding is None:\n        john.has_well_attended_wedding = True\n        changed = True\n\n    # Premise 3: Anyone who has a well-attended wedding invites others to come to their ceremony.\n    if john.has_well_attended_wedding is True and john.invites_others is None:\n        john.invites_others = True\n        changed = True\n\n    # Premise 4: Some people that have well-attended weddings have larger families.\n    # This does not directly affect John's attributes.\n    # Premise 5: If John is engaged, then John does not invite friends to their ceremony and make wedding plans.\n    if john.is_engaged is True and (john.invites_others is None or john.has_well_attended_wedding is None):\n        john.invites_others = False\n        john.has_well_attended_wedding = False\n        changed = True\n\n    # Premise 6: If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony.\n    if john.has_larger_family is True and (john.has_well_attended_wedding is None or john.invites_others is None):\n        john.has_well_attended_wedding = True\n        john.invites_others = True\n        changed = True\n\n    return changed\n\ndef run_inference(john: Person):\n    while apply_premises(john):\n        pass\n\ndef check_conclusion(john: Person) -> str:\n    run_inference(john)\n    if john.has_larger_family is False and john.invites_others is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    john = Person(\n        name=\"John\",\n        is_engaged=None,\n        has_well_attended_wedding=None,\n        invites_others=None,\n        has_larger_family=None\n    )\n    return check_conclusion(john)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John neither has a larger family nor does he invite others to his wedding?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll people who make wedding plans are people who are engaged.\nAll people who invite others to come to their ceremony make wedding plans.\nAnyone who has a well-attended wedding invites others to come to their ceremony.\nSome people that have well-attended weddings have larger families.\nIf John is engaged, then John does not invite friends to their ceremony and make wedding plans.\nIf John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. \n</Premises>\n<Conclusion>\nJohn neither has a larger family nor does he invite others to his wedding.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? John neither has a larger family nor does he invite others to his wedding.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.",
        "conclusions": "Platypuses are mammals with no teeth.",
        "rationale": "from typing import Optional\n\nclass Mammal:\n    def __init__(self, has_teeth: Optional[bool] = None):\n        self.has_teeth = has_teeth\n\ndef apply_premises(mammal: Mammal) -> bool:\n    changed = False\n\n    # Premise 1: Some mammals have teeth.\n    # This premise does not provide specific information about any mammal, so no changes are made.\n\n    # Premise 2: Platypuses have no teeth.\n    if mammal.name == \"Platypus\" and mammal.has_teeth is None:\n        mammal.has_teeth = False\n        changed = True\n\n    # Premise 3: Platypuses are mammals.\n    if mammal.name == \"Platypus\" and mammal.has_teeth is False:\n        mammal = Mammal(has_teeth=False)\n        changed = True\n\n    # Premise 4: Humans have teeth.\n    # This premise does not affect the state of the Platypus, so no changes are made.\n\n    return changed\n\ndef run_inference(mammal: Mammal):\n    while apply_premises(mammal):\n        pass\n\ndef check_conclusion(mammal: Mammal) -> str:\n    run_inference(mammal)\n    if mammal.name == \"Platypus\" and mammal.has_teeth is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    platypus = Mammal(has_teeth=None)\n    return check_conclusion(platypus)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Platypuses are mammals with no teeth?\", result)",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.\n</Premises>\n<Conclusion>\nPlatypuses are mammals with no teeth.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Platypuses are mammals with no teeth.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.",
        "conclusions": "Platypuses are reptiles.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Mammal:\n    def __init__(self, has_teeth: Optional[bool] = None):\n        self.has_teeth = has_teeth\n\nclass Platypus(Mammal):\n    def __init__(self,\n                 has_teeth: Optional[bool] = None,\n                 is_reptile: Optional[bool] = None):\n        super().__init__(has_teeth)\n        self.is_reptile = is_reptile\n\ndef apply_premises(platypus: Platypus) -> bool:\n    changed = False\n\n    # Premise 1: Some mammals have teeth.\n    # This does not provide specific information about platypus, so no change.\n    \n    # Premise 2: Platypuses have no teeth.\n    if platypus.has_teeth is None:\n        platypus.has_teeth = False\n        changed = True\n\n    # Premise 3: Platypuses are mammals.\n    if platypus.is_reptile is None:\n        platypus.is_reptile = False\n        changed = True\n\n    # Premise 4: Humans have teeth.\n    # This does not provide specific information about platypus, so no change.\n\n    return changed\n\ndef run_inference(platypus: Platypus):\n    while apply_premises(platypus):\n        pass\n\ndef check_conclusion(platypus: Platypus) -> str:\n    run_inference(platypus)\n    if platypus.is_reptile is True:\n        return \"True\"\n    elif platypus.is_reptile is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    platypus = Platypus(has_teeth=None, is_reptile=None)\n    return check_conclusion(platypus)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Platypuses are reptiles?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.\n</Premises>\n<Conclusion>\nPlatypuses are reptiles.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Platypuses are reptiles.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.",
        "conclusions": "Humans are mammals.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Mammal:\n    def __init__(self, has_teeth: Optional[bool] = None, is_platypus: Optional[bool] = None):\n        self.has_teeth = has_teeth\n        self.is_platypus = is_platypus\n\ndef apply_premises(mammal: Mammal) -> bool:\n    changed = False\n\n    # Premise 1: Some mammals have teeth.\n    # This premise does not provide specific information about any mammal, so no changes are made.\n\n    # Premise 2: Platypuses have no teeth.\n    if mammal.is_platypus is None:\n        mammal.is_platypus = False\n        changed = True\n\n    # Premise 3: Platypuses are mammals.\n    # This premise does not change the state of any property, but it confirms Platypuses are mammals.\n\n    # Premise 4: Humans have teeth.\n    # This premise does not change the state of any property, but it confirms Humans have teeth.\n\n    return changed\n\ndef run_inference(mammal: Mammal):\n    while apply_premises(mammal):\n        pass\n\ndef check_conclusion(mammal: Mammal) -> str:\n    run_inference(mammal)\n    if mammal.is_platypus is False and mammal.has_teeth is True:\n        # Humans are mammals if they have teeth and are not platypuses.\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions: no specific information about humans or their mammalian status.\n    mammal = Mammal(has_teeth=None, is_platypus=None)\n    return check_conclusion(mammal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Humans are mammals?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome mammals have teeth.\nPlatypuses have no teeth.\nPlatypuses are mammals. \nHumans have teeth.\n</Premises>\n<Conclusion>\nHumans are mammals.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Humans are mammals.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Plungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.",
        "conclusions": "Space sucks.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Entity:\n    def __init__(self, name: str, sucks: Optional[bool] = None):\n        self.name = name\n        self.sucks = sucks\n\nclass Plunger(Entity):\n    pass\n\nclass Vacuum(Entity):\n    pass\n\nclass Vampire(Entity):\n    pass\n\nclass Space(Entity):\n    pass\n\nclass Duster(Entity):\n    pass\n\ndef apply_premises(entities: dict) -> bool:\n    changed = False\n\n    # Plungers suck.\n    if entities[\"Plunger\"].sucks is None:\n        entities[\"Plunger\"].sucks = True\n        changed = True\n\n    # Vacuums suck.\n    if entities[\"Vacuum\"].sucks is None:\n        entities[\"Vacuum\"].sucks = True\n        changed = True\n\n    # Vampires suck.\n    if entities[\"Vampire\"].sucks is None:\n        entities[\"Vampire\"].sucks = True\n        changed = True\n\n    # Space is a vacuum.\n    if entities[\"Space\"].sucks is None and entities[\"Vacuum\"].sucks is True:\n        entities[\"Space\"].sucks = True\n        changed = True\n\n    # A duster is a household appliance that doesn't suck.\n    if entities[\"Duster\"].sucks is None:\n        entities[\"Duster\"].sucks = False\n        changed = True\n\n    return changed\n\ndef run_inference(entities: dict):\n    while apply_premises(entities):\n        pass\n\ndef check_conclusion(entities: dict) -> str:\n    run_inference(entities)\n    if entities[\"Space\"].sucks is True:\n        return \"True\"\n    elif entities[\"Space\"].sucks is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initialize entities\n    entities = {\n        \"Plunger\": Plunger(name=\"Plunger\", sucks=None),\n        \"Vacuum\": Vacuum(name=\"Vacuum\", sucks=None),\n        \"Vampire\": Vampire(name=\"Vampire\", sucks=None),\n        \"Space\": Space(name=\"Space\", sucks=None),\n        \"Duster\": Duster(name=\"Duster\", sucks=None)\n    }\n    return check_conclusion(entities)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Space sucks?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</Premises>\n<Conclusion>\nSpace sucks.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Space sucks.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Plungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.",
        "conclusions": "Space is a vampire.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Entity:\n    def __init__(self, name: str, sucks: Optional[bool] = None):\n        self.name = name\n        self.sucks = sucks\n\nclass Plunger(Entity):\n    def __init__(self, name: str, sucks: Optional[bool] = None):\n        super().__init__(name, sucks)\n\nclass Vacuum(Entity):\n    def __init__(self, name: str, sucks: Optional[bool] = None):\n        super().__init__(name, sucks)\n\nclass Vampire(Entity):\n    def __init__(self, name: str, sucks: Optional[bool] = None):\n        super().__init__(name, sucks)\n\nclass Duster(Entity):\n    def __init__(self, name: str, sucks: Optional[bool] = None):\n        super().__init__(name, sucks)\n\ndef apply_premises(entities: dict) -> bool:\n    changed = False\n\n    # Premises\n    plungers = [Plunger(\"Plunger1\", True), Plunger(\"Plunger2\", True)]\n    vacuums = [Vacuum(\"Vacuum1\", True), Vacuum(\"Vacuum2\", True)]\n    vampires = [Vampire(\"Vampire1\", True), Vampire(\"Vampire2\", True)]\n    duster = Duster(\"Duster1\", False)\n\n    # Plungers, vacuums, and vampires suck.\n    for entity in plungers + vacuums + vampires:\n        if entity.sucks is None:\n            entity.sucks = True\n            changed = True\n\n    # A duster is a household appliance that doesn't suck.\n    if duster.sucks is None:\n        duster.sucks = False\n        changed = True\n\n    # Space is a vacuum.\n    if \"Space\" not in entities:\n        entities[\"Space\"] = Vacuum(\"Space\", None)\n    if entities[\"Space\"].sucks is None:\n        entities[\"Space\"].sucks = True\n        changed = True\n\n    return changed\n\ndef run_inference(entities: dict):\n    while apply_premises(entities):\n        pass\n\ndef check_conclusion(entities: dict) -> str:\n    run_inference(entities)\n    if \"Space\" in entities and entities[\"Space\"].sucks is True:\n        if \"Space\" in entities and isinstance(entities[\"Space\"], Vampire):\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    entities = {}\n    return check_conclusion(entities)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Space is a vampire?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</Premises>\n<Conclusion>\nSpace is a vampire.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Space is a vampire.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Plungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.",
        "conclusions": "If something is a household appliance, it sucks.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Entity:\n    def __init__(self, name: str, is_household_appliance: Optional[bool] = None, sucks: Optional[bool] = None):\n        self.name = name\n        self.is_household_appliance = is_household_appliance\n        self.sucks = sucks\n\ndef apply_premises(entity: Entity) -> bool:\n    changed = False\n\n    # Premise 1: Plungers suck.\n    if entity.name == \"Plungers\" and entity.sucks is None:\n        entity.sucks = True\n        changed = True\n\n    # Premise 2: Vacuums suck.\n    if entity.name == \"Vacuums\" and entity.sucks is None:\n        entity.sucks = True\n        changed = True\n\n    # Premise 3: Vampires suck.\n    if entity.name == \"Vampires\" and entity.sucks is None:\n        entity.sucks = True\n        changed = True\n\n    # Premise 4: Space is a vacuum.\n    # No change needed for this premise as it only identifies space as a vacuum.\n    if entity.name == \"Space\":\n        entity.is_household_appliance = False\n\n    # Premise 5: A duster is a household appliance that doesn't suck.\n    if entity.name == \"Duster\":\n        entity.is_household_appliance = True\n        entity.sucks = False\n        changed = True\n\n    return changed\n\ndef run_inference(entity: Entity):\n    while apply_premises(entity):\n        pass\n\ndef check_conclusion(entity: Entity) -> str:\n    run_inference(entity)\n    if entity.is_household_appliance is None or entity.sucks is None:\n        return \"Uncertain\"\n    if entity.is_household_appliance is True and entity.sucks is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    entity = Entity(name=\"Unknown\", is_household_appliance=None, sucks=None)\n    return check_conclusion(entity)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If something is a household appliance, it sucks?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nPlungers suck.\nVacuums suck.\nVampires suck.\nSpace is a vacuum.\nA duster is a household appliance that doesn't suck.\n</Premises>\n<Conclusion>\nIf something is a household appliance, it sucks.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If something is a household appliance, it sucks.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nUnsupervised learning algorithms do not require labeled data.\nThe state-of-the-art text summarization model is trained with machine learning algorithms.\nReinforcement learning is not used to train the state-of-the-art text summarization model.\nThe Machine Learning algorithm for training text summarization models requires labeled data.",
        "conclusions": "Supervised learning is used to train the state-of-the-art text summarization model.",
        "rationale": "```python\nfrom typing import Optional\n\nclass MachineLearningAlgorithm:\n    def __init__(self, category: Optional[str] = None, requires_labeled_data: Optional[bool] = None):\n        self.category = category\n        self.requires_labeled_data = requires_labeled_data\n\nclass StateOfTheArtModel:\n    def __init__(self, training_algorithm: Optional[str] = None):\n        self.training_algorithm = training_algorithm\n\ndef apply_premises(model: StateOfTheArtModel, algorithm: MachineLearningAlgorithm) -> bool:\n    changed = False\n\n    # Premise 1: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n    # This premise is just a general categorization and does not directly affect the inference.\n\n    # Premise 2: Unsupervised learning algorithms do not require labeled data.\n    # This premise is about the nature of unsupervised learning algorithms and does not directly affect the inference.\n\n    # Premise 3: The state-of-the-art text summarization model is trained with machine learning algorithms.\n    if model.training_algorithm is None:\n        model.training_algorithm = \"Machine Learning\"\n        changed = True\n\n    # Premise 4: Reinforcement learning is not used to train the state-of-the-art text summarization model.\n    if model.training_algorithm == \"Reinforcement Learning\":\n        model.training_algorithm = \"Machine Learning\"\n        changed = True\n\n    # Premise 5: The Machine Learning algorithm for training text summarization models requires labeled data.\n    if model.training_algorithm == \"Machine Learning\" and algorithm.requires_labeled_data is None:\n        algorithm.requires_labeled_data = True\n        changed = True\n\n    # If the algorithm is labeled as supervised learning, then it must require labeled data.\n    if model.training_algorithm == \"Supervised Learning\" and algorithm.requires_labeled_data is None:\n        algorithm.requires_labeled_data = True\n        changed = True\n\n    return changed\n\ndef run_inference(model: StateOfTheArtModel, algorithm: MachineLearningAlgorithm):\n    while apply_premises(model, algorithm):\n        pass\n\ndef check_conclusion(model: StateOfTheArtModel, algorithm: MachineLearningAlgorithm) -> str:\n    run_inference(model, algorithm)\n    if model.training_algorithm == \"Supervised Learning\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    model = StateOfTheArtModel(training_algorithm=None)\n    algorithm = MachineLearningAlgorithm(category=None, requires_labeled_data=None)\n    return check_conclusion(model, algorithm)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Supervised learning is used to train the state-of-the-art text summarization model?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nMachine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nUnsupervised learning algorithms do not require labeled data.\nThe state-of-the-art text summarization model is trained with machine learning algorithms.\nReinforcement learning is not used to train the state-of-the-art text summarization model.\nThe Machine Learning algorithm for training text summarization models requires labeled data.\n</Premises>\n<Conclusion>\nSupervised learning is used to train the state-of-the-art text summarization model.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Supervised learning is used to train the state-of-the-art text summarization model.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nUnsupervised learning algorithms do not require labeled data.\nThe state-of-the-art text summarization model is trained with machine learning algorithms.\nReinforcement learning is not used to train the state-of-the-art text summarization model.\nThe Machine Learning algorithm for training text summarization models requires labeled data.",
        "conclusions": "Unsupervised learning is used to train the state-of-the-art text summarization model.",
        "rationale": "```python\nfrom typing import Optional\n\nclass MachineLearning:\n    def __init__(self,\n                 category: Optional[str] = None,\n                 requires_labeled_data: Optional[bool] = None,\n                 used_for_text_summarization: Optional[bool] = None):\n        self.category = category\n        self.requires_labeled_data = requires_labeled_data\n        self.used_for_text_summarization = used_for_text_summarization\n\ndef apply_premises(ml_algorithm: MachineLearning) -> bool:\n    changed = False\n\n    # Premise 1: Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\n    if ml_algorithm.category not in [\"supervised learning\", \"unsupervised learning\", \"reinforcement learning\"]:\n        ml_algorithm.category = \"supervised learning\"\n        changed = True\n\n    # Premise 2: Unsupervised learning algorithms do not require labeled data.\n    if ml_algorithm.category == \"unsupervised learning\" and ml_algorithm.requires_labeled_data is not False:\n        ml_algorithm.requires_labeled_data = False\n        changed = True\n\n    # Premise 3: The state-of-the-art text summarization model is trained with machine learning algorithms.\n    if ml_algorithm.used_for_text_summarization is None:\n        ml_algorithm.used_for_text_summarization = True\n        changed = True\n\n    # Premise 4: Reinforcement learning is not used to train the state-of-the-art text summarization model.\n    if ml_algorithm.category == \"reinforcement learning\" and ml_algorithm.used_for_text_summarization is not False:\n        ml_algorithm.used_for_text_summarization = False\n        changed = True\n\n    # Premise 5: The Machine Learning algorithm for training text summarization models requires labeled data.\n    if ml_algorithm.used_for_text_summarization is True and ml_algorithm.requires_labeled_data is not True:\n        ml_algorithm.requires_labeled_data = True\n        changed = True\n\n    return changed\n\ndef run_inference(ml_algorithm: MachineLearning):\n    while apply_premises(ml_algorithm):\n        pass\n\ndef check_conclusion(ml_algorithm: MachineLearning) -> str:\n    run_inference(ml_algorithm)\n    if ml_algorithm.used_for_text_summarization is True and ml_algorithm.category == \"unsupervised learning\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    ml_algorithm = MachineLearning(\n        category=None,\n        requires_labeled_data=None,\n        used_for_text_summarization=None\n    )\n    return check_conclusion(ml_algorithm)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Unsupervised learning is used to train the state-of-the-art text summarization model?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nMachine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.\nUnsupervised learning algorithms do not require labeled data.\nThe state-of-the-art text summarization model is trained with machine learning algorithms.\nReinforcement learning is not used to train the state-of-the-art text summarization model.\nThe Machine Learning algorithm for training text summarization models requires labeled data.\n</Premises>\n<Conclusion>\nUnsupervised learning is used to train the state-of-the-art text summarization model.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Unsupervised learning is used to train the state-of-the-art text summarization model.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. ",
        "conclusions": "\"Hachi: A dog's Tale\" is rated General Audience.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Film:\n    def __init__(self,\n                 is_appropriate_all_ages: Optional[bool] = None,\n                 contains_excessive_content: Optional[bool] = None,\n                 is_general_audience: Optional[bool] = None,\n                 is_family_friendly_animated: Optional[bool] = None,\n                 is_frozen_series: Optional[bool] = None,\n                 can_watch_without_guidance: Optional[bool] = None):\n        self.is_appropriate_all_ages = is_appropriate_all_ages\n        self.contains_excessive_content = contains_excessive_content\n        self.is_general_audience = is_general_audience\n        self.is_family_friendly_animated = is_family_friendly_animated\n        self.is_frozen_series = is_friendly_series = is_frozen_series\n        self.can_watch_without_guidance = can_watch_without_guidance\n\ndef apply_premises(film: Film) -> bool:\n    changed = False\n\n    # Premise 1: If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\n    if film.is_appropriate_all_ages is True and film.can_watch_without_guidance is not True:\n        film.can_watch_without_guidance = True\n        changed = True\n\n    # Premise 2: If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\n    if film.contains_excessive_content is True and film.can_watch_without_guidance is not False:\n        film.can_watch_without_guidance = False\n        changed = True\n\n    # Premise 3: If a film is rated General Audience, then it is appropriate for people of all ages.\n    if film.is_general_audience is True and film.is_appropriate_all_ages is not True:\n        film.is_appropriate_all_ages = True\n        changed = True\n\n    # Premise 4: All family-friendly animated films are rated General Audience.\n    if film.is_family_friendly_animated is True and film.is_general_audience is not True:\n        film.is_general_audience = True\n        changed = True\n\n    # Premise 5: All movies in the Frozen series are family-friendly animated films.\n    if film.is_frozen_series is True and film.is_family_friendly_animated is not True:\n        film.is_family_friendly_animated = True\n        changed = True\n\n    # Premise 6: \u201cHachi: A dog's Tale\u201d is a film.\n    if film.name != \"Hachi: A dog's Tale\":\n        film.name = \"Hachi: A dog's Tale\"\n        changed = True\n\n    # Premise 7: \u201cHachi: A dog's Tale\u201d is either a family-friendly animated film or is appropriate for people of all ages.\n    if film.name == \"Hachi: A dog's Tale\":\n        if film.is_family_friendly_animated is None and film.is_appropriate_all_ages is None:\n            film.is_family_friendly_animated = True\n            film.is_appropriate_all_ages = True\n            changed = True\n\n    return changed\n\ndef run_inference(film: Film):\n    while apply_premises(film):\n        pass\n\ndef check_conclusion(film: Film) -> str:\n    run_inference(film)\n    if film.name == \"Hachi: A dog's Tale\":\n        if film.is_general_audience is True:\n            return \"True\"\n        elif film.is_general_audience is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    film = Film(\n        is_appropriate_all_ages=None,\n        contains_excessive_content=None,\n        is_general_audience=None,\n        is_family_friendly_animated=None,\n        is_frozen_series=None,\n        can_watch_without_guidance=None\n    )\n    return check_conclusion(film)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 'Hachi: A dog's Tale' is rated General Audience?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. \n</Premises>\n<Conclusion>\n\"Hachi: A dog's Tale\" is rated General Audience.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? \"Hachi: A dog's Tale\" is rated General Audience.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. ",
        "conclusions": "\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Film:\n    def __init__(self,\n                 appropriate_for_all_ages: Optional[bool] = None,\n                 contains_excessive_content: Optional[bool] = None,\n                 is_family_friendly_animated: Optional[bool] = None,\n                 is_frozen_series: Optional[bool] = None):\n        self.appropriate_for_all_ages = appropriate_for_all_ages\n        self.contains_excessive_content = contains_excessive_content\n        self.is_family_friendly_animated = is_family_friendly_animated\n        self.is_frozen_series = is_frozen_series\n\ndef apply_premises(film: Film) -> bool:\n    changed = False\n\n    # Premise 1: If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\n    if film.appropriate_for_all_ages is True and film.contains_excessive_content is None:\n        film.contains_excessive_content = False\n        changed = True\n\n    # Premise 2: If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\n    if film.contains_excessive_content is True and film.appropriate_for_all_ages is True:\n        film.appropriate_for_all_ages = False\n        changed = True\n\n    # Premise 3: If a film is rated General Audience, then it is appropriate for people of all ages.\n    if film.is_family_friendly_animated is True and film.appropriate_for_all_ages is None:\n        film.appropriate_for_all_ages = True\n        changed = True\n\n    # Premise 4: All family-friendly animated films are rated General Audience.\n    if film.is_family_friendly_animated is True and film.is_frozen_series is None:\n        film.is_frozen_series = False\n        changed = True\n\n    # Premise 5: All movies in the Frozen series are family-friendly animated films.\n    if film.is_frozen_series is True and film.is_family_friendly_animated is None:\n        film.is_family_friendly_animated = True\n        changed = True\n\n    # Premise 6: \"Hachi: A dog's Tale\" is a film.\n    # This is just an initialization and does not change the state.\n    # Premise 7: \"Hachi: A dog's Tale\" is either a family-friendly animated film or is appropriate for people of all ages.\n    if film.is_frozen_series is None and film.appropriate_for_all_ages is None:\n        film.is_frozen_series = True\n        film.appropriate_for_all_ages = True\n        changed = True\n\n    return changed\n\ndef run_inference(film: Film):\n    while apply_premises(film):\n        pass\n\ndef check_conclusion(film: Film) -> str:\n    run_inference(film)\n    # Conclusion: \"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.\n    if film.contains_excessive_content is None and film.is_frozen_series is None:\n        return \"Uncertain\"\n    if film.contains_excessive_content is True or film.is_frozen_series is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    film = Film(\n        appropriate_for_all_ages=None,\n        contains_excessive_content=None,\n        is_family_friendly_animated=None,\n        is_frozen_series=None\n    )\n    return check_conclusion(film)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 'Hachi: A dog's Tale' contains excessive erotic and violent content or is in the 'Frozen' series or both?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. \n</Premises>\n<Conclusion>\n\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? \"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. ",
        "conclusions": "\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Film:\n    def __init__(self, is_family_friendly_animated: Optional[bool] = None,\n                 is_general_audience: Optional[bool] = None,\n                 is_frozen_series: Optional[bool] = None,\n                 contains_excessive_content: Optional[bool] = None):\n        self.is_family_friendly_animated = is_family_friendly_animated\n        self.is_general_audience = is_general_audience\n        self.is_frozen_series = is_frozen_series\n        self.contains_excessive_content = contains_excessive_content\n\ndef apply_premises(film: Film) -> bool:\n    changed = False\n\n    # Premise 1: If a film is appropriate for people of all ages, then children can watch it without guidance from parents.\n    # Premise 2: If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\n    # These premises are redundant in the context of the conclusion and do not need to be explicitly updated.\n\n    # Premise 3: If a film is rated General Audience, then it is appropriate for people of all ages.\n    if film.is_general_audience is True and film.is_family_friendly_animated is None:\n        film.is_family_friendly_animated = True\n        changed = True\n\n    # Premise 4: All family-friendly animated films are rated General Audience.\n    if film.is_family_friendly_animated is True and film.is_general_audience is None:\n        film.is_general_audience = True\n        changed = True\n\n    # Premise 5: All movies in the Frozen series are family-friendly animated films.\n    if film.is_frozen_series is True and film.is_family_friendly_animated is None:\n        film.is_family_friendly_animated = True\n        film.is_general_audience = True\n        changed = True\n\n    # Premise 6: \"Hachi: A dog's Tale\" is a film.\n    if film.is_frozen_series is None:\n        film.is_frozen_series = False\n        changed = True\n\n    # Premise 7: \"Hachi: A dog's Tale\" is either a family-friendly animated film or is appropriate for people of all ages.\n    if film.is_family_friendly_animated is None and film.is_general_audience is None:\n        film.is_family_friendly_animated = True\n        film.is_general_audience = True\n        changed = True\n\n    return changed\n\ndef run_inference(film: Film):\n    while apply_premises(film):\n        pass\n\ndef check_conclusion(film: Film) -> str:\n    run_inference(film)\n    if film.is_frozen_series is None or film.contains_excessive_content is None:\n        return \"Uncertain\"\n    # Conclusion: \"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.\n    if (film.contains_excessive_content and film.is_frozen_series) or \\\n       (not film.contains_excessive_content and not film.is_frozen_series):\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    film = Film()\n    return check_conclusion(film)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: 'Hachi: A dog's Tale' either contains excessive erotic and violent content and is a film in the 'Frozen' series, or it neither contains excessive erotic and violent content nor is a film in the 'Frozen' series?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf a film is appropriate for people of all ages, then children can watch it without guidance from parents.\nIf a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents.\nIf a film is rated General Audience, then it is appropriate for people of all ages.\nAll family-friendly animated films are rated General Audience.\nAll movies in the Frozen series are family-friendly animated films.\n\u201cHachi: A dog\u2019s Tale\u201d is a film.\n\u201cHachi: A dog\u2019s Tale\u201d  is either a family-friendly animated film or is appropriate for people of all ages. \n</Premises>\n<Conclusion>\n\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? \"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred back in the 1920s to resemble the aurochs.\nHeck cattle are animals.\nAurochs are animals.\nSome animals to be bred back resemble extinct animals.",
        "conclusions": "Some Heck cattle are artificially selected.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self, name: Optional[str] = None, is_extinct: Optional[bool] = None):\n        self.name = name\n        self.is_extinct = is_extinct\n\nclass HeckCattle(Animal):\n    def __init__(self, is_artificially_selected: Optional[bool] = None):\n        self.is_artificially_selected = is_artificially_selected\n\ndef apply_premises(heck_cattle: HeckCattle, aurochs: Animal):\n    changed = False\n\n    # Premise 1: Heck cattle were bred back in the 1920s to resemble the aurochs.\n    if heck_cattle.is_artificially_selected is None:\n        heck_cattle.is_artificially_selected = True\n        changed = True\n\n    # Premise 2: Heck cattle are animals.\n    # This premise is inherently true and does not change the state.\n\n    # Premise 3: Aurochs are animals.\n    # This premise is inherently true and does not change the state.\n\n    # Premise 4: Some animals to be bred back resemble extinct animals.\n    # This premise does not directly affect the state of Heck cattle being artificially selected.\n    return changed\n\ndef run_inference(heck_cattle: HeckCattle):\n    while apply_premises(heck_cattle, None):\n        pass\n\ndef check_conclusion(heck_cattle: HeckCattle) -> str:\n    run_inference(heck_cattle)\n    if heck_cattle.is_artificially_selected is True:\n        return \"True\"\n    elif heck_cattle.is_artificially_selected is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    heck_cattle = HeckCattle()\n    return check_conclusion(heck_cattle)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some Heck cattle are artificially selected?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred back in the 1920s to resemble the aurochs.\nHeck cattle are animals.\nAurochs are animals.\nSome animals to be bred back resemble extinct animals.\n</Premises>\n<Conclusion>\nSome Heck cattle are artificially selected.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Some Heck cattle are artificially selected.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred back in the 1920s to resemble the aurochs.\nHeck cattle are animals.\nAurochs are animals.\nSome animals to be bred back resemble extinct animals.",
        "conclusions": "Aurochs are extinct.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self, name: Optional[str] = None, is_extinct: Optional[bool] = None):\n        self.name = name\n        self.is_extinct = is_extinct\n\nclass HeckCattle(Animal):\n    def __init__(self, name: str, is_extinct: Optional[bool] = None):\n        super().__init__(name, is_extinct)\n\ndef apply_premises(aurochs: Animal, heck_cattle: HeckCattle):\n    changed = False\n\n    # Premise 1: Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\n    # This premise is descriptive and does not affect the state of aurochs or heck cattle.\n\n    # Premise 2: Heck cattle were bred back in the 1920s to resemble the aurochs.\n    # This premise is descriptive and does not affect the state of aurochs or heck cattle.\n\n    # Premise 3: Heck cattle are animals.\n    if heck_cattle.is_extinct is None:\n        heck_cattle.is_extinct = False\n        changed = True\n\n    # Premise 4: Aurochs are animals.\n    if aurochs.is_extinct is None:\n        aurochs.is_extinct = False\n        changed = True\n\n    # Premise 5: Some animals to be bred back resemble extinct animals.\n    # This premise does not provide direct information about the extinction status of aurochs.\n\n    return changed\n\ndef run_inference(aurochs: Animal, heck_cattle: HeckCattle):\n    while apply_premises(aurochs, heck_cattle):\n        pass\n\ndef check_conclusion(aurochs: Animal) -> str:\n    run_inference(aurochs, HeckCattle(\"Heck Cattle\"))\n    if aurochs.is_extinct is True:\n        return \"True\"\n    elif aurochs.is_extinct is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    aurochs = Animal(name=\"Aurochs\")\n    return check_conclusion(aurochs)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Aurochs are extinct?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nBreeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.\nHeck cattle were bred back in the 1920s to resemble the aurochs.\nHeck cattle are animals.\nAurochs are animals.\nSome animals to be bred back resemble extinct animals.\n</Premises>\n<Conclusion>\nAurochs are extinct.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Aurochs are extinct.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "Vladimir is a Russian federation official",
        "rationale": "```python\nfrom typing import Optional\n\nclass Citizenship:\n    def __init__(self, us_citizenship: Optional[bool] = None, taiwanese_citizenship: Optional[bool] = None, russian_official: Optional[bool] = None):\n        self.us_citizenship = us_citizenship\n        self.taiwanese_citizenship = taiwanese_citizenship\n        self.russian_official = russian_official\n\nclass Person:\n    def __init__(self, name: str, can_vote: Optional[bool] = None, citizenship: Citizenship = Citizenship()):\n        self.name = name\n        self.can_vote = can_vote\n        self.citizenship = citizenship\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    if person.can_vote is True and person.citizenship.us_citizenship is None:\n        person.citizenship.us_citizenship = True\n        changed = True\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    if person.citizenship.us_citizenship is True and person.can_vote is None:\n        person.can_vote = True\n        changed = True\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    if person.citizenship.us_citizenship is None and person.citizenship.taiwanese_citizenship is None:\n        person.citizenship.us_citizenship = True  # Default to US citizenship\n        changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    if person.citizenship.taiwanese_citizenship is True and person.citizenship.russian_official is True:\n        person.citizenship.taiwanese_citizenship = False\n        changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    if person.name == \"Vladimir\":\n        if person.citizenship.taiwanese_citizenship is None:\n            person.citizenship.taiwanese_citizenship = False\n            changed = True\n        if person.citizenship.russian_official is None:\n            person.citizenship.russian_official = False\n            changed = True\n\n    # Premise 6: Ekaterina can register to vote in the United States, or she is a Russian federation official.\n    if person.name == \"Ekaterina\":\n        if person.can_vote is None and person.citizenship.russian_official is None:\n            person.can_vote = True  # Default to can vote\n            changed = True\n        if person.citizenship.russian_official is None:\n            person.citizenship.russian_official = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.citizenship.russian_official is True:\n        return \"True\"\n    elif person.citizenship.russian_official is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    vladimir = Person(name=\"Vladimir\", can_vote=None)\n    ekaterina = Person(name=\"Ekaterina\", can_vote=None)\n    return check_conclusion(vladimir)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Vladimir is a Russian federation official?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</Premises>\n<Conclusion>\nVladimir is a Russian federation official\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Vladimir is a Russian federation official\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "Vladimir is not a Russian federation official",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, has_us_citizenship: Optional[bool] = None, has_tw_citizenship: Optional[bool] = None, is_rf_official: Optional[bool] = None):\n        self.name = name\n        self.has_us_citizenship = has_us_citizenship\n        self.has_tw_citizenship = has_tw_citizenship\n        self.is_rf_official = is_rf_official\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    # This premise is not directly relevant to the conclusion, so we skip it.\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    # This premise is not directly relevant to the conclusion, so we skip it.\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    if person.has_us_citizenship is None and person.has_tw_citizenship is None:\n        person.has_us_citizenship = True  # Assume initially they have US citizenship\n        person.has_tw_citizenship = False\n        changed = True\n    elif person.has_us_citizenship is None and person.has_tw_citizenship is True:\n        person.has_us_citizenship = False\n        person.has_tw_citizenship = True\n        changed = True\n    elif person.has_tw_citizenship is None and person.has_us_citizenship is True:\n        person.has_tw_citizenship = False\n        person.has_us_citizenship = True\n        changed = True\n    elif person.has_tw_citizenship is None and person.has_us_citizenship is False:\n        person.has_tw_citizenship = True\n        person.has_us_citizenship = False\n        changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    if person.is_rf_official is True and person.has_tw_citizenship is True:\n        person.has_tw_citizenship = False\n        changed = True\n    elif person.is_rf_official is False and person.has_tw_citizenship is True:\n        person.has_tw_citizenship = False\n        changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    if person.name == \"Vladimir\":\n        if person.has_tw_citizenship is None:\n            person.has_tw_citizenship = False\n            changed = True\n        if person.is_rf_official is None:\n            person.is_rf_official = False\n            changed = True\n\n    # Premise 6: Ekaterina she can register to vote in the United States, or she is a Russian federation official.\n    if person.name == \"Ekaterina\":\n        if person.has_us_citizenship is None and person.is_rf_official is None:\n            person.has_us_citizenship = True\n            person.is_rf_official = False\n            changed = True\n        elif person.has_us_citizenship is None and person.is_rf_official is True:\n            person.has_us_citizenship = False\n            person.is_rf_official = True\n            changed = True\n        elif person.has_us_citizenship is True and person.is_rf_official is None:\n            person.is_rf_official = False\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Vladimir\":\n        if person.is_rf_official is None:\n            return \"Uncertain\"\n        if person.is_rf_official is False:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions:\n    # No specific initial conditions are given for Vladimir and Ekaterina, so we assume they are not Russian officials and have US citizenship.\n    vladimir = Person(name=\"Vladimir\", has_us_citizenship=None, has_tw_citizenship=None, is_rf_official=None)\n    ekaterina = Person(name=\"Ekaterina\", has_us_citizenship=None, has_tw_citizenship=None, is_rf_official=None)\n    return check_conclusion(vladimir)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Vladimir is not a Russian federation official?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</Premises>\n<Conclusion>\nVladimir is not a Russian federation official\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Vladimir is not a Russian federation official\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 us_citizen: Optional[bool] = None,\n                 taiwanese_citizen: Optional[bool] = None,\n                 can_register: Optional[bool] = None,\n                 is_manager_gazprom: Optional[bool] = None):\n        self.name = name\n        self.us_citizen = us_citizen\n        self.taiwanese_citizen = taiwanese_citizen\n        self.can_register = can_register\n        self.is_manager_gazprom = is_manager_gazprom\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    if person.can_register is not None and person.can_register:\n        if person.us_citizen is None:\n            person.us_citizen = True\n            changed = True\n        if person.can_register_to_vote is None:\n            person.can_register_to_vote = True\n            changed = True\n        if person.can_participate_election is None:\n            person.can_participate_election = True\n            changed = True\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    if person.us_citizen is not None and person.us_citizen:\n        if person.can_register_to_vote is None:\n            person.can_register_to_vote = True\n            changed = True\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    if person.us_citizen is None and person.taiwanese_citizen is None:\n        person.us_citizen = True\n        person.taiwanese_citizen = True\n        changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    if person.taiwanese_citizen is not None and person.taiwanese_citizen:\n        if person.is_russian_official is not None and person.is_russian_official:\n            person.taiwanese_citizen = False\n            changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    if person.name == \"Vladimir\":\n        if person.taiwanese_citizen is None:\n            person.taiwanese_citizen = False\n            changed = True\n        if person.is_manager_gazprom is None:\n            person.is_manager_gazprom = False\n            changed = True\n\n    # Premise 6: Ekaterina can register to vote in the United States, or she is a Russian federation official.\n    if person.name == \"Ekaterina\":\n        if person.can_register is None and person.is_russian_official is None:\n            person.can_register = True\n            person.is_russian_official = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    can_participate = person.can_participate_election\n    is_manager = person.is_manager_gazprom\n    if can_participate is None and is_manager is None:\n        return \"Uncertain\"\n    if can_participate or is_manager:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"Ekaterina\",\n        us_citizen=None,\n        taiwanese_citizen=None,\n        can_register=None,\n        is_manager_gazprom=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</Premises>\n<Conclusion>\nEkaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Citizenship:\n    def __init__(self, us_citizenship: Optional[bool] = None, taiwanese_citizenship: Optional[bool] = None, russia_official: Optional[bool] = None):\n        self.us_citizenship = us_citizenship\n        self.taiwanese_citizenship = TaiwaneseCitizenship(taiwanese_citizenship)\n        self.russia_official = RussiaOfficial(russia_official)\n\nclass TaiwaneseCitizenship:\n    def __init__(self, value: Optional[bool] = None):\n        self.value = value\n\nclass RussiaOfficial:\n    def __init__(self, value: Optional[bool] = None):\n        self.value = value\n\nclass Person:\n    def __init__(self, name: str, can_register: Optional[bool] = None, citizenship: Citizenship = Citizenship()):\n        self.name = name\n        self.can_register = can_register\n        self.citizenship = citizenship\n\ndef apply_premises(persons: list[Person]) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    for person in persons:\n        if person.name == \"Ekaterina\" and person.can_register is True:\n            person.can_register = True\n            changed = True\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    for person in persons:\n        if person.name == \"Ekaterina\" and person.citizenship.us_citizenship is True:\n            person.can_register = True\n            changed = True\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    for person in persons:\n        if person.name == \"Ekaterina\" and person.citizenship.us_citizenship is None and person.citizenship.taiwanese_citizenship is None:\n            person.citizenship.us_citizenship = True\n            changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    for person in persons:\n        if person.name == \"Vladimir\" and person.citizenship.taiwanese_citizenship is False and person.citizenship.russia_official is True:\n            changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    for person in persons:\n        if person.name == \"Vladimir\" and person.citizenship.taiwanese_citizenship is False and person.citizenship.russia_official is False:\n            changed = True\n\n    # Premise 6: Ekaterina can register to vote in the United States, or she is a Russian federation official.\n    for person in persons:\n        if person.name == \"Ekaterina\" and (person.can_register is None and person.citizenship.russia_official is None):\n            person.can_register = True\n            changed = True\n\n    return changed\n\ndef run_inference(persons: list[Person]):\n    while apply_premises(persons):\n        pass\n\ndef check_conclusion(persons: list[Person]) -> str:\n    run_inference(persons)\n    for person in persons:\n        if person.name == \"Ekaterina\":\n            if person.can_register is True:\n                return \"True\"\n            elif person.can_register is False:\n                return \"False\"\n            else:\n                return \"Uncertain\"\n    for person in persons:\n        if person.name == \"Vladimir\":\n            if person.citizenship.russia_official is True:\n                return \"True\"\n            else:\n                return \"False\"\n    return \"Uncertain\"\n\ndef func():\n    ekaterina = Person(name=\"Ekaterina\", can_register=None, citizenship=Citizenship(us_citizenship=None, taiwanese_citizenship=None, russia_official=None))\n    vladimir = Person(name=\"Vladimir\", can_register=None, citizenship=Citizenship(us_citizenship=None, taiwanese_citizenship=None, russia_official=None))\n    persons = [ekaterina, vladimir]\n    return check_conclusion(persons)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</Premises>\n<Conclusion>\nEkaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.",
        "conclusions": "It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Citizenship:\n    def __init__(self, us: Optional[bool] = None, taiwan: Optional[bool] = None, russia: Optional[bool] = None):\n        self.us = us\n        self.taiwan = taiwan\n        self.russia = russia\n\nclass Person:\n    def __init__(self, name: str, citizenship: Citizenship, can_register_us: Optional[bool] = None, can_participate: Optional[bool] = None):\n        self.name = name\n        self.citizenship = citizenship\n        self.can_register_us = can_register_us\n        self.can_participate = can_participate\n\ndef apply_premises(people: dict) -> bool:\n    changed = False\n\n    # Premise 1: Everyone who can register to vote in the United States can participate in the 2024 United States presidential election.\n    for person in people.values():\n        if person.can_register_us is True and person.can_participate is not True:\n            person.can_participate = True\n            changed = True\n\n    # Premise 2: If someone has United States citizenship, then they can register to vote in the United States.\n    for person in people.values():\n        if person.citizenship.us is True and person.can_register_us is not True:\n            person.can_register_us = True\n            changed = True\n\n    # Premise 3: A person either has United States citizenship or Taiwanese citizenship.\n    for person in people.values():\n        if person.citizenship.us is not True and person.citizenship.taiwan is not True:\n            person.citizenship.taiwan = True\n            changed = True\n\n    # Premise 4: No Russian Federation officials hold Taiwanese citizenship.\n    for person in people.values():\n        if person.citizenship.russia is True and person.citizenship.taiwan is True:\n            person.citizenship.taiwan = False\n            changed = True\n\n    # Premise 5: Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom.\n    if people[\"Vladimir\"].name == \"Vladimir\":\n        if people[\"Vladimir\"].citizenship.taiwan is True:\n            people[\"Vladimir\"].citizenship.taiwan = False\n            changed = True\n        if people[\"Vladimir\"].citizenship.russia is not True:\n            people[\"Vladimir\"].citizenship.russia = True\n            changed = True\n\n    # Premise 6: Ekaterina can register to vote in the United States, or she is a Russian federation official.\n    if people[\"Ekaterina\"].name == \"Ekaterina\":\n        if people[\"Ekaterina\"].can_register_us is None:\n            people[\"Ekaterina\"].can_register_us = True\n            changed = True\n        if people[\"Ekaterina\"].citizenship.russia is not True:\n            people[\"Ekaterina\"].citizenship.russia = True\n            changed = True\n\n    return changed\n\ndef run_inference(people: dict):\n    while apply_premises(people):\n        pass\n\ndef check_conclusion(people: dict) -> str:\n    run_inference(people)\n    ekaterina = people[\"Ekaterina\"]\n    vladimir = people[\"Vladimir\"]\n    if (ekaterina.can_register_us is True and vladimir.can_participate is True):\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    people = {\n        \"Vladimir\": Person(name=\"Vladimir\", citizenship=Citizenship(), can_register_us=None, can_participate=None),\n        \"Ekaterina\": Person(name=\"Ekaterina\", citizenship=Citizenship(), can_register_us=None, can_participate=None)\n    }\n    return check_conclusion(people)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nEveryone who can register to vote in the United States can participate in the 2024 United States presidential election.\nIf someone has United States citizenship, then they can register to vote in the United States.\nA person either has United States citizenship or Taiwanese citizenship.\nNo Russian Federation officials hold Taiwanese citizenship. \nVladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. \nEkaterina she can register to vote in the United States, or she is a Russian federation official.\n</Premises>\n<Conclusion>\nIt is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "New Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.",
        "conclusions": "Neapolitan Chronicles is an English book.",
        "rationale": "```python\nfrom typing import Optional\n\nclass PublishingHouse:\n    def __init__(self, name: str, specialty: Optional[str] = None):\n        self.name = name\n        self.specialty = specialty\n\nclass Book:\n    def __init__(self, name: str, publisher: Optional[PublishingHouse] = None, language: Optional[str] = None):\n        self.name = name\n        self.publisher = publisher\n        self.language = language\n\ndef apply_premises(publishing_house: PublishingHouse, book1: Book, book2: Book) -> bool:\n    changed = False\n\n    # Premise 1: New Vessel Press is a publishing house specializing in translating foreign literature into English.\n    if publishing_house.name == \"New Vessel Press\" and publishing_house.specialty is None:\n        publishing_house.specialty = \"translating foreign literature into English\"\n        changed = True\n\n    # Premise 2: All of New Vessel Press's published books are in English.\n    if publishing_house.name == \"New Vessel Press\" and publishing_house.specialty == \"translating foreign literature into English\":\n        if book1.publisher is None or book1.publisher.name != \"New Vessel Press\":\n            book1.publisher = publishing_house\n            changed = True\n        if book1.language is None:\n            book1.language = \"English\"\n            changed = True\n        if book2.publisher is None or book2.publisher.name != \"New Vessel Press\":\n            book2.publisher = publishing_house\n            changed = True\n        if book2.language is None:\n            book2.language = \"English\"\n            changed = True\n\n    return changed\n\ndef run_inference(publishing_house: PublishingHouse, book1: Book, book2: Book):\n    while apply_premises(publishing_house, book1, book2):\n        pass\n\ndef check_conclusion(publishing_house: PublishingHouse, book1: Book, book2: Book) -> str:\n    run_inference(publishing_house, book1, book2)\n    if book1.name == \"Neapolitan Chronicles\":\n        if book1.language is None:\n            return \"Uncertain\"\n        elif book1.language == \"English\":\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    publishing_house = PublishingHouse(name=\"New Vessel Press\")\n    book1 = Book(name=\"Neapolitan Chronicles\", publisher=None, language=None)\n    book2 = Book(name=\"Palace of Flies\", publisher=None, language=None)\n    return check_conclusion(publishing_house, book1, book2)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Neapolitan Chronicles is an English book?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNew Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.\n</Premises>\n<Conclusion>\nNeapolitan Chronicles is an English book.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Neapolitan Chronicles is an English book.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "New Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.",
        "conclusions": "Harry Potter was published by New Vessel Press.",
        "rationale": "```python\nfrom typing import Optional\n\nclass PublishingHouse:\n    def __init__(self, name: str, books: Optional[list] = None):\n        self.name = name\n        self.books = books if books is not None else []\n\nclass Book:\n    def __init__(self, title: str, publisher: Optional[ PublishingHouse ] = None, language: Optional[str] = None):\n        self.title = title\n        self.publisher = publisher\n        self.language = language\n\ndef apply_premises():\n    new_vessel_press = PublishingHouse(\"New Vessel Press\")\n    neapolitan_chronicles = Book(\"Neapolitan Chronicles\", publisher=new_vessel_press, language=\"English\")\n    palace_of_flies = Book(\"Palace of Flies\", publisher=new_vessel_press, language=\"English\")\n    new_vessel_press.books.extend([neapolitan_chronicles, palace_of_flies])\n\ndef run_inference():\n    apply_premises()\n\ndef check_conclusion() -> str:\n    run_inference()\n    harry_potter = Book(\"Harry Potter\")\n    if harry_potter.publisher is None or harry_potter.publisher.name != \"New Vessel Press\":\n        return \"Uncertain\"\n    return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Harry Potter was published by New Vessel Press?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNew Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.\n</Premises>\n<Conclusion>\nHarry Potter was published by New Vessel Press.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Harry Potter was published by New Vessel Press.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "New Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.",
        "conclusions": "Palace of Flies was translated from Italian.",
        "rationale": "```python\nfrom typing import Optional\n\nclass PublishingHouse:\n    def __init__(self, name: str, specialization: Optional[str] = None):\n        self.name = name\n        self.specialization = specialization\n\nclass Book:\n    def __init__(self,\n                 name: str,\n                 publisher: Optional[PublishingHouse] = None,\n                 language: Optional[str] = None,\n                 translation_language: Optional[str] = None):\n        self.name = name\n        self.publisher = publisher\n        self.language = language\n        self.translation_language = translation_language\n\ndef apply_premises(publishing_house: PublishingHouse, book1: Book, book2: Book) -> bool:\n    changed = False\n\n    # Premise 1: New Vessel Press is a publishing house specializing in translating foreign literature into English.\n    if publishing_house.name == \"New Vessel Press\" and publishing_house.specialization is None:\n        publishing_house.specialization = \"translating foreign literature into English\"\n        changed = True\n\n    # Premise 2: All of New Vessel Press's published books are in English.\n    if publishing_house.name == \"New Vessel Press\":\n        if book1.publisher is publishing_house and book1.language is not \"English\":\n            book1.language = \"English\"\n            changed = True\n        if book2.publisher is publishing_house and book2.language is not \"English\":\n            book2.language = \"English\"\n            changed = True\n\n    # Premise 3: Neapolitan Chronicles is a book published by New Vessel Press.\n    if book1.name == \"Neapolitan Chronicles\" and book1.publisher is None:\n        book1.publisher = publishing_house\n        changed = True\n\n    # Premise 4: Neapolitan Chronicles was translated from Italian.\n    if book1.name == \"Neapolitan Chronicles\" and book1.translation_language is None:\n        book1.translation_language = \"Italian\"\n        changed = True\n\n    # Premise 5: Palace of Flies is a book published by New Vessel Press.\n    if book2.name == \"Palace of Flies\" and book2.publisher is None:\n        book2.publisher = publishing_house\n        changed = True\n\n    return changed\n\ndef run_inference(publishing_house: PublishingHouse, book1: Book, book2: Book):\n    while apply_premises(publishing_house, book1, book2):\n        pass\n\ndef check_conclusion(book2: Book) -> str:\n    run_inference(publishing_house, book1, book2)\n    if book2.translation_language == \"Italian\":\n        return \"True\"\n    elif book2.translation_language is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    publishing_house = PublishingHouse(name=\"New Vessel Press\")\n    book1 = Book(name=\"Neapolitan Chronicles\", publisher=None, language=None, translation_language=None)\n    book2 = Book(name=\"Palace of Flies\", publisher=None, language=None, translation_language=None)\n    return check_conclusion(book2)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Palace of Flies was translated from Italian?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNew Vessel Press is a publishing house specializing in translating foreign literature into English.\nAll of New Vessel Press's published books are in English.\nNeapolitan Chronicles is a book published by New Vessel Press.\nNeapolitan Chronicles was translated from Italian.\nPalace of Flies is a book published by New Vessel Press.\n</Premises>\n<Conclusion>\nPalace of Flies was translated from Italian.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Palace of Flies was translated from Italian.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. ",
        "conclusions": "The mixture contains carbon.",
        "rationale": "```python\nfrom typing import Optional\n\nclass ChemicalCompound:\n    def __init__(self, contains_only_one_element: Optional[bool] = None):\n        self.contains_only_one_element = contains_only_one_element\n\nclass OrganicCompound:\n    def __init__(self, contains_carbon: Optional[bool] = None):\n        self.contains_carbon = contains_carbon\n\nclass Hydrocarbon:\n    pass\n\nclass Alkane(Hydrocarbon):\n    pass\n\nclass Mixture:\n    def __init__(self, is_chemical_compound: Optional[bool] = None, contains_only_one_element: Optional[bool] = None):\n        self.is_chemical_compound = is_chemical_compound\n        self.contains_only_one_element = contains_only_one_element\n\ndef apply_premises(mixture: Mixture) -> bool:\n    changed = False\n\n    # Premise 1: All hydrocarbons are organic compounds.\n    # No need to update as it is a classification and not a property change.\n\n    # Premise 2: All alkanes are hydrocarbons.\n    # No need to update as it is a classification and not a property change.\n\n    # Premise 3: All organic compounds are chemical compounds.\n    # No need to update as it is a classification and not a property change.\n\n    # Premise 4: All organic compounds contain carbon.\n    if isinstance(mixture, OrganicCompound) and mixture.contains_carbon is None:\n        mixture.contains_carbon = True\n        changed = True\n\n    # Premise 5: No chemical compounds contain only one element.\n    if isinstance(mixture, ChemicalCompound) and mixture.contains_only_one_element is not None:\n        if mixture.contains_only_one_element:\n            mixture.contains_only_one_element = False\n            changed = True\n\n    # Premise 6: The mixture either both is a chemical compound and contains only one element, or neither.\n    if (mixture.is_chemical_compound is not None and mixture.contains_only_one_element is not None):\n        if mixture.is_chemical_compound and mixture.contains_only_one_element:\n            mixture.contains_only_one_element = False\n            changed = True\n\n    return changed\n\ndef run_inference(mixture: Mixture):\n    while apply_premises(mixture):\n        pass\n\ndef check_conclusion(mixture: Mixture) -> str:\n    run_inference(mixture)\n    if mixture.contains_carbon is True:\n        return \"True\"\n    elif mixture.contains_carbon is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions: No information about the mixture being a chemical compound or containing only one element.\n    mixture = Mixture()\n    return check_conclusion(mixture)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The mixture contains carbon?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. \n</Premises>\n<Conclusion>\nThe mixture contains carbon.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The mixture contains carbon.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. ",
        "conclusions": "The mixture is an alkane and contains carbon.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Compound:\n    def __init__(self, is_alkane: Optional[bool] = None, contains_carbon: Optional[bool] = None, is_chemical: Optional[bool] = None, contains_only_one_element: Optional[bool] = None):\n        self.is_alkane = is_alkane\n        self.contains_carbon = contains_carbon\n        self.is_chemical = is_chemical\n        self.contains_only_one_element = contains_only_one_element\n\ndef apply_premises(mixture: Compound) -> bool:\n    changed = False\n\n    # Premise 1: All hydrocarbons are organic compounds.\n    # Premise 2: All alkanes are hydrocarbons.\n    # Premise 3: All organic compounds are chemical compounds.\n    # We need to update the properties based on these premises.\n    if mixture.is_alkane is None:\n        mixture.is_alkane = True\n        changed = True\n    if mixture.is_alkane is True and mixture.contains_carbon is None:\n        mixture.contains_carbon = True\n        changed = True\n    if mixture.contains_carbon is True and mixture.is_chemical is None:\n        mixture.is_chemical = True\n        changed = True\n    if mixture.is_chemical is True and mixture.is_alkane is True and mixture.contains_only_one_element is not False:\n        mixture.contains_only_one_element = False\n        changed = True\n\n    # Premise 4: All organic compounds contain carbon.\n    if mixture.contains_carbon is None and mixture.is_chemical is True:\n        mixture.contains_carbon = True\n        changed = True\n\n    # Premise 5: No chemical compounds contain only one element.\n    if mixture.contains_only_one_element is None and mixture.is_chemical is True:\n        mixture.contains_only_one_element = False\n        changed = True\n\n    # Premise 6: The mixture either both is a chemical compound and contains only one element, or neither.\n    if mixture.contains_only_one_element is None and mixture.is_chemical is True:\n        mixture.contains_only_one_element = False\n        changed = True\n\n    return changed\n\ndef run_inference(mixture: Compound):\n    while apply_premises(mixture):\n        pass\n\ndef check_conclusion(mixture: Compound) -> str:\n    run_inference(mixture)\n    if mixture.is_alkane is True and mixture.contains_carbon is True:\n        return \"True\"\n    else:\n        return \"False\" if mixture.is_alkane is False or mixture.contains_carbon is False else \"Uncertain\"\n\ndef func():\n    mixture = Compound(\n        is_alkane=None,\n        contains_carbon=None,\n        is_chemical=None,\n        contains_only_one_element=None\n    )\n    return check_conclusion(mixture)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The mixture is an alkane and contains carbon?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. \n</Premises>\n<Conclusion>\nThe mixture is an alkane and contains carbon.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The mixture is an alkane and contains carbon.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. ",
        "conclusions": "If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Compound:\n    def __init__(self, contains_only_one_element: Optional[bool] = None, contains_carbon: Optional[bool] = None, is_alkane: Optional[bool] = None, is_chemical: Optional[bool] = None):\n        self.contains_only_one_element = contains_only_one_element\n        self.contains_carbon = contains_carbon\n        self.is_alkane = is_alkane\n        self.is_chemical = is_chemical\n\ndef apply_premises(mixture: Compound) -> bool:\n    changed = False\n\n    # Premise 1: All hydrocarbons are organic compounds.\n    if mixture.is_alkane is True and mixture.is_chemical is None:\n        mixture.is_chemical = True\n        changed = True\n\n    # Premise 2: All alkanes are hydrocarbons.\n    if mixture.is_alkane is True and mixture.contains_carbon is None:\n        mixture.contains_carbon = True\n        changed = True\n\n    # Premise 3: All organic compounds are chemical compounds.\n    if mixture.contains_carbon is True and mixture.is_chemical is None:\n        mixture.is_chemical = True\n        changed = True\n\n    # Premise 4: All organic compounds contain carbon.\n    if mixture.is_chemical is True and mixture.contains_carbon is None:\n        mixture.contains_carbon = True\n        changed = True\n\n    # Premise 5: No chemical compounds contain only one element.\n    if mixture.is_chemical is True and mixture.contains_only_one_element is True:\n        mixture.contains_only_one_element = False\n        changed = True\n\n    # Premise 6: The mixture either both is a chemical compound and contains only one element, or neither.\n    if (mixture.contains_only_one_element is True and mixture.is_chemical is True) or (mixture.contains_only_one_element is False and mixture.is_chemical is False):\n        changed = True\n\n    return changed\n\ndef run_inference(mixture: Compound):\n    while apply_premises(mixture):\n        pass\n\ndef check_conclusion(mixture: Compound) -> str:\n    run_inference(mixture)\n    if (mixture.contains_only_one_element is True or mixture.contains_carbon is True) and (mixture.is_chemical is True or mixture.is_alkane is True):\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    mixture = Compound(\n        contains_only_one_element=None,\n        contains_carbon=None,\n        is_alkane=None,\n        is_chemical=None\n    )\n    return check_conclusion(mixture)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll hydrocarbons are organic compounds .\nAll alkanes are hydrocarbons\nAll organic compounds are chemical compounds.\nAll organic compounds contain carbon.\nNo chemical compounds contain only one element.\nThe mixture either both is a chemical compound and contains only one element, or neither. \n</Premises>\n<Conclusion>\nIf the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All humans are mortal.\nAll Greeks are humans.",
        "conclusions": "Some Greeks are mortal.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Human:\n    def __init__(self, is_mortal: Optional[bool] = None):\n        self.is_mortal = is_mortal\n\nclass Greek:\n    def __init__(self, is_human: Optional[bool] = None):\n        self.is_human = is_human\n\ndef apply_premises(human: Human, greek: Greek) -> bool:\n    changed = False\n\n    # Premise 1: All humans are mortal.\n    if greek.is_human is True and human.is_mortal is None:\n        human.is_mortal = True\n        changed = True\n\n    # Premise 2: All Greeks are humans.\n    if human.is_mortal is None and greek.is_human is True:\n        human.is_mortal = True\n        changed = True\n\n    return changed\n\ndef run_inference(human: Human, greek: Greek):\n    while apply_premises(human, greek):\n        pass\n\ndef check_conclusion(human: Human, greek: Greek) -> str:\n    run_inference(human, greek)\n    if greek.is_human is True and human.is_mortal is True:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    human = Human()\n    greek = Greek(is_human=True)\n    return check_conclusion(human, greek)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some Greeks are mortal?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll humans are mortal.\nAll Greeks are humans.\n</Premises>\n<Conclusion>\nSome Greeks are mortal.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Some Greeks are mortal.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "None of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.",
        "conclusions": "James has a part-time job offered by the university.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 works_in_library: Optional[bool] = None,\n                 from_computer_science: Optional[bool] = None,\n                 taking_database_course: Optional[bool] = None,\n                 taking_class_with_david: Optional[bool] = None,\n                 working_in_lab: Optional[bool] = None,\n                 has_part_time_job: Optional[bool] = None):\n        self.name = name\n        self.works_in_library = works_in_library\n        self.from_computer_science = from_computer_science\n        self.taking_database_course = taking_database_course\n        self.taking_class_with_david = taking_class_with_david\n        self.working_in_lab = working_in_lab\n        self.has_part_time_job = has_part_time_job\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: None of the students who currently work in the library are from the computer science department.\n    if student.works_in_library is True and student.from_computer_science is None:\n        student.from_computer_science = False\n        changed = True\n\n    # Premise 2: All of the students with part-time jobs offered by the university currently work in the library.\n    if student.has_part_time_job is True and student.works_in_library is None:\n        student.works_in_library = True\n        changed = True\n\n    # Premise 3: All of the students who are taking the database course are from the computer science department.\n    if student.taking_database_course is True and student.from_computer_science is None:\n        student.from_computer_science = True\n        changed = True\n\n    # Premise 4: All of the students taking a class with Professor David are taking the database course.\n    if student.taking_class_with_david is True and student.taking_database_course is None:\n        student.taking_database_course = True\n        changed = True\n\n    # Premise 5: All students working in the lab are taking a class with Professor David.\n    if student.working_in_lab is True and student.taking_class_with_david is None:\n        student.taking_class_with_david = True\n        changed = True\n\n    # Premise 6: James is a student working in the lab.\n    if student.name == \"James\" and student.working_in_lab is None:\n        student.working_in_lab = True\n        changed = True\n\n    # Premise 7: James doesn't work in the lab or have a part-time job offered by the university.\n    if student.name == \"James\" and student.working_in_lab is False and student.has_part_time_job is None:\n        student.has_part_time_job = False\n        changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    if student.has_part_time_job is True:\n        return \"True\"\n    elif student.has_part_time_job is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    student = Student(\n        name=\"James\",\n        works_in_library=None,\n        from_computer_science=None,\n        taking_database_course=None,\n        taking_class_with_david=None,\n        working_in_lab=None,\n        has_part_time_job=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James has a part-time job offered by the university?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNone of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.\n</Premises>\n<Conclusion>\nJames has a part-time job offered by the university.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? James has a part-time job offered by the university.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "None of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.",
        "conclusions": "James does not have a part-time job offered by the university.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 from_computer_science: Optional[bool] = None,\n                 works_in_library: Optional[bool] = None,\n                 has_part_time_job: Optional[bool] = None,\n                 taking_database_course: Optional[bool] = None,\n                 taking_class_with_david: Optional[bool] = None):\n        self.name = name\n        self.from_computer_science = from_computer_science\n        self.works_in_library = works_in_library\n        self.has_part_time_job = has_part_time_job\n        self.taking_database_course = taking_database_course\n        self.taking_class_with_david = taking_class_with_david\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: None of the students who currently work in the library are from the computer science department.\n    if student.works_in_library is True and student.from_computer_science is None:\n        student.from_computer_science = False\n        changed = True\n\n    # Premise 2: All of the students with part-time jobs offered by the university currently work in the library.\n    if student.has_part_time_job is True and student.works_in_library is None:\n        student.works_in_library = True\n        changed = True\n\n    # Premise 3: All of the students who are taking the database course are from the computer science department.\n    if student.taking_database_course is True and student.from_computer_science is None:\n        student.from_computer_science = True\n        changed = True\n\n    # Premise 4: All of the students taking a class with Professor David are taking the database course.\n    if student.taking_class_with_david is True and student.taking_database_course is None:\n        student.taking_database_course = True\n        changed = True\n\n    # Premise 5: All students working in the lab are taking a class with Professor David.\n    if student.works_in_library is True and student.taking_class_with_david is None:\n        student.taking_class_with_david = True\n        changed = True\n\n    # Premise 6: James is a student working in the lab.\n    if student.name == \"James\" and student.works_in_library is None:\n        student.works_in_library = True\n        changed = True\n\n    # Premise 7: James doesn't work in the lab or have a part-time job offered by the university.\n    if student.name == \"James\" and student.works_in_library is not False and student.has_part_time_job is not False:\n        student.works_in_library = False\n        student.has_part_time_job = False\n        changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    if student.name == \"James\" and student.has_part_time_job is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    student = Student(\n        name=\"James\",\n        from_computer_science=None,\n        works_in_library=None,\n        has_part_time_job=None,\n        taking_database_course=None,\n        taking_class_with_david=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James does not have a part-time job offered by the university?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNone of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.\n</Premises>\n<Conclusion>\nJames does not have a part-time job offered by the university.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? James does not have a part-time job offered by the university.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "None of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.",
        "conclusions": "James either takes the database course or has a part-time job offered by the university.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 works_in_library: Optional[bool] = None,\n                 from_computer_science: Optional[bool] = None,\n                 has_part_time_job: Optional[bool] = None,\n                 taking_database_course: Optional[bool] = None,\n                 taking_class_with_david: Optional[bool] = None,\n                 working_in_lab: Optional[bool] = None):\n        self.name = name\n        self.works_in_library = works_in_library\n        self.from_computer_science = from_computer_science\n        self.has_part_time_job = has_part_time_job\n        self.taking_database_course = taking_database_course\n        self.taking_class_with_david = taking_class_with_david\n        self.working_in_lab = working_in_lab\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: None of the students who currently work in the library are from the computer science department.\n    if student.works_in_library is True and student.from_computer_science is not False:\n        student.from_computer_science = False\n        changed = True\n\n    # Premise 2: All of the students with part-time jobs offered by the university currently work in the library.\n    if student.has_part_time_job is True and student.works_in_library is not True:\n        student.works_in_library = True\n        changed = True\n\n    # Premise 3: All of the students who are taking the database course are from the computer science department.\n    if student.taking_database_course is True and student.from_computer_science is not True:\n        student.from_computer_science = True\n        changed = True\n\n    # Premise 4: All of the students taking a class with Professor David are taking the database course.\n    if student.taking_class_with_david is True and student.taking_database_course is not True:\n        student.taking_database_course = True\n        changed = True\n\n    # Premise 5: All students working in the lab are taking a class with Professor David.\n    if student.working_in_lab is True and student.taking_class_with_david is not True:\n        student.taking_class_with_david = True\n        changed = True\n\n    # Premise 6: James is a student working in the lab.\n    if student.name == \"James\" and student.working_in_lab is None:\n        student.working_in_lab = True\n        changed = True\n\n    # Premise 7: James doesn't work in the lab or have a part-time job offered by the university.\n    if student.name == \"James\":\n        if student.working_in_lab is True:\n            student.working_in_lab = False\n        if student.has_part_time_job is True:\n            student.has_part_time_job = False\n        changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    if student.name == \"James\":\n        if student.taking_database_course is True or student.has_part_time_job is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    student = Student(\n        name=\"James\",\n        works_in_library=None,\n        from_computer_science=None,\n        has_part_time_job=None,\n        taking_database_course=None,\n        taking_class_with_david=None,\n        working_in_lab=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James either takes the database course or has a part-time job offered by the university?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNone of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.\n</Premises>\n<Conclusion>\nJames either takes the database course or has a part-time job offered by the university.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? James either takes the database course or has a part-time job offered by the university.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "None of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.",
        "conclusions": "James takes the database course.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Student:\n    def __init__(self,\n                 name: str,\n                 works_in_library: Optional[bool] = None,\n                 from_computer_science: Optional[bool] = None,\n                 has_part_time_job: Optional[bool] = None,\n                 taking_database_course: Optional[bool] = None,\n                 taking_class_with_david: Optional[bool] = None):\n        self.name = name\n        self.works_in_library = works_in_library\n        self.from_computer_science = from_computer_science\n        self.has_part_time_job = has_part_time_job\n        self.taking_database_course = taking_database_course\n        self.taking_class_with_david = taking_class_with_david\n\ndef apply_premises(student: Student) -> bool:\n    changed = False\n\n    # Premise 1: None of the students who currently work in the library are from the computer science department.\n    if student.name == \"James\" and student.works_in_library is not False and student.from_computer_science is not False:\n        student.from_computer_science = False\n        changed = True\n\n    # Premise 2: All of the students with part-time jobs offered by the university currently work in the library.\n    if student.name == \"James\" and student.has_part_time_job is True and student.works_in_library is not True:\n        student.works_in_library = True\n        changed = True\n\n    # Premise 3: All of the students who are taking the database course are from the computer science department.\n    if student.name == \"James\" and student.taking_database_course is True and student.from_computer_science is not True:\n        student.from_computer_science = True\n        changed = True\n\n    # Premise 4: All of the students taking a class with Professor David are taking the database course.\n    if student.name == \"James\" and student.taking_class_with_david is True and student.taking_database_course is not True:\n        student.taking_database_course = True\n        changed = True\n\n    # Premise 5: All students working in the lab are taking a class with Professor David.\n    if student.name == \"James\" and student.works_in_library is False and student.taking_class_with_david is not True:\n        student.taking_class_with_david = True\n        changed = True\n\n    # Premise 6: James doesn't work in the lab or have a part-time job offered by the university.\n    if student.name == \"James\" and student.works_in_library is not False and student.has_part_time_job is not False:\n        student.works_in_library = False\n        student.has_part_time_job = False\n        changed = True\n\n    return changed\n\ndef run_inference(student: Student):\n    while apply_premises(student):\n        pass\n\ndef check_conclusion(student: Student) -> str:\n    run_inference(student)\n    if student.name == \"James\" and student.taking_database_course is not None:\n        return \"True\" if student.taking_database_course else \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    student = Student(\n        name=\"James\",\n        works_in_library=None,\n        from_computer_science=None,\n        has_part_time_job=None,\n        taking_database_course=None,\n        taking_class_with_david=None\n    )\n    return check_conclusion(student)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: James takes the database course?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNone of the students who currently work in the library are from the computer science department. \nAll of the students with part-time jobs offered by the university currently work in the library. \nAll of the students who are taking the database course are from the computer science department. \nAll of the students taking a class with Professor David are taking the database course. \nAll students working in the lab are taking a class with Professor David.\nJames is a student working in the lab. \nJames doesn't work in the lab or have a part-time job offered by the university.\n</Premises>\n<Conclusion>\nJames takes the database course.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? James takes the database course.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.",
        "conclusions": "If George likes music and has access to a program, he will compose.",
        "rationale": "from typing import Optional\n\nclass George:\n    def __init__(self,\n                 likes_music: Optional[bool] = None,\n                 has_access_to_program: Optional[bool] = None,\n                 wants_to_compose: Optional[bool] = None,\n                 can_compose: Optional[bool] = None):\n        self.likes_music = likes_music\n        self.has_access_to_program = has_access_to_program\n        self.wants_to_compose = wants_to_compose\n        self.can_compose = can_compose\n\ndef apply_premises(george: George) -> bool:\n    changed = False\n\n    # Premise 1: If George likes music, he wants to compose.\n    if george.likes_music is True and george.wants_to_compose is not True:\n        george.wants_to_compose = True\n        changed = True\n\n    # Premise 2: If George has access to a program, he can compose.\n    if george.has_access_to_program is True and george.can_compose is not True:\n        george.can_compose = True\n        changed = True\n\n    # Premise 3: If George can compose and wants to compose, he will compose.\n    if george.can_compose is True and george.wants_to_compose is True and george.can_compose is True:\n        if george.can_compose is not True:\n            george.can_compose = True\n            changed = True\n\n    return changed\n\ndef run_inference(george: George):\n    while apply_premises(george):\n        pass\n\ndef check_conclusion(george: George) -> str:\n    run_inference(george)\n    if george.likes_music is True and george.has_access_to_program is True:\n        if george.can_compose is True:\n            return \"True\"\n        elif george.can_compose is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    george = George(\n        likes_music=None,\n        has_access_to_program=None,\n        wants_to_compose=None,\n        can_compose=None\n    )\n    return check_conclusion(george)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If George likes music and has access to a program, he will compose?\", result)",
        "label": "True",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.\n</Premises>\n<Conclusion>\nIf George likes music and has access to a program, he will compose.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If George likes music and has access to a program, he will compose.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.",
        "conclusions": "If George will not compose, George can not compose.",
        "rationale": "```python\nfrom typing import Optional\n\nclass George:\n    def __init__(self,\n                 likes_music: Optional[bool] = None,\n                 has_access_program: Optional[bool] = None,\n                 can_compose: Optional[bool] = None,\n                 wants_to_compose: Optional[bool] = None,\n                 will_compose: Optional[bool] = None):\n        self.likes_music = likes_music\n        self.has_access_program = has_access_program\n        self.can_compose = can_compose\n        self.wants_to_compose = wants_to_compose\n        self.will_compose = will_compose\n\ndef apply_premises(george: George) -> bool:\n    changed = False\n\n    # Premise 1: If George likes music, he wants to compose.\n    if george.likes_music is True and george.wants_to_compose is not True:\n        george.wants_to_compose = True\n        changed = True\n\n    # Premise 2: If George has access to a program, he can compose.\n    if george.has_access_program is True and george.can_compose is not True:\n        george.can_compose = True\n        changed = True\n\n    # Premise 3: If George can compose and wants to compose, he will compose.\n    if george.can_compose is True and george.wants_to_compose is True and george.will_compose is not True:\n        george.will_compose = True\n        changed = True\n\n    return changed\n\ndef run_inference(george: George):\n    while apply_premises(george):\n        pass\n\ndef check_conclusion(george: George) -> str:\n    run_inference(george)\n    # Conclusion: If George will not compose, George can not compose.\n    if george.will_compose is False:\n        if george.can_compose is False:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    george = George(\n        likes_music=None,\n        has_access_program=None,\n        can_compose=None,\n        wants_to_compose=None,\n        will_compose=None\n    )\n    return check_conclusion(george)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If George will not compose, George can not compose?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf George likes music, he wants to compose.\nIf George has access to a program, he can compose.\nIf George can compose and wants to compose, he will compose.\n</Premises>\n<Conclusion>\nIf George will not compose, George can not compose.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If George will not compose, George can not compose.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "A hawk never swims. \nSome birds are hawks.",
        "conclusions": "All birds swim.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Bird:\n    def __init__(self, is_hawk: Optional[bool] = None, swims: Optional[bool] = None):\n        self.is_hawk = is_hawk\n        self.swims = swims\n\ndef apply_premises(bird: Bird) -> bool:\n    changed = False\n\n    # Premise 1: A hawk never swims.\n    if bird.is_hawk is True and bird.swims is not False:\n        bird.swims = False\n        changed = True\n\n    # Premise 2: Some birds are hawks.\n    # This does not provide information about the swimming behavior of all birds.\n    return changed\n\ndef run_inference(bird: Bird):\n    while apply_premises(bird):\n        pass\n\ndef check_conclusion(bird: Bird) -> str:\n    run_inference(bird)\n    if bird.swims is None:\n        return \"Uncertain\"\n    elif bird.swims is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    bird = Bird(is_hawk=None, swims=None)\n    return check_conclusion(bird)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: All birds swim?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nA hawk never swims. \nSome birds are hawks.\n</Premises>\n<Conclusion>\nAll birds swim.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? All birds swim.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.",
        "conclusions": "Breaking Bad is on Monday at 8 pm.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Show:\n    def __init__(self, name: str, airing_time: Optional[str] = None, airing_day: Optional[str] = None):\n        self.name = name\n        self.airing_time = airing_time\n        self.airing_day = airing_day\n\nclass RealityTVShow:\n    def __init__(self, name: str, portrays_real_people: bool = True):\n        self.name = name\n        self.portrays_real_people = portrays_real_people\n\ndef apply_premises(show: Show, reality_tv_show: RealityTVShow) -> bool:\n    changed = False\n\n    # Premise 1: Some show airing at 8 pm on Monday gives out roses on TV.\n    # No direct update here, just record it.\n    \n    # Premise 2: If a show gives out roses on TV, then the show is an episode of The Bachelor.\n    # No direct update here, just record it.\n    \n    # Premise 3: The Bachelor portrays the lives of real people.\n    # No direct update here, just record it.\n    \n    # Premise 4: All shows portraying the lives of real people are reality TV shows.\n    if reality_tv_show.portrays_real_people and show.name != \"The Bachelor\":\n        reality_tv_show.portrays_real_people = False\n        changed = True\n\n    # Premise 5: Breaking Bad is a show.\n    # No direct update here, just record it.\n    \n    # Premise 6: Breaking Bad is not a reality TV show.\n    # No direct update here, just record it.\n    \n    return changed\n\ndef run_inference(show: Show, reality_tv_show: RealityTVShow):\n    while apply_premises(show, reality_tv_show):\n        pass\n\ndef check_conclusion(show: Show) -> str:\n    run_inference(show, reality_tv_show)\n    if show.airing_time == \"8 pm\" and show.airing_day == \"Monday\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    show = Show(name=\"Breaking Bad\")\n    reality_tv_show = RealityTVShow(name=\"The Bachelor\")\n    return check_conclusion(show)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Breaking Bad is on Monday at 8 pm?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.\n</Premises>\n<Conclusion>\nBreaking Bad is on Monday at 8 pm.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Breaking Bad is on Monday at 8 pm.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.",
        "conclusions": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Show:\n    def __init__(self, name: str, airing_time: Optional[str] = None, gives_roses: Optional[bool] = None, is_reality_tv: Optional[bool] = None):\n        self.name = name\n        self.airing_time = airing_time\n        self.gives_roses = gives_roses\n        self.is_reality_tv = is_reality_tv\n\ndef apply_premises(show: Show) -> bool:\n    changed = False\n\n    # Premise 1: Some show airing at 8 pm on Monday gives out roses on TV.\n    # We cannot infer that Breaking Bad is this show, so no change here.\n\n    # Premise 2: If a show gives out roses on TV, then the show is an episode of The Bachelor.\n    # No change needed as we don't know if Breaking Bad gives out roses.\n\n    # Premise 3: The Bachelor portrays the lives of real people.\n    # No change needed as we don't know if Breaking Bad portrays real people.\n\n    # Premise 4: All shows portraying the lives of real people are reality TV shows.\n    # No change needed as we don't know if Breaking Bad portrays real people.\n\n    # Premise 5: Breaking Bad is a show.\n    if show.name == \"Breaking Bad\" and show.airing_time is None:\n        show.airing_time = None\n        changed = True\n\n    # Premise 6: Breaking Bad is not a reality TV show.\n    if show.name == \"Breaking Bad\" and show.is_reality_tv is None:\n        show.is_reality_tv = False\n        changed = True\n\n    return changed\n\ndef run_inference(show: Show):\n    while apply_premises(show):\n        pass\n\ndef check_conclusion(show: Show) -> str:\n    run_inference(show)\n    if show.name == \"Breaking Bad\":\n        if show.airing_time == \"8 pm on Monday\" and show.gives_roses:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    show = Show(\n        name=\"Breaking Bad\",\n        airing_time=None,\n        gives_roses=None,\n        is_reality_tv=None\n    )\n    return check_conclusion(show)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Breaking Bad is a TV show in which roses are given out on Monday at 8 pm?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.\n</Premises>\n<Conclusion>\nBreaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.",
        "conclusions": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Show:\n    def __init__(self, name: str, airing_time: Optional[str] = None, airing_day: Optional[str] = None, gives_roses: Optional[bool] = None):\n        self.name = name\n        self.airing_time = airing_time\n        self.airing_day = airing_day\n        self.gives_roses = gives_roses\n\nclass RealityTVShow:\n    def __init__(self, name: str):\n        self.name = name\n\nclass TheBachelorEpisode:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises(show: Show, the_bachelor: TheBachelorEpisode, breaking_bad: RealityTVShow) -> bool:\n    changed = False\n\n    # Premise 1: Some show airing at 8 pm on Monday gives out roses on TV.\n    # This premise does not provide specific information about the show name, so we cannot directly update show attributes.\n\n    # Premise 2: If a show gives out roses on TV, then the show is an episode of The Bachelor.\n    if show.gives_roses is True and show.name != \"The Bachelor\":\n        show.name = \"The Bachelor\"\n        changed = True\n\n    # Premise 3: The Bachelor portrays the lives of real people.\n    if show.name == \"The Bachelor\" and not isinstance(show, RealityTVShow):\n        show = RealityTVShow(name=\"The Bachelor\")\n        changed = True\n\n    # Premise 4: All shows portraying the lives of real people are reality TV shows.\n    if isinstance(show, RealityTVShow):\n        show = RealityTVShow(name=show.name)\n        changed = True\n\n    # Premise 5: Breaking Bad is a show.\n    if show.name == \"Breaking Bad\" and show.name != \"Breaking Bad\":\n        show.name = \"Breaking Bad\"\n        changed = True\n\n    # Premise 6: Breaking Bad is not a reality TV show.\n    if show.name == \"Breaking Bad\" and isinstance(show, RealityTVShow):\n        show = Show(name=\"Breaking Bad\")\n        changed = True\n\n    return changed\n\ndef run_inference(show: Show, the_bachelor: TheBachelorEpisode, breaking_bad: RealityTVShow):\n    while apply_premises(show, the_bachelor, breaking_bad):\n        pass\n\ndef check_conclusion(show: Show) -> str:\n    run_inference(show, the_bachelor, breaking_bad)\n    if show.name == \"Breaking Bad\" and show.gives_roses is True and show.airing_time == \"8 pm\" and show.airing_day == \"Monday\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    show = Show(name=\"Breaking Bad\", gives_roses=None)\n    the_bachelor = TheBachelorEpisode(name=\"The Bachelor\")\n    breaking_bad = RealityTVShow(name=\"Breaking Bad\")\n    return check_conclusion(show)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If roses are given out during Breaking Bad, then it is on Monday at 8 pm?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome show airing at 8 pm on Monday gives out roses on TV.\nIf a show gives out roses on TV, then the show is an episode of The Bachelor.\nThe Bachelor portrays the lives of real people.\nAll shows portraying the lives of real people are reality TV shows.\nBreaking Bad is a show.\nBreaking Bad is not a reality TV show.\n</Premises>\n<Conclusion>\nIf roses are given out during Breaking Bad, then it is on Monday at 8 pm.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If roses are given out during Breaking Bad, then it is on Monday at 8 pm.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Heinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
        "conclusions": "Heinrich Schmidt was German or Russian or both.",
        "rationale": "from typing import Optional\n\nclass Politician:\n    def __init__(self, name: str, nationality: Optional[str] = None):\n        self.name = name\n        self.nationality = nationality\n\ndef apply_premises(politician: Politician) -> bool:\n    changed = False\n\n    # Premise 1: Heinrich Schmidt was a German politician.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.nationality is None:\n            politician.nationality = \"German\"\n            changed = True\n\n    # Premise 2: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n    # This premise does not provide information about his nationality being Russian.\n    return changed\n\ndef run_inference(politician: Politician):\n    while apply_premises(politician):\n        pass\n\ndef check_conclusion(politician: Politician) -> str:\n    run_inference(politician)\n    if politician.nationality is None:\n        return \"Uncertain\"\n    if \"German\" in politician.nationality or \"Russian\" in politician.nationality:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    politician = Politician(name=\"Heinrich Schmidt\", nationality=None)\n    return check_conclusion(politician)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Heinrich Schmidt was German or Russian or both?\", result)",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nHeinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</Premises>\n<Conclusion>\nHeinrich Schmidt was German or Russian or both.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Heinrich Schmidt was German or Russian or both.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Heinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
        "conclusions": "Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Politician:\n    def __init__(self, name: str, is_german: Optional[bool] = None, is_in_prussian_state_parliament: Optional[bool] = None, is_in_nazi_reichstag: Optional[bool] = None):\n        self.name = name\n        self.is_german = is_german\n        self.is_in_prussian_state_parliament = is_in_prussian_state_parliament\n        self.is_in_nazi_reichstag = is_in_nazi_reichstag\n\ndef apply_premises(politician: Politician) -> bool:\n    changed = False\n\n    # Premise 1: Heinrich Schmidt was a German politician.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.is_german is None:\n            politician.is_german = True\n            changed = True\n\n    # Premise 2: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.is_in_prussian_state_parliament is None:\n            politician.is_in_prussian_state_parliament = True\n            changed = True\n        if politician.is_in_nazi_reichstag is None:\n            politician.is_in_nazi_reichstag = True\n            changed = True\n\n    return changed\n\ndef run_inference(politician: Politician):\n    while apply_premises(politician):\n        pass\n\ndef check_conclusion(politician: Politician) -> str:\n    run_inference(politician)\n    # Conclusion: Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n    if politician.is_german is True and politician.is_in_prussian_state_parliament is True and politician.is_in_nazi_reichstag is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    politician = Politician(\n        name=\"Heinrich Schmidt\",\n        is_german=None,\n        is_in_prussian_state_parliament=None,\n        is_in_nazi_reichstag=None\n    )\n    return check_conclusion(politician)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nHeinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</Premises>\n<Conclusion>\nSome German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Heinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.",
        "conclusions": "No politicians are part of the Nazi Reichstag.",
        "rationale": "from typing import Optional\n\nclass Politician:\n    def __init__(self, name: str, is_politician: Optional[bool] = None, in_nazi_reichstag: Optional[bool] = None):\n        self.name = name\n        self.is_politician = is_politician\n        self.in_nazi_reichstag = in_nazi_reichstag\n\ndef apply_premises(politician: Politician) -> bool:\n    changed = False\n\n    # Premise 1: Heinrich Schmidt was a German politician.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.is_politician is None:\n            politician.is_politician = True\n            changed = True\n\n    # Premise 2: Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n    if politician.name == \"Heinrich Schmidt\":\n        if politician.in_nazi_reichstag is None:\n            politician.in_nazi_reichstag = True\n            changed = True\n\n    return changed\n\ndef run_inference(politician: Politician):\n    while apply_premises(politician):\n        pass\n\ndef check_conclusion(politician: Politician) -> str:\n    run_inference(politician)\n    # Conclusion: No politicians are part of the Nazi Reichstag.\n    # If there exists a politician in the Nazi Reichstag, then the conclusion is false.\n    if politician.is_politician is True and politician.in_nazi_reichstag is True:\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    politician = Politician(name=\"Heinrich Schmidt\", is_politician=None, in_nazi_reichstag=None)\n    return check_conclusion(politician)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No politicians are part of the Nazi Reichstag?\", result)",
        "label": "False",
        "predict": "False",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nHeinrich Schmidt was a German politician. \nHeinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.\n</Premises>\n<Conclusion>\nNo politicians are part of the Nazi Reichstag.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? No politicians are part of the Nazi Reichstag.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.",
        "conclusions": "Colorectal cancer is a kind of severe cancer",
        "rationale": "```python\nfrom typing import Optional\n\nclass Cancer:\n    def __init__(self, name: str, is_severe: Optional[bool] = None, is_bile_duct: Optional[bool] = None, has_low_survival: Optional[bool] = None):\n        self.name = name\n        self.is_severe = is_severe\n        self.is_bile_duct = is_bile_duct\n        self.has_low_survival = has_low_survival\n\ndef apply_premises(cancer: Cancer) -> bool:\n    changed = False\n\n    # Premise 1: If something is a deadly disease, then it comes with a low survival rate.\n    # Premise 2: Severe cancers are deadly diseases.\n    if cancer.is_severe is None and cancer.name == \"Severe cancer\":\n        cancer.is_severe = True\n        cancer.has_low_survival = True\n        changed = True\n\n    # Premise 3: Bile duct cancer is a severe form cancer.\n    if cancer.name == \"Bile duct cancer\":\n        if cancer.is_severe is None:\n            cancer.is_severe = True\n            changed = True\n\n    # Premise 4: All Cholangiocarcarcinoma is bile duct cancer.\n    if cancer.name == \"Cholangiocarcarcinoma\":\n        if cancer.is_bile_duct is None:\n            cancer.is_bile_duct = True\n            changed = True\n\n    # Premise 5: Mild flu comes with a low survival rate.\n    # This premise does not affect the state of the cancer class.\n\n    # Premise 6: Colorectal cancer is not both a bile duct cancer and with a low survival rate.\n    if cancer.name == \"Colorectal cancer\":\n        if cancer.is_bile_duct is None:\n            cancer.is_bile_duct = False\n            changed = True\n        if cancer.has_low_survival is None:\n            cancer.has_low_survival = False\n            changed = True\n\n    return changed\n\ndef run_inference(cancer: Cancer):\n    while apply_premises(cancer):\n        pass\n\ndef check_conclusion(cancer: Cancer) -> str:\n    run_inference(cancer)\n    if cancer.name == \"Colorectal cancer\" and cancer.is_severe is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Initial conditions\n    cancer = Cancer(name=\"Colorectal cancer\")\n    return check_conclusion(cancer)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Colorectal cancer is a kind of severe cancer?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.\n</Premises>\n<Conclusion>\nColorectal cancer is a kind of severe cancer\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Colorectal cancer is a kind of severe cancer\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.",
        "conclusions": "If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Disease:\n    def __init__(self, name: str, is_deadly: Optional[bool] = None, survival_rate: Optional[str] = None):\n        self.name = name\n        self.is_deadly = is_deadly\n        self.survival_rate = survival_rate\n\nclass Cancer(Disease):\n    def __init__(self, name: str, is_severe: Optional[bool] = None, is_bile_duct: Optional[bool] = None):\n        super().__init__(name)\n        self.is_severe = is_severe\n        self.is_bile_duct = is_bile_duct\n\nclass Cholangiocarcinoma(Cancer):\n    def __init__(self, is_bile_duct: Optional[bool] = None):\n        super().__init__(\"Cholangiocarcinoma\", is_bile_duct=is_bile_duct)\n\ndef apply_premises():\n    colorectal_cancer = Cancer(\"Colorectal cancer\")\n    bile_duct_cancer = Cancer(\"Bile duct cancer\", is_bile_duct=True)\n    cholangiocarcinoma = Cholangiocarcinoma(is_bile_duct=True)\n\n    # Premise 1: If something is a deadly disease, then it comes with a low survival rate.\n    colorectal_cancer.is_deadly = True\n    colorectal_cancer.survival_rate = \"low\"\n\n    # Premise 2: Severe cancers are deadly diseases.\n    bile_duct_cancer.is_deadly = True\n\n    # Premise 3: Bile duct cancer is a severe form cancer.\n    bile_duct_cancer.is_severe = True\n\n    # Premise 4: All Cholangiocarcinoma is bile duct cancer.\n    cholangiocarcinoma.is_bile_duct = True\n\n    # Premise 5: Mild flu comes with a low survival rate.\n    mild_flu = Cancer(\"Mild flu\", survival_rate=\"low\")\n\n    # Premise 6: Colorectal cancer is not both a bile duct cancer and with a low survival rate.\n    colorectal_cancer.is_bile_duct = False\n\ndef check_conclusion() -> str:\n    apply_premises()\n    colorectal_cancer = Cancer(\"Colorectal cancer\")\n    bile_duct_cancer = Cancer(\"Bile duct cancer\", is_bile_duct=True)\n    cholangiocarcinoma = Cholangiocarcinoma(is_bile_duct=True)\n\n    # Check if colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma\n    if colorectal_cancer.is_bile_duct or cholangiocarcinoma.is_bile_duct:\n        # Check if colorectal cancer is a kind of bile duct cancer and a kind of mild flu\n        if colorectal_cancer.is_bile_duct and colorectal_cancer.survival_rate == \"low\":\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.\n</Premises>\n<Conclusion>\nIf colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "If something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.",
        "conclusions": "Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Disease:\n    def __init__(self, name: str, is_deadly: Optional[bool] = None, survival_rate: Optional[str] = None):\n        self.name = name\n        self.is_deadly = is_deadly\n        self.survival_rate = survival_rate\n\nclass Cancer(Disease):\n    def __init__(self, name: str, is_severe: Optional[bool] = None, is_bile_duct: Optional[bool] = None):\n        super().__init__(name)\n        self.is_severe = is_severe\n        self.is_bile_duct = is_bile_duct\n\ndef apply_premises(disease: Disease, cancer: Cancer) -> bool:\n    changed = False\n\n    # Premise 1: If something is a deadly disease, then it comes with a low survival rate.\n    if disease.is_deadly is True and disease.survival_rate is None:\n        disease.survival_rate = 'low'\n        changed = True\n\n    # Premise 2: Severe cancers are deadly diseases.\n    if cancer.is_severe is True and cancer.is_deadly is not True:\n        cancer.is_deadly = True\n        changed = True\n\n    # Premise 3: Bile duct cancer is a severe form cancer.\n    if cancer.is_bile_duct is True and cancer.is_severe is not True:\n        cancer.is_severe = True\n        changed = True\n\n    # Premise 4: All Cholangiocarcinoma is bile duct cancer.\n    if cancer.name == 'Cholangiocarcinoma' and cancer.is_bile_duct is not True:\n        cancer.is_bile_duct = True\n        changed = True\n\n    # Premise 5: Mild flu comes with a low survival rate.\n    if disease.name == 'Mild flu' and disease.survival_rate is None:\n        disease.survival_rate = 'low'\n        changed = True\n\n    # Premise 6: Colorectal cancer is not both a bile duct cancer and with a low survival rate.\n    if cancer.name == 'Colorectal cancer' and cancer.is_bile_duct is True and disease.survival_rate == 'low':\n        cancer.is_bile_duct = False\n        disease.survival_rate = None\n        changed = True\n\n    return changed\n\ndef run_inference(disease: Disease, cancer: Cancer):\n    while apply_premises(disease, cancer):\n        pass\n\ndef check_conclusion(disease: Disease, cancer: Cancer) -> str:\n    run_inference(disease, cancer)\n    if cancer.name == 'Colorectal cancer':\n        if cancer.is_bile_duct is True or disease.name == 'Cholangiocarcinoma':\n            return \"True\"\n        elif disease.name == 'Mild flu':\n            return \"True\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions\n    disease = Disease(name='Mild flu', survival_rate='low')\n    cancer = Cancer(name='Colorectal cancer', is_severe=None, is_bile_duct=None)\n\n    return check_conclusion(disease, cancer)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nIf something is a deadly disease, then it comes with a low survival rate. \nSevere cancers are deadly diseases.\nBile duct cancer is a severe form cancer. \nAll Cholangiocarcinoma is bile duct cancer.\nMild flu comes with a low survival rate.\nColorectal cancer is not both a bile duct cancer and with a low survival rate.\n</Premises>\n<Conclusion>\nColorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.",
        "conclusions": "Taylor eats salads regularly.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 eats_salads: Optional[bool] = None,\n                 is_health_conscious: Optional[bool] = None,\n                 grew_up_health_conscious: Optional[bool] = None,\n                 fulfills_daily_intakes: Optional[bool] = None,\n                 disregards_physical_well_being: Optional[bool] = None):\n        self.name = name\n        self.eats_salads = eats_salads\n        self.is_health_conscious = is_health_conscious\n        self.grew_up_health_conscious = grew_up_health_conscious\n        self.fulfills_daily_intakes = fulfills_daily_intakes\n        self.disregards_physical_well_being = disregards_physical_well_being\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who eat salads regularly are very conscious about their health and eating habits.\n    if person.eats_salads is True and person.is_health_conscious is not True:\n        person.is_health_conscious = True\n        changed = True\n\n    # Premise 2: All people who grew up in health-conscious childhood homes eat salads regularly.\n    if person.grew_up_health_conscious is True and person.eats_salads is not True:\n        person.eats_salads = True\n        changed = True\n\n    # Premise 3: All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\n    if person.fulfills_daily_intakes is True and person.grew_up_health_conscious is not True:\n        person.grew_up_health_conscious = True\n        changed = True\n\n    # Premise 4: All people who disregard their physical well-being are not very conscious about their health and eating habits.\n    if person.disregards_physical_well_being is True and person.is_health_conscious is not False:\n        person.is_health_conscious = False\n        changed = True\n\n    # Premise 5: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n    # Since we don't have information about gym visits, we cannot directly update the daily intakes status here.\n\n    # Taylor's specific case:\n    # Premise 6: Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n    if person.name == \"Taylor\":\n        if (person.grew_up_health_conscious is True and person.disregards_physical_well_being is True) or \\\n           (person.grew_up_health_conscious is False and person.disregards_physical_well_being is False):\n            # If Taylor grew up in a health-conscious home and disregards her well-being, she eats salads regularly.\n            # If she did neither, we cannot determine from the premises alone.\n            if person.grew_up_health_conscious is True and person.disregards_physical_well_being is True:\n                person.eats_salads = True\n                changed = True\n            elif person.grew_up_health_conscious is False and person.disregards_physical_well_being is False:\n                person.eats_salads = None\n                changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.eats_salads is True:\n        return \"True\"\n    elif person.eats_salads is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Taylor\",\n        eats_salads=None,\n        is_health_conscious=None,\n        grew_up_health_conscious=None,\n        fulfills_daily_intakes=None,\n        disregards_physical_well_being=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Taylor eats salads regularly?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n</Premises>\n<Conclusion>\nTaylor eats salads regularly.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Taylor eats salads regularly.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.",
        "conclusions": "Taylor visits the gym at least once a day.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 eats_salads_regularly: Optional[bool] = None,\n                 is_health_conscious: Optional[bool] = None,\n                 grew_up_health_conscious_home: Optional[bool] = None,\n                 fulfills_daily_nutritional_intakes: Optional[bool] = None,\n                 disregards_physical_well_being: Optional[bool] = None,\n                 visits_gym_daily: Optional[bool] = None):\n        self.name = name\n        self.eats_salads_regularly = eats_salads_regularly\n        self.is_health_conscious = is_health_conscious\n        self.grew_up_health_conscious_home = grew_up_health_conscious_home\n        self.fulfills_daily_nutritional_intakes = fulfills_daily_nutritional_intakes\n        self.disregards_physical_well_being = disregards_physical_well_being\n        self.visits_gym_daily = visits_gym_daily\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who eat salads regularly are very conscious about their health and eating habits.\n    if person.eats_salads_regularly is True and person.is_health_conscious is not True:\n        person.is_health_conscious = True\n        changed = True\n\n    # Premise 2: All people who grew up in health-conscious childhood homes eat salads regularly.\n    if person.grew_up_health_conscious_home is True and person.eats_salads_regularly is not True:\n        person.eats_salads_regularly = True\n        changed = True\n\n    # Premise 3: All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\n    if person.fulfills_daily_nutritional_intakes is True and person.grew_up_health_conscious_home is not True:\n        person.grew_up_health_conscious_home = True\n        changed = True\n\n    # Premise 4: All people who disregard their physical well-being are not very conscious about their health and eating habits.\n    if person.disregards_physical_well_being is True and person.is_health_conscious is not False:\n        person.is_health_conscious = False\n        changed = True\n\n    # Premise 5: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n    if person.visits_gym_daily is True and person.fulfills_daily_nutritional_intakes is not True:\n        person.fulfills_daily_nutritional_intakes = True\n        changed = True\n\n    # Premise 6: Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n    if person.name == \"Taylor\" and (person.grew_up_health_conscious_home is not None and person.disregards_physical_well_being is not None):\n        if (person.grew_up_health_conscious_home and person.disregards_physical_well_being) or (not person.grew_up_health_conscious_home and not person.disregards_physical_well_being):\n            if person.grew_up_health_conscious_home is True:\n                person.eats_salads_regularly = True\n                person.is_health_conscious = True\n                person.fulfills_daily_nutritional_intakes = True\n                person.visits_gym_daily = True\n                changed = True\n            elif person.disregards_physical_well_being is True:\n                person.is_health_conscious = False\n                changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.visits_gym_daily is True:\n        return \"True\"\n    elif person.visits_gym_daily is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Taylor\",\n        eats_salads_regularly=None,\n        is_health_conscious=None,\n        grew_up_health_conscious_home=None,\n        fulfills_daily_nutritional_intakes=None,\n        disregards_physical_well_being=None,\n        visits_gym_daily=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Taylor visits the gym at least once a day?\", result)",
        "label": "False",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n</Premises>\n<Conclusion>\nTaylor visits the gym at least once a day.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Taylor visits the gym at least once a day.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.",
        "conclusions": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 grows_up_health_conscious: Optional[bool] = None,\n                 visits_gym: Optional[bool] = None,\n                 eats_salads: Optional[bool] = None,\n                 fulfills_daily_intakes: Optional[bool] = None,\n                 is_healthy_conscious: Optional[bool] = None):\n        self.name = name\n        self.grows_up_health_conscious = grows_up_health_conscious\n        self.visits_gym = visits_gym\n        self.eats_salads = eats_salads\n        self.fulfills_daily_intakes = fulfills_daily_intakes\n        self.is_healthy_conscious = is_healthy_conscious\n\ndef apply_premises(taylor: Person) -> bool:\n    changed = False\n\n    # Premise 1: All people who eat salads regularly are very conscious about their health and eating habits.\n    if taylor.eats_salads is True and taylor.is_healthy_conscious is None:\n        taylor.is_healthy_conscious = True\n        changed = True\n\n    # Premise 2: All people who grew up in health-conscious childhood homes eat salads regularly.\n    if taylor.grows_up_health_conscious is True and taylor.eats_salads is None:\n        taylor.eats_salads = True\n        changed = True\n\n    # Premise 3: All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\n    if taylor.fulfills_daily_intakes is True and taylor.grows_up_health_conscious is None:\n        taylor.grows_up_health_conscious = True\n        changed = True\n\n    # Premise 4: All people who disregard their physical well-being are not very conscious about their health and eating habits.\n    if taylor.visits_gym is False and taylor.is_healthy_conscious is None:\n        taylor.is_healthy_conscious = False\n        changed = True\n\n    # Premise 5: If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\n    if taylor.visits_gym is True and taylor.fulfills_daily_intakes is None:\n        taylor.fulfills_daily_intakes = True\n        changed = True\n\n    # Premise 6: Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n    if (taylor.grows_up_health_conscious is True and taylor.visits_gym is False) or (taylor.grows_up_health_conscious is False and taylor.visits_gym is True):\n        taylor.grows_up_health_conscious = None\n        taylor.visits_gym = None\n        changed = True\n\n    return changed\n\ndef run_inference(taylor: Person):\n    while apply_premises(taylor):\n        pass\n\ndef check_conclusion(taylor: Person) -> str:\n    run_inference(taylor)\n    # Conclusion: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\n    if taylor.grows_up_health_conscious is False and taylor.visits_gym is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    taylor = Person(\n        name=\"Taylor\",\n        grows_up_health_conscious=None,\n        visits_gym=None,\n        eats_salads=None,\n        fulfills_daily_intakes=None,\n        is_healthy_conscious=None\n    )\n    return check_conclusion(taylor)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll people who eat salads regularly are very conscious about their health and eating habits.\nAll people who grew up in health-conscious childhood homes eat salads regularly.\nAll people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes.\nAll people who disregard their physical well-being are not very conscious about their health and eating habits.\nIf people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.\nTaylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither.\n</Premises>\n<Conclusion>\nTaylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "The summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. ",
        "conclusions": "The world championships is a sporting event.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Event:\n    def __init__(self, name: Optional[str] = None, is_sporting_event: Optional[bool] = None):\n        self.name = name\n        self.is_sporting_event = is_sporting_event\n\ndef apply_premises(event: Event) -> bool:\n    changed = False\n\n    # Premise 1: The summer Olympic games is a sporting event.\n    if event.name == \"The summer Olympic games\" and event.is_sporting_event is None:\n        event.is_sporting_event = True\n        changed = True\n\n    # Premise 2: The last summer Olympic games was in Tokyo.\n    # No update needed for this premise as it does not affect the sporting event status.\n\n    # Premise 3: The United States won the most medals in Tokyo.\n    # No update needed for this premise as it does not affect the sporting event status.\n\n    return changed\n\ndef run_inference(event: Event):\n    while apply_premises(event):\n        pass\n\ndef check_conclusion(event: Event) -> str:\n    run_inference(event)\n    # Conclusion: The world championships is a sporting event.\n    # If the name of the event is \"The world championships\" and is_sporting_event is None, then return \"Uncertain\".\n    if event.name == \"The world championships\" and event.is_sporting_event is None:\n        return \"Uncertain\"\n    else:\n        # If the name is not \"The world championships\", the conclusion is irrelevant.\n        # If \"The world championships\" is not the name, we return \"False\".\n        return \"False\"\n\ndef func():\n    event = Event(name=\"The world championships\")\n    return check_conclusion(event)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The world championships is a sporting event?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThe summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. \n</Premises>\n<Conclusion>\nThe world championships is a sporting event.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The world championships is a sporting event.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "The summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. ",
        "conclusions": "The last summer Olympic games were not in Tokyo.",
        "rationale": "```python\nfrom typing import Optional\n\nclass OlympicGames:\n    def __init__(self, location: Optional[str] = None):\n        self.location = location\n\ndef apply_premises(games: OlympicGames) -> bool:\n    changed = False\n\n    # Premise 2: The last summer Olympic games was in Tokyo.\n    if games.location is None:\n        games.location = \"Tokyo\"\n        changed = True\n\n    return changed\n\ndef run_inference(games: OlympicGames):\n    while apply_premises(games):\n        pass\n\ndef check_conclusion(games: OlympicGames) -> str:\n    run_inference(games)\n    # Conclusion: The last summer Olympic games were not in Tokyo.\n    if games.location == \"Tokyo\":\n        return \"False\"\n    else:\n        return \"True\"\n\ndef func():\n    games = OlympicGames()\n    return check_conclusion(games)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The last summer Olympic games were not in Tokyo?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThe summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. \n</Premises>\n<Conclusion>\nThe last summer Olympic games were not in Tokyo.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The last summer Olympic games were not in Tokyo.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "The summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. ",
        "conclusions": "The United States won the most medals in the last summer Olympic games.",
        "rationale": "from typing import Optional\n\nclass OlympicGames:\n    def __init__(self, location: Optional[str] = None, medal_winner: Optional[str] = None):\n        self.location = location\n        self.medal_winner = medal_winner\n\ndef apply_premises(olympic_games: OlympicGames) -> bool:\n    changed = False\n\n    # Premise 1: The last summer Olympic games was in Tokyo.\n    if olympic_games.location is None:\n        olympic_games.location = \"Tokyo\"\n        changed = True\n\n    # Premise 2: The United States won the most medals in Tokyo.\n    if olympic_games.location == \"Tokyo\" and olympic_games.medal_winner is None:\n        olympic_games.medal_winner = \"United States\"\n        changed = True\n\n    return changed\n\ndef run_inference(olympic_games: OlympicGames):\n    while apply_premises(olympic_games):\n        pass\n\ndef check_conclusion(olympic_games: OlympicGames) -> str:\n    run_inference(olympic_games)\n    if olympic_games.medal_winner == \"United States\":\n        return \"True\"\n    elif olympic_games.medal_winner is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    olympic_games = OlympicGames(location=None, medal_winner=None)\n    return check_conclusion(olympic_games)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The United States won the most medals in the last summer Olympic games?\", result)",
        "label": "True",
        "predict": "True",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThe summer Olympic games is a sporting event. \nThe last summer Olympic games was in Tokyo.\nThe United States won the most medals in Tokyo. \n</Premises>\n<Conclusion>\nThe United States won the most medals in the last summer Olympic games.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? The United States won the most medals in the last summer Olympic games.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "All horses have hooves.\nNo humans have hooves.",
        "conclusions": "Some humans are horses.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Entity:\n    def __init__(self, name: str):\n        self.name = name\n        self.has_hooves = None\n\nclass Human(Entity):\n    pass\n\nclass Horse(Entity):\n    pass\n\ndef apply_premises(human: Human, horse: Horse) -> bool:\n    changed = False\n\n    # Premise 1: All horses have hooves.\n    if horse.name is not None and horse.has_hooves is None:\n        horse.has_hooves = True\n        changed = True\n\n    # Premise 2: No humans have hooves.\n    if human.name is not None and human.has_hooves is None:\n        human.has_hooves = False\n        changed = True\n\n    return changed\n\ndef run_inference(human: Human, horse: Horse):\n    while apply_premises(human, horse):\n        pass\n\ndef check_conclusion(human: Human, horse: Horse) -> str:\n    run_inference(human, horse)\n    # Conclusion: Some humans are horses.\n    # If human.has_hooves is None and horse.has_hooves is None, then we cannot conclude anything.\n    if human.has_hooves is None or horse.has_hooves is None:\n        return \"Uncertain\"\n    # If no humans have hooves and no horses have hooves, then no humans can be horses.\n    if human.has_hooves is False and horse.has_hooves is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    human = Human(name=\"Some Human\")\n    horse = Horse(name=\"Some Horse\")\n    return check_conclusion(human, horse)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Some humans are horses?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAll horses have hooves.\nNo humans have hooves.\n</Premises>\n<Conclusion>\nSome humans are horses.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Some humans are horses.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Susan flies to LGA airport.\nThe departure and arrival can not be at the same airport.\nJohn flies from LGA airport.",
        "conclusions": "Susan flies from LGA airport.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Airport:\n    def __init__(self, name: str):\n        self.name = name\n        self.departure = None\n        self.arrival = None\n\nclass Person:\n    def __init__(self, name: str, flies_to: Optional[Airport] = None, flies_from: Optional[Airport] = None):\n        self.name = name\n        self.flies_to = flies_to\n        self.flies_from = flies_from\n\ndef apply_premises(person: Person, airport_lga: Airport) -> bool:\n    changed = False\n\n    # Premise 1: Susan flies to LGA airport.\n    if person.name == \"Susan\":\n        if person.flies_to is None:\n            person.flies_to = airport_lga\n            changed = True\n\n    # Premise 2: The departure and arrival can not be at the same airport.\n    if person.flies_to == airport_lga:\n        if person.flies_from is None:\n            person.flies_from = airport_lga\n            changed = True\n        else:\n            # This should not happen as per the premise\n            raise ValueError(\"Person cannot have departure and arrival at the same airport.\")\n\n    # Premise 3: John flies from LGA airport.\n    if person.name == \"John\":\n        if person.flies_from is None:\n            person.flies_from = airport_lga\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person, airport_lga: Airport):\n    while apply_premises(person, airport_lga):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person, airport_lga)\n    if person.name == \"Susan\" and person.flies_from == airport_lga:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    airport_lga = Airport(\"LGA\")\n    person = Person(name=\"Susan\", flies_to=airport_lga)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Susan flies from LGA airport?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSusan flies to LGA airport.\nThe departure and arrival can not be at the same airport.\nJohn flies from LGA airport.\n</Premises>\n<Conclusion>\nSusan flies from LGA airport.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Susan flies from LGA airport.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Susan flies to LGA airport.\nThe departure and arrival can not be at the same airport.\nJohn flies from LGA airport.",
        "conclusions": "John flies to LGA airport.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Airport:\n    def __init__(self, name: str):\n        self.name = name\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 flies_from: Optional[Airport] = None,\n                 flies_to: Optional[Airport] = None):\n        self.name = name\n        self.flies_from = flies_from\n        self.flies_to = flies_to\n\ndef apply_premises(person: Person, lga: Airport) -> bool:\n    changed = False\n\n    # Premise 1: Susan flies to LGA airport.\n    # This premise is not directly relevant to John, so we do not change any state here.\n\n    # Premise 2: The departure and arrival can not be at the same airport.\n    if person.flies_from is not None and person.flies_to is not None and person.flies_from.name == person.flies_to.name:\n        person.flies_to = None\n        changed = True\n\n    # Premise 3: John flies from LGA airport.\n    if person.name == \"John\" and person.flies_from is None and person.flies_from.name == \"LGA\":\n        person.flies_from = lga\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person, lga: Airport):\n    while apply_premises(person, lga):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person, Airport(\"LGA\"))\n    if person.name == \"John\" and person.flies_to is not None and person.flies_to.name == \"LGA\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(name=\"John\")\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: John flies to LGA airport?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSusan flies to LGA airport.\nThe departure and arrival can not be at the same airport.\nJohn flies from LGA airport.\n</Premises>\n<Conclusion>\nJohn flies to LGA airport.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? John flies to LGA airport.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.",
        "conclusions": "Tom is a grumpy person.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, is_nice_to_animals: Optional[bool] = None, is_mean_to_animals: Optional[bool] = None, is_grumpy: Optional[bool] = None, is_animal_lover: Optional[bool] = None, is_pet_owner: Optional[bool] = None):\n        self.is_nice_to_animals = is_nice_to_animals\n        self.is_mean_to_animals = is_mean_to_animals\n        self.is_grumpy = is_grumpy\n        self.is_animal_lover = is_animal_lover\n        self.is_pet_owner = is_pet_owner\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: No one nice to animals is also mean to animals.\n    if person.is_nice_to_animals is True and person.is_mean_to_animals is not False:\n        person.is_mean_to_animals = False\n        changed = True\n\n    # Premise 2: Some grumpy people are mean to animals.\n    if person.is_grumpy is True and person.is_mean_to_animals is not True:\n        person.is_mean_to_animals = True\n        changed = True\n\n    # Premise 3: All animal lovers are nice to animals.\n    if person.is_animal_lover is True and person.is_nice_to_animals is not True:\n        person.is_nice_to_animals = True\n        changed = True\n\n    # Premise 4: All pet owners love animals.\n    if person.is_pet_owner is True and person.is_animal_lover is not True:\n        person.is_animal_lover = True\n        changed = True\n\n    # Premise 5: Tom is a pet owner.\n    if person.name == \"Tom\" and person.is_pet_owner is None:\n        person.is_pet_owner = True\n        changed = True\n\n    # Update animal lover status for Tom\n    if person.name == \"Tom\" and person.is_animal_lover is None:\n        person.is_animal_lover = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Tom\" and person.is_grumpy is True:\n        return \"True\"\n    elif person.name == \"Tom\" and person.is_grumpy is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(name=\"Tom\",\n                    is_nice_to_animals=None,\n                    is_mean_to_animals=None,\n                    is_grumpy=None,\n                    is_animal_lover=None,\n                    is_pet_owner=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is a grumpy person?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.\n</Premises>\n<Conclusion>\nTom is a grumpy person.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Tom is a grumpy person.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.",
        "conclusions": "Tom is not both a grumpy person and mean to animals.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_grumpy: Optional[bool] = None, is_mean_to_animals: Optional[bool] = None, is_nice_to_animals: Optional[bool] = None, is_animal_lover: Optional[bool] = None, is_pet_owner: Optional[bool] = None):\n        self.name = name\n        self.is_grumpy = is_grumpy\n        self.is_mean_to_animals = is_mean_to_animals\n        self.is_nice_to_animals = is_nice_to_animals\n        self.is_animal_lover = is_animal_lover\n        self.is_pet_owner = is_pet_owner\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: No one nice to animals is also mean to animals.\n    if person.is_nice_to_animals is True and person.is_mean_to_animals is not False:\n        person.is_mean_to_animals = False\n        changed = True\n\n    # Premise 2: Some grumpy people are mean to animals.\n    if person.is_grumpy is True and person.is_mean_to_animals is None:\n        person.is_mean_to_animals = True\n        changed = True\n\n    # Premise 3: All animal lovers are nice to animals.\n    if person.is_animal_lover is True and person.is_nice_to_animals is not True:\n        person.is_nice_to_animals = True\n        changed = True\n\n    # Premise 4: All pet owners love animals.\n    if person.is_pet_owner is True and person.is_animal_lover is not True:\n        person.is_animal_lover = True\n        changed = True\n\n    # Premise 5: Tom is a pet owner.\n    if person.name == \"Tom\":\n        if person.is_pet_owner is None:\n            person.is_pet_owner = True\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Tom is not both a grumpy person and mean to animals.\n    if person.is_grumpy is not None and person.is_mean_to_animals is not None:\n        if person.is_grumpy and person.is_mean_to_animals:\n            return \"False\"\n        else:\n            return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        name=\"Tom\",\n        is_grumpy=None,\n        is_mean_to_animals=None,\n        is_nice_to_animals=None,\n        is_animal_lover=None,\n        is_pet_owner=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Tom is not both a grumpy person and mean to animals?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.\n</Premises>\n<Conclusion>\nTom is not both a grumpy person and mean to animals.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Tom is not both a grumpy person and mean to animals.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "No one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.",
        "conclusions": "If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_grumpy: Optional[bool] = None,\n                 is_mean_to_animals: Optional[bool] = None,\n                 is_animal_lover: Optional[bool] = None):\n        self.is_grumpy = is_grumpy\n        self.is_mean_to_animals = is_mean_to_animals\n        self.is_animal_lover = is_animal_lover\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: No one nice to animals is also mean to animals.\n    # This means if someone is not mean to animals, they cannot be nice to animals.\n    if person.is_mean_to_animals is not True and person.is_grumpy is not True:\n        person.is_grumpy = False\n        changed = True\n\n    # Premise 2: Some grumpy people are mean to animals.\n    # This means there is at least one grumpy person who is mean to animals.\n    if person.is_grumpy is True and person.is_mean_to_animals is not True:\n        person.is_mean_to_animals = True\n        changed = True\n\n    # Premise 3: All animal lovers are nice to animals.\n    if person.is_animal_lover is True and person.is_grumpy is not True:\n        person.is_grumpy = False\n        changed = True\n\n    # Premise 4: All pet owners love animals.\n    if person.is_grumpy is None and person.is_animal_lover is None and person.is_mean_to_animals is None:\n        person.is_animal_lover = True\n        person.is_grumpy = False\n        person.is_mean_to_animals = False\n        changed = True\n\n    # Premise 5: Tom is a pet owner.\n    if person.name == \"Tom\":\n        if person.is_grumpy is None:\n            person.is_grumpy = False\n            changed = True\n        if person.is_animal_lover is None:\n            person.is_animal_lover = True\n            changed = True\n        if person.is_mean_to_animals is None:\n            person.is_mean_to_animals = False\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name != \"Tom\":\n        return \"Uncertain\"\n    if not (person.is_grumpy and person.is_mean_to_animals):\n        if person.is_grumpy is False and person.is_animal_lover is False:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(name=\"Tom\",\n                    is_grumpy=None,\n                    is_mean_to_animals=None,\n                    is_animal_lover=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nNo one nice to animals is also mean to animals.\nSome grumpy people are mean to animals.\nAll animal lovers are nice to animals.\nAll pet owners love animals.\nTom is a pet owner.\n</Premises>\n<Conclusion>\nIf Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "A podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.",
        "conclusions": "Dani Shapiro is a novel writer.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, nationality: Optional[str] = None, is_novel_writer: Optional[bool] = None):\n        self.name = name\n        self.nationality = nationality\n        self.is_novel_writer = is_novel_writer\n\nclass Book:\n    def __init__(self, title: str, author: str, year: int, is_novel: Optional[bool] = None):\n        self.title = title\n        self.author = author\n        self.year = year\n        self.is_novel = is_novel\n\nclass Podcast:\n    def __init__(self, title: str, creator: str):\n        self.title = title\n        self.creator = creator\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: A podcast is not a novel.\n    # No changes to be made here as it's a static statement.\n\n    # Premise 2: If a person is born in American City, the person is American.\n    # No person is given as born in an American city, so no changes.\n\n    # Premise 3: If a book is a novel and it is written by a person, then the person is a novel writer.\n    # Check if Family History is a novel and written by Dani Shapiro.\n    family_history = Book(title=\"Family History\", author=\"Dani Shapiro\", year=2003, is_novel=True)\n    if family_history.is_novel is True and family_history.author == \"Dani Shapiro\" and family_history.author is not None:\n        shapiro = Person(name=\"Dani Shapiro\", is_novel_writer=None)\n        shapiro.is_novel_writer = True\n        changed = True\n\n    # Premise 4: Dani Shapiro is an American writer.\n    shapiro = Person(name=\"Dani Shapiro\", is_novel_writer=None)\n    if shapiro.name == \"Dani Shapiro\" and shapiro.is_novel_writer is None:\n        shapiro.is_novel_writer = False\n        changed = True\n\n    # Premise 5: Family History is written by Dani Shapiro.\n    # This is already covered in Premise 3.\n\n    # Premise 6: Family History is a novel written in 2003.\n    # This is already covered in Premise 3.\n\n    # Premise 7: Dani Shapiro created a podcast called Family Secrets.\n    # No changes to be made here as it's a static statement.\n\n    # Premise 8: Boston is an American city.\n    # No changes to be made here as it's a static statement.\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    shapiro = Person(name=\"Dani Shapiro\", is_novel_writer=None)\n    if shapiro.is_novel_writer is True:\n        return \"True\"\n    elif shapiro.is_novel_writer is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dani Shapiro is a novel writer?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nA podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.\n</Premises>\n<Conclusion>\nDani Shapiro is a novel writer.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Dani Shapiro is a novel writer.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "A podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.",
        "conclusions": "Family Secrets is a novel.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, nationality: Optional[str] = None, profession: Optional[str] = None):\n        self.name = name\n        self.nationality = nationality\n        self.profession = profession\n\nclass City:\n    def __init__(self, name: str, country: str):\n        self.name = name\n        self.country = country\n\nclass Book:\n    def __init__(self, title: str, author: str, year: int, genre: Optional[str] = None):\n        self.title = title\n        self.author = author\n        self.year = year\n        self.genre = genre\n\nclass Podcast:\n    def __init__(self, title: str, creator: str):\n        self.title = title\n        self.creator = creator\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 2: If a person is born in American City, the person is American.\n    # No updates needed for nationality as Dani Shapiro's nationality is given directly.\n\n    # Premise 3: If a book is a novel and it is written by a person, then the person is a novel writer.\n    # No updates needed for profession as Dani Shapiro's profession is given directly.\n\n    # Premise 4: Dani Shapiro is an American writer.\n    if \"Dani Shapiro\" not in vars():\n        dani_shapiro = Person(name=\"Dani Shapiro\", nationality=\"American\", profession=\"Writer\")\n    else:\n        dani_shapiro = vars()[\"Dani Shapiro\"]\n        if dani_shapiro.nationality != \"American\":\n            dani_shapiro.nationality = \"American\"\n            changed = True\n        if dani_shapiro.profession != \"Writer\":\n            dani_shapiro.profession = \"Writer\"\n            changed = True\n\n    # Premise 5: Family History is written by Dani Shapiro.\n    if \"Family History\" not in vars():\n        family_history = Book(title=\"Family History\", author=\"Dani Shapiro\", year=2003)\n    else:\n        family_history = vars()[\"Family History\"]\n        if family_history.author != \"Dani Shapiro\":\n            family_history.author = \"Dani Shapiro\"\n            changed = True\n\n    # Premise 6: Family History is a novel written in 2003.\n    if family_history.year != 2003:\n        family_history.year = 2003\n        changed = True\n    if family_history.genre is None:\n        family_history.genre = \"novel\"\n        changed = True\n\n    # Premise 7: Dani Shapiro created a podcast called Family Secrets.\n    if \"Family Secrets\" not in vars():\n        family_secrets = Podcast(title=\"Family Secrets\", creator=\"Dani Shapiro\")\n    else:\n        family_secrets = vars()[\"Family Secrets\"]\n        if family_secrets.creator != \"Dani Shapiro\":\n            family_secrets.creator = \"Dani Shapiro\"\n            changed = True\n\n    return changed\n\ndef run_inference():\n    while apply_premises():\n        pass\n\ndef check_conclusion() -> str:\n    run_inference()\n    family_secrets = vars().get(\"Family Secrets\")\n    family_history = vars().get(\"Family History\")\n    if family_secrets is None or family_history is None:\n        return \"Uncertain\"\n    if family_secrets.title == \"Family Secrets\" and family_history.title == \"Family History\" and family_history.genre == \"novel\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Family Secrets is a novel?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nA podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.\n</Premises>\n<Conclusion>\nFamily Secrets is a novel.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Family Secrets is a novel.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "A podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.",
        "conclusions": "Dani Shapiro was born in Boston.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, name: str, is_american: Optional[bool] = None, city_of_birth: Optional[str] = None):\n        self.name = name\n        self.is_american = is_american\n        self.city_of_birth = city_of_birth\n\nclass Podcast:\n    def __init__(self, name: str, creator: str):\n        self.name = name\n        self.creator = creator\n\nclass Book:\n    def __init__(self, title: str, author: str, year: int, is_novel: Optional[bool] = None):\n        self.title = title\n        self.author = author\n        self.year = year\n        self.is_novel = is_novel\n\nclass City:\n    def __init__(self, name: str, is_american: Optional[bool] = None):\n        self.name = name\n        self.is_american = is_american\n\ndef apply_premises(person: Person, podcast: Podcast, book: Book, american_city: City):\n    changed = False\n\n    # Premise 2: If a person is born in American City, the person is American.\n    if person.city_of_birth == \"American City\" and person.is_american is None:\n        person.is_american = True\n        changed = True\n\n    # Premise 1: A podcast is not a novel.\n    if podcast.name == \"Family Secrets\" and podcast.name != \"Family History\":\n        podcast.name = \"Family Secrets\"\n        changed = True\n\n    # Premise 3: If a book is a novel and it is written by a person, then the person is a novel writer.\n    if book.title == \"Family History\" and book.is_novel is True and book.author == \"Dani Shapiro\":\n        book.author = \"Dani Shapiro\"\n        changed = True\n\n    # Premise 4: Dani Shapiro is an American writer.\n    if person.name == \"Dani Shapiro\" and person.is_american is None:\n        person.is_american = True\n        changed = True\n\n    # Premise 5: Family History is written by Dani Shapiro.\n    if book.title == \"Family History\" and book.author is None:\n        book.author = \"Dani Shapiro\"\n        changed = True\n\n    # Premise 6: Family History is a novel written in 2003.\n    if book.title == \"Family History\" and book.is_novel is None:\n        book.is_novel = True\n        changed = True\n\n    # Premise 7: Dani Shapiro created a podcast called Family Secrets.\n    if podcast.name == \"Family Secrets\" and podcast.creator is None:\n        podcast.creator = \"Dani Shapiro\"\n        changed = True\n\n    # Premise 8: Boston is an American city.\n    if american_city.name == \"Boston\" and american_city.is_american is None:\n        american_city.is_american = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person, podcast: Podcast, book: Book, american_city: City):\n    while apply_premises(person, podcast, book, american_city):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person, podcast, book, american_city)\n    if person.city_of_birth == \"Boston\":\n        return \"True\"\n    elif person.city_of_birth is None:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(name=\"Dani Shapiro\", is_american=None, city_of_birth=None)\n    podcast = Podcast(name=None, creator=None)\n    book = Book(title=\"Family History\", author=None, year=2003, is_novel=None)\n    american_city = City(name=\"Boston\", is_american=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Dani Shapiro was born in Boston?\", result)",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nA podcast is not a novel.\nIf a person is born in American City, the person is American.\nIf a book is a novel and it is written by a person, then the person is a novel writer.\nDani Shapiro is an American writer.\nFamily History is written by Dani Shapiro.\nFamily History is a novel written in 2003.\nDani Shapiro created a podcast called Family Secrets.\nBoston is an American city.\n</Premises>\n<Conclusion>\nDani Shapiro was born in Boston.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Dani Shapiro was born in Boston.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "Yuri is an American national.",
        "rationale": "from typing import Optional\n\nclass Person:\n    def __init__(self, is_american: Optional[bool] = None, activates_leg_muscles: Optional[bool] = None):\n        self.is_american = is_american\n        self.activates_leg_muscles = activates_leg_muscles\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    # This does not affect Yuri's nationality directly, so no update is needed.\n\n    # Premise 2: All professional basketball players can do jump shots.\n    # This is a universal statement and does not change the state of person directly.\n\n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    # This is a conditional statement and does not change the state of person directly.\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    # This is another conditional statement and does not change the state of person directly.\n\n    # Premise 5: Yuri does not activate his leg muscles.\n    if person.activates_leg_muscles is None:\n        person.activates_leg_muscles = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: Yuri is an American national.\n    # If Yuri does not activate his leg muscles, the premises do not provide enough information to conclude his nationality.\n    if person.activates_leg_muscles is False:\n        return \"Uncertain\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(is_american=None, activates_leg_muscles=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Yuri is an American national?\", result)",
        "label": "Uncertain",
        "predict": "Uncertain",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</Premises>\n<Conclusion>\nYuri is an American national.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Yuri is an American national.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "Yuri is not an American professional basketball player.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, is_american: Optional[bool] = None, can_jump_shots: Optional[bool] = None, activates_legs: Optional[bool] = None):\n        self.is_american = is_american\n        self.can_jump_shots = can_jump_shots\n        self.activates_legs = activates_legs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    # This premise does not directly affect the state of the person object.\n    \n    # Premise 2: All professional basketball players can do jump shots.\n    if person.can_jump_shots is None and person.is_american is not False:\n        person.can_jump_shots = True\n        changed = True\n\n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    if person.can_jump_shots is True and person.activates_legs is not True:\n        person.activates_legs = True\n        changed = True\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    if person.activates_legs is True and person.can_jump_shots is not True:\n        person.can_jump_shots = True\n        changed = True\n\n    # Premise 5: Yuri does not activate his leg muscles.\n    if person.name == \"Yuri\" and person.activates_legs is True:\n        person.activates_legs = False\n        changed = True\n        # If Yuri does not activate his leg muscles, he cannot jump shots.\n        if person.can_jump_shots is True:\n            person.can_jump_shots = False\n            changed = True\n        # If Yuri cannot jump shots, he is not a professional basketball player.\n        if person.can_jump_shots is False:\n            person.is_american = False\n            changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.is_american is False:\n        return \"True\"\n    elif person.is_american is True:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(\n        is_american=None,\n        can_jump_shots=None,\n        activates_legs=None,\n        name=\"Yuri\"\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Yuri is not an American professional basketball player?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</Premises>\n<Conclusion>\nYuri is not an American professional basketball player.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Yuri is not an American professional basketball player.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "Yuri is an American professional basketball player.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_american: Optional[bool] = None,\n                 is_basketball_player: Optional[bool] = None,\n                 activates_leg_muscles: Optional[bool] = None):\n        self.is_american = is_american\n        self.is_basketball_player = is_basketball_player\n        self.activates_leg_muscles = activates_leg_muscles\n\nclass ProfessionalBasketballPlayer(Person):\n    def __init__(self,\n                 is_american: Optional[bool] = None,\n                 is_basketball_player: Optional[bool] = True,\n                 activates_leg_muscles: Optional[bool] = None):\n        super().__init__(is_american, is_basketball_player, activates_leg_muscles)\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    if person.is_basketball_player is True:\n        if person.is_american is None:\n            person.is_american = False\n            changed = True\n\n    # Premise 2: All professional basketball players can do jump shots.\n    # This is already implied by the class definition of ProfessionalBasketballPlayer.\n\n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    # This is implied by the class definition and does not require explicit handling.\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    # This is implied by the class definition and does not require explicit handling.\n\n    # Premise 5: Yuri does not activate his leg muscles.\n    if person.name == \"Yuri\" and person.activates_leg_muscles is None:\n        person.activates_leg_muscles = False\n        changed = True\n\n    # Check if the person is a professional basketball player and does not activate leg muscles.\n    if person.is_basketball_player is True and person.activates_leg_muscles is False:\n        person.is_american = True\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Yuri\":\n        if person.is_american is True:\n            return \"True\"\n        elif person.is_american is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions: Yuri is a professional basketball player.\n    yuri = ProfessionalBasketballPlayer(name=\"Yuri\")\n    return check_conclusion(yuri)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Yuri is an American professional basketball player?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</Premises>\n<Conclusion>\nYuri is an American professional basketball player.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Yuri is an American professional basketball player.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Player:\n    def __init__(self, is_american: Optional[bool] = None):\n        self.is_american = is_american\n\nclass Ability:\n    def __init__(self, can_jump_shots: Optional[bool] = None, leaps_straight: Optional[bool] = None):\n        self.can_jump_shots = can_jump_shots\n        self.leaps_straight = leaps_straight\n\ndef apply_premises(player: Player, ability: Ability) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    # No direct update here, just ensuring player can be non-American.\n    \n    # Premise 2: All professional basketball players can do jump shots.\n    if ability.can_jump_shots is None:\n        ability.can_jump_shots = True\n        changed = True\n    \n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    if ability.can_jump_shots is True and ability.leaps_straight is not True:\n        ability.leaps_straight = True\n        changed = True\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    if ability.leaps_straight is True and ability.leaps_straight is True:\n        pass  # No change needed here as leaps_straight is already True.\n    \n    # Premise 5: Yuri does not activate his leg muscles.\n    if ability.leaps_straight is True and player.is_american is not None:\n        if player.is_american is True:\n            player.is_american = False\n            changed = True\n        elif player.is_american is False:\n            player.is_american = True\n            changed = True\n    \n    return changed\n\ndef run_inference(player: Player, ability: Ability):\n    while apply_premises(player, ability):\n        pass\n\ndef check_conclusion(player: Player, ability: Ability) -> str:\n    run_inference(player, ability)\n    if ability.leaps_straight is False:\n        if player.is_american is None:\n            return \"Uncertain\"\n        else:\n            return \"True\" if player.is_american else \"False\"\n    else:\n        return \"True\"  # If Yuri leaps straight into the air, the conclusion is vacuously true.\n\ndef func():\n    # Initial conditions: Yuri is a professional basketball player.\n    player = Player(is_american=None)\n    ability = Ability(can_jump_shots=None, leaps_straight=None)\n    return check_conclusion(player, ability)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Yuri does not leap straight into the air, then Yuri is an American professional basketball player?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</Premises>\n<Conclusion>\nIf Yuri does not leap straight into the air, then Yuri is an American professional basketball player.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Yuri does not leap straight into the air, then Yuri is an American professional basketball player.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Some professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.",
        "conclusions": "If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self,\n                 is_american: Optional[bool] = None,\n                 is_professional_basketball_player: Optional[bool] = None,\n                 activates_leg_muscles: Optional[bool] = None):\n        self.is_american = is_american\n        self.is_professional_basketball_player = is_professional_basketball_player\n        self.activates_leg_muscles = activates_leg_muscles\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Some professional basketball players are not American nationals.\n    # This premise does not directly affect the state of the person, so we skip it for inference.\n    \n    # Premise 2: All professional basketball players can do jump shots.\n    if person.is_professional_basketball_player is True and person.can_do_jump_shots is not True:\n        person.can_do_jump_shots = True\n        changed = True\n\n    # Premise 3: If someone can jump shots, they leap straight into the air.\n    if person.can_do_jump_shots is True and person.leaps_straight_into_air is not True:\n        person.leaps_straight_into_air = True\n        changed = True\n\n    # Premise 4: If someone leaps straight into the air, they activate their leg muscles.\n    if person.leaps_straight_into_air is True and person.activates_leg_muscles is not True:\n        person.activates_leg_muscles = True\n        changed = True\n\n    # Premise 5: Yuri does not activate his leg muscles.\n    if person.name == \"Yuri\" and person.activates_leg_muscles is True:\n        person.activates_leg_muscles = False\n        changed = True\n    elif person.name == \"Yuri\" and person.activates_leg_muscles is not False:\n        person.activates_leg_muscles = False\n        changed = True\n\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.name == \"Yuri\" and person.is_professional_basketball_player is None and person.is_american is None:\n        return \"Uncertain\"\n    if person.name == \"Yuri\" and not person.is_american and person.is_professional_basketball_player:\n        return \"True\"\n    elif person.name == \"Yuri\" and not person.is_american and not person.is_professional_basketball_player:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    yuri = Person(\n        name=\"Yuri\",\n        is_american=None,\n        is_professional_basketball_player=None,\n        activates_leg_muscles=None\n    )\n    return check_conclusion(yuri)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Yuri is not an American professional basketball player, then Yuri is a professional basketball player?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nSome professional basketball players are not American nationals.\nAll professional basketball players can do jump shots.\nIf someone can jump shots, they leap straight into the air.\nIf someone leaps straight into the air, they activate their leg muscles. \nYuri does not activate his leg muscles.\n</Premises>\n<Conclusion>\nIf Yuri is not an American professional basketball player, then Yuri is a professional basketball player.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? If Yuri is not an American professional basketball player, then Yuri is a professional basketball player.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Events are either happy or sad.\nAt least one event is happy. ",
        "conclusions": "All events are sad.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Event:\n    def __init__(self, is_happy: Optional[bool] = None, is_sad: Optional[bool] = None):\n        self.is_happy = is_happy\n        self.is_sad = is_sad\n\ndef apply_premises(events: list[Event]) -> bool:\n    changed = False\n    happy_count = 0\n\n    for event in events:\n        if event.is_happy is None:\n            event.is_happy = False\n            changed = True\n        if event.is_sad is None:\n            event.is_sad = False\n            changed = True\n\n    # Premise 2: At least one event is happy.\n    for event in events:\n        if event.is_happy is None:\n            event.is_happy = True\n            happy_count += 1\n            changed = True\n        if happy_count > 0:\n            break\n\n    return changed\n\ndef run_inference(events: list[Event]):\n    while apply_premises(events):\n        pass\n\ndef check_conclusion(events: list[Event]) -> str:\n    run_inference(events)\n    for event in events:\n        if event.is_happy is True:\n            return \"False\"\n    return \"True\"\n\ndef func():\n    events = [Event() for _ in range(10)]  # Assume there are 10 events for simplicity\n    return check_conclusion(events)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: All events are sad?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nEvents are either happy or sad.\nAt least one event is happy. \n</Premises>\n<Conclusion>\nAll events are sad.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? All events are sad.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "The winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nOne six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
        "conclusions": "Steinhauer was not the winner of the 1992 du Maurier Classic.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Player:\n    def __init__(self, name: str, from_belgium: Optional[bool] = None, participated: Optional[bool] = None, leaderboard: Optional[bool] = None, winner: Optional[bool] = None):\n        self.name = name\n        self.from_belgium = from_belgium\n        self.participated = participated\n        self.leaderboard = leaderboard\n        self.winner = winner\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: The winner of the 1992 du Maurier Classic was Steinhauer.\n    if player.name == \"Steinhauer\":\n        if player.winner is None:\n            player.winner = True\n            changed = True\n\n    # Premise 2: Steinhauer participated in the 1992 du Maurier Classic.\n    if player.name == \"Steinhauer\":\n        if player.participated is None:\n            player.participated = True\n            changed = True\n\n    # Premise 3: One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\n    # We need to introduce a new player for the six-way tie.\n    six_way_tie_player = Player(name=\"SixWayTiePlayer\", from_belgium=True, participated=True, leaderboard=True)\n    if six_way_tie_player.from_belgium and six_way_tie_player.leaderboard:\n        changed = True\n\n    # Premise 4: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n    if player.name == \"Descampe\":\n        if player.from_belgium is None:\n            player.from_belgium = True\n            changed = True\n        if player.leaderboard is None:\n            player.leaderboard = True\n            changed = True\n\n    # Premise 5: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n    if player.leaderboard and player.participated is None:\n        player.participated = True\n        changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.winner is True:\n        return \"False\"\n    elif player.winner is False:\n        return \"True\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(name=\"Steinhauer\", from_belgium=None, participated=None, leaderboard=None, winner=None)\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Steinhauer was not the winner of the 1992 du Maurier Classic?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nOne six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n</Premises>\n<Conclusion>\nSteinhauer was not the winner of the 1992 du Maurier Classic.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Steinhauer was not the winner of the 1992 du Maurier Classic.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "The winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nOne six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.",
        "conclusions": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Player:\n    def __init__(self, name: str, is_winner: Optional[bool] = None, is_from_belgium: Optional[bool] = None, is_on_leaderboard: Optional[bool] = None, participated: Optional[bool] = None):\n        self.name = name\n        self.is_winner = is_winner\n        self.is_from_belgium = is_from_belgium\n        self.is_on_leaderboard = is_on_leaderboard\n        self.participated = participated\n\ndef apply_premises(player: Player) -> bool:\n    changed = False\n\n    # Premise 1: The winner of the 1992 du Maurier Classic was Steinhauer.\n    if player.name == \"Steinhauer\":\n        if player.is_winner is None:\n            player.is_winner = True\n            changed = True\n\n    # Premise 2: Steinhauer participated in the 1992 du Maurier Classic.\n    if player.name == \"Steinhauer\":\n        if player.participated is None:\n            player.participated = True\n            changed = True\n\n    # Premise 3: One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\n    if player.is_winner is not True:\n        if player.is_from_belgium is None:\n            player.is_from_belgium = True\n            changed = True\n        if player.is_on_leaderboard is None:\n            player.is_on_leaderboard = True\n            changed = True\n\n    # Premise 4: Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\n    if player.name == \"Descampe\":\n        if player.is_from_belgium is None:\n            player.is_from_belgium = True\n            changed = True\n        if player.is_on_leaderboard is None:\n            player.is_on_leaderboard = True\n            changed = True\n\n    # Premise 5: All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n    if player.is_on_leaderboard is True and player.participated is None:\n        player.participated = True\n        changed = True\n\n    return changed\n\ndef run_inference(player: Player):\n    while apply_premises(player):\n        pass\n\ndef check_conclusion(player: Player) -> str:\n    run_inference(player)\n    if player.name == \"Descampe\":\n        if player.is_on_leaderboard is True and player.is_from_belgium is True:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    player = Player(\n        name=\"Descampe\",\n        is_winner=None,\n        is_from_belgium=None,\n        is_on_leaderboard=None,\n        participated=None\n    )\n    return check_conclusion(player)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nThe winner of the 1992 du Maurier Classic was Steinhauer.\nSteinhauer participated in the 1992 du Maurier Classic.\nOne six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium.\nDescampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.\nAll people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.\n</Premises>\n<Conclusion>\nDescampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Jane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
        "conclusions": "KiKi is terricolous.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 is_dog: Optional[bool] = None,\n                 barks: Optional[bool] = None,\n                 jumps: Optional[bool] = None,\n                 has_legs: Optional[bool] = None,\n                 is_terricolous: Optional[bool] = None):\n        self.is_dog = is_dog\n        self.barks = barks\n        self.jumps = jumps\n        self.has_legs = has_legs\n        self.is_terricolous = is_terricolous\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Jane does not like any animals that bark.\n    # Premise 2: All dogs are animals that bark.\n    if animal.is_dog is True:\n        if animal.barks is None:\n            animal.barks = True\n            changed = True\n\n    # Premise 3: Jane likes all animals that jump.\n    if animal.jumps is None and animal.barks is None:\n        animal.jumps = True\n        changed = True\n\n    # Premise 4: If an animal has legs, then it jumps.\n    if animal.has_legs is True and animal.jumps is None:\n        animal.jumps = True\n        changed = True\n\n    # Premise 5: If an animal is terricolous, then it has legs.\n    if animal.is_terricolous is True and animal.has_legs is None:\n        animal.has_legs = True\n        changed = True\n\n    # Premise 6: KiKi is an animal.\n    if animal.name == \"KiKi\":\n        if animal.is_dog is None:\n            animal.is_dog = False\n            changed = True\n        if animal.barks is None:\n            animal.barks = False\n            changed = True\n        if animal.jumps is None:\n            animal.jumps = None\n            changed = True\n        if animal.has_legs is None:\n            animal.has_legs = None\n            changed = True\n        if animal.is_terricolous is None:\n            animal.is_terricolous = None\n            changed = True\n\n    # Premise 7: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n    if animal.name == \"KiKi\" and animal.jumps is False and animal.has_legs is False:\n        animal.is_terricolous = True\n        animal.has_legs = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    if animal.name == \"KiKi\":\n        if animal.is_terricolous is True:\n            return \"True\"\n        elif animal.is_terricolous is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    animal = Animal(\n        is_dog=None,\n        barks=None,\n        jumps=None,\n        has_legs=None,\n        is_terricolous=None\n    )\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KiKi is terricolous?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nJane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n</Premises>\n<Conclusion>\nKiKi is terricolous.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? KiKi is terricolous.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Jane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
        "conclusions": "KiKi is a barking dog.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 is_barking: Optional[bool] = None,\n                 is_dog: Optional[bool] = None,\n                 can_jump: Optional[bool] = None,\n                 has_legs: Optional[bool] = None,\n                 is_terricolous: Optional[bool] = None):\n        self.is_barking = is_barking\n        self.is_dog = is_dog\n        self.can_jump = can_jump\n        self.has_legs = has_legs\n        self.is_terricolous = is_terricolous\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Jane does not like any animals that bark.\n    if animal.is_barking is None:\n        animal.is_barking = False\n        changed = True\n\n    # Premise 2: All dogs are animals that bark.\n    if animal.is_dog is True and animal.is_barking is not True:\n        animal.is_barking = True\n        changed = True\n\n    # Premise 3: Jane likes all animals that jump.\n    if animal.can_jump is True and animal.is_barking is None:\n        animal.is_barking = True\n        changed = True\n\n    # Premise 4: If an animal has legs, then it jumps.\n    if animal.has_legs is True and animal.can_jump is not True:\n        animal.can_jump = True\n        changed = True\n\n    # Premise 5: If an animal is terricolous, then it has legs.\n    if animal.is_terricolous is True and animal.has_legs is not True:\n        animal.has_legs = True\n        changed = True\n\n    # Premise 6: KiKi is an animal.\n    if animal.name == \"KiKi\" and (animal.is_barking is None or animal.is_dog is None):\n        animal.is_barking = False\n        animal.is_dog = False\n        animal.can_jump = False\n        animal.has_legs = False\n        animal.is_terricolous = False\n        changed = True\n\n    # Premise 7: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n    if (animal.can_jump is False and animal.has_legs is False) and (animal.is_terricolous is None or animal.has_legs is None):\n        animal.is_terricolous = True\n        animal.has_legs = True\n        changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    if animal.is_barking is True and animal.is_dog is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    animal = Animal(name=\"KiKi\")\n    return check_conclusion(animal)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KiKi is a barking dog?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nJane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n</Premises>\n<Conclusion>\nKiKi is a barking dog.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? KiKi is a barking dog.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Jane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.",
        "conclusions": "KiKi does not bark and he is not a dog.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Animal:\n    def __init__(self,\n                 name: Optional[str] = None,\n                 barks: Optional[bool] = None,\n                 jumps: Optional[bool] = None,\n                 has_legs: Optional[bool] = None,\n                 is_terricolous: Optional[bool] = None,\n                 is_dog: Optional[bool] = None):\n        self.name = name\n        self.barks = barks\n        self.jumps = jumps\n        self.has_legs = has_legs\n        self.is_terricolous = is_terricolous\n        self.is_dog = is_dog\n\ndef apply_premises(animal: Animal) -> bool:\n    changed = False\n\n    # Premise 1: Jane does not like any animals that bark.\n    # Premise 2: All dogs are animals that bark.\n    if animal.is_dog is True:\n        if animal.barks is None:\n            animal.barks = True\n            changed = True\n\n    # Premise 3: Jane likes all animals that jump.\n    # Premise 4: If an animal has legs, then it jumps.\n    if animal.has_legs is True:\n        if animal.jumps is None:\n            animal.jumps = True\n            changed = True\n\n    # Premise 5: If an animal is terricolous, then it has legs.\n    if animal.is_terricolous is True:\n        if animal.has_legs is None:\n            animal.has_legs = True\n            changed = True\n\n    # Premise 6: KiKi is an animal.\n    # No update needed here as KiKi is already initialized as an animal.\n\n    # Premise 7: If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n    if animal.name == \"KiKi\" and animal.jumps is False and animal.has_legs is False:\n        if animal.is_terricolous is None:\n            animal.is_terricolous = True\n            changed = True\n        if animal.has_legs is None:\n            animal.has_legs = True\n            changed = True\n\n    return changed\n\ndef run_inference(animal: Animal):\n    while apply_premises(animal):\n        pass\n\ndef check_conclusion(animal: Animal) -> str:\n    run_inference(animal)\n    # Conclusion: KiKi does not bark and he is not a dog.\n    if animal.name == \"KiKi\":\n        if animal.barks is False and animal.is_dog is False:\n            return \"True\"\n        else:\n            return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions\n    kiki = Animal(name=\"KiKi\", is_dog=None, barks=None, jumps=None, has_legs=None, is_terricolous=None)\n    return check_conclusion(kiki)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: KiKi does not bark and he is not a dog?\", result)\n```\n```",
        "label": "True",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nJane does not like any animals that bark.\nAll dogs are animals that bark.\nJane likes all animals that jump.\nIf an animal has legs, then it jumps.\nIf an animal is terricolous, then it has legs. \nKiKi is an animal.\nIf KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.\n</Premises>\n<Conclusion>\nKiKi does not bark and he is not a dog.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? KiKi does not bark and he is not a dog.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "No one playing for Nautico is Brazilian.",
        "rationale": "from typing import Optional\n\nclass FootballPlayer:\n    def __init__(self, name: str, nationality: Optional[str] = None, club: Optional[str] = None):\n        self.name = name\n        self.nationality = nationality\n        self.club = club\n\nclass FootballClub:\n    def __init__(self, name: str, players: Optional[list] = None):\n        self.name = name\n        self.players = players if players is not None else []\n\ndef apply_premises() -> bool:\n    changed = False\n\n    # Premise 1: Ailton Silva, born in 1995, is commonly known as Ailton.\n    ailton = FootballPlayer(\"Ailton Silva\", \"Brazilian\", \"N\u00e1utico\")\n\n    # Premise 2: Ailton is a football player who was loaned out to Braga.\n    ailton.club = \"Braga\"\n    changed = True\n\n    # Premise 3: Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.\n    ailton.nationality = \"Brazilian\"\n    ailton.club = \"N\u00e1utico\"\n    changed = True\n\n    # Premise 4: N\u00e1utico is a football club along with Braga.\n    nautico = FootballClub(\"N\u00e1utico\", [ilton])\n    braga = FootballClub(\"Braga\", [])\n\n    # Adding players to the clubs\n    nautico.players.append(ilton)\n    braga.players.append(ilton)\n\n    # Premise 5: Fluminense is a football club.\n    fluminense = FootballClub(\"Fluminense\", [])\n\n    return changed\n\ndef run_inference():\n    apply_premises()\n    # Check if there is any Brazilian player playing for N\u00e1utico\n    for player in nautico.players:\n        if player.nationality == \"Brazilian\":\n            return False\n    return True\n\ndef check_conclusion() -> str:\n    if run_inference():\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    return check_conclusion()\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: No one playing for Nautico is Brazilian?\", result)",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</Premises>\n<Conclusion>\nNo one playing for Nautico is Brazilian.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? No one playing for Nautico is Brazilian.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "Ailton Silva does not play for a football club.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, birth_year: int, is_football_player: Optional[bool] = None, club: Optional[str] = None):\n        self.name = name\n        self.birth_year = birth_year\n        self.is_football_player = is_football_player\n        self.club = club\n\nclass Club:\n    def __init__(self, name: str):\n        self.name = name\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: Ailton Silva, born in 1995, is commonly known as Ailton.\n    if person.name == \"Ailton Silva\" and person.birth_year != 1995:\n        person.birth_year = 1995\n        changed = True\n\n    # Premise 2: Ailton is a football player who was loaned out to Braga.\n    if person.name == \"Ailton Silva\" and person.is_football_player is None:\n        person.is_football_player = True\n        changed = True\n\n    # Premise 3: Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.\n    if person.name == \"Ailton Silva\" and person.club != \"N\u00e1utico\":\n        person.club = \"N\u00e1utico\"\n        changed = True\n\n    # Premise 4: N\u00e1utico is a football club along with Braga.\n    # No update needed for clubs as it does not affect Ailton's club.\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    if person.is_football_player is False:\n        return \"True\"\n    elif person.is_football_player is True and person.club is not None:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    person = Person(name=\"Ailton Silva\", birth_year=1995, is_football_player=None, club=None)\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ailton Silva does not play for a football club?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</Premises>\n<Conclusion>\nAilton Silva does not play for a football club.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Ailton Silva does not play for a football club.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "Ailton was not loaned out to a football club.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, birth_year: int, is_loan: Optional[bool] = None):\n        self.name = name\n        self.birth_year = birth_year\n        self.is_loan = is_loan\n\nclass Club:\n    def __init__(self, name: str, is_loan_destination: Optional[bool] = None):\n        self.name = name\n        self.is_loan_destination = is_loan_destination\n\ndef apply_premises(person: Person, clubs: list[Club]) -> bool:\n    changed = False\n\n    # Premise 1: Ailton Silva, born in 1995, is commonly known as Ailton.\n    if person.name == \"Ailton\" and person.birth_year == 1995:\n        person.name = \"Ailton Silva\"\n        changed = True\n\n    # Premise 2: Ailton is a football player who was loaned out to Braga.\n    if person.name == \"Ailton Silva\":\n        if person.is_loan is None:\n            person.is_loan = True\n            changed = True\n        for club in clubs:\n            if club.name == \"Braga\":\n                club.is_loan_destination = True\n                changed = True\n\n    # Premise 3: Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.\n    if person.name == \"Ailton Silva\":\n        if person.is_loan is None:\n            person.is_loan = False\n            changed = True\n\n    # Premise 4: N\u00e1utico is a football club along with Braga.\n    # No update needed for this premise as it's about club membership, not loan status.\n\n    # Premise 5: Fluminense is a football club.\n    # No update needed for this premise as it's about club membership, not loan status.\n\n    return changed\n\ndef run_inference(person: Person, clubs: list[Club]):\n    while apply_premises(person, clubs):\n        pass\n\ndef check_conclusion(person: Person, clubs: list[Club]) -> str:\n    run_inference(person, clubs)\n    if person.is_loan is None:\n        return \"Uncertain\"\n    if person.is_loan is False:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(name=\"Ailton\", birth_year=1995, is_loan=None)\n    clubs = [Club(name=\"Braga\"), Club(name=\"N\u00e1utico\"), Club(name=\"Fluminense\")]\n    return check_conclusion(person, clubs)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ailton was not loaned out to a football club?\", result)\n```\n```",
        "label": "False",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</Premises>\n<Conclusion>\nAilton was not loaned out to a football club.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Ailton was not loaned out to a football club.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "Ailton Silva played for Fluminense.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, born_year: int, is_footballer: bool = False, teams: list = None):\n        self.name = name\n        self.born_year = born_year\n        self.is_footballer = is_footballer\n        self.teams = teams if teams is not None else []\n\nclass Team:\n    def __init__(self, name: str, is_football_club: bool = False):\n        self.name = name\n        self.is_football_club = is_football_club\n\ndef apply_premises():\n    ailton = Person(name=\"Ailton Silva\", born_year=1995, is_footballer=True)\n    ailton.teams = [\"N\u00e1utico\", \"Braga\"]\n\n    braga = Team(name=\"Braga\", is_football_club=True)\n    nautico = Team(name=\"N\u00e1utico\", is_football_club=True)\n    fluminense = Team(name=\"Fluminense\", is_football_club=True)\n\n    return ailton, braga, nautico, fluminense\n\ndef run_inference(ilton, braga, nautico, fluminense):\n    ailton, braga, nautico, fluminense = apply_premises()\n    return ailton.teams\n\ndef check_conclusion(ilton, braga, nautico, fluminense) -> str:\n    ailton_teams = run_inference(ilton, braga, nautico, fluminense)\n    if \"Fluminense\" in ailton_teams:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    ailton, braga, nautico, fluminense = apply_premises()\n    return check_conclusion(ilton, braga, nautico, fluminense)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ailton Silva played for Fluminense?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</Premises>\n<Conclusion>\nAilton Silva played for Fluminense.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Ailton Silva played for Fluminense.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    },
    {
        "premises": "Ailton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.",
        "conclusions": "Ailton Silva was loaned out to a football club.",
        "rationale": "```python\nfrom typing import Optional\n\nclass Person:\n    def __init__(self, name: str, birth_year: int, is_loan_player: Optional[bool] = None):\n        self.name = name\n        self.birth_year = birth_year\n        self.is_loan_player = is_loan_player\n\nclass Club:\n    def __init__(self, name: str, is_loan_destination: Optional[bool] = None):\n        self.name = name\n        self.is_loan_destination = is_loan_destination\n\ndef apply_premises(ilton: Person, braga: Club, nautico: Club, fluminense: Club) -> bool:\n    changed = False\n\n    # Premise 1: Ailton Silva, born in 1995, is commonly known as Ailton.\n    if ilton.name == \"Ailton Silva\" and ilton.birth_year == 1995:\n        if ilton.is_loan_player is None:\n            ilton.is_loan_player = False\n            changed = True\n\n    # Premise 2: Ailton is a football player who was loaned out to Braga.\n    if ilton.name == \"Ailton\" and braga.name == \"Braga\":\n        if ilton.is_loan_player is None:\n            ilton.is_loan_player = True\n            changed = True\n\n    # Premise 3: Ailton Silva is a Brazilian footballer who plays for N\u00e1utico.\n    if ilton.name == \"Ailton Silva\" and nautico.name == \"N\u00e1utico\":\n        if nautico.is_loan_destination is None:\n            nautico.is_loan_destination = True\n            changed = True\n\n    # Premise 4: N\u00e1utico is a football club along with Braga.\n    if nautico.name == \"N\u00e1utico\" and braga.name == \"Braga\":\n        if nautico.is_loan_destination is None:\n            nautico.is_loan_destination = True\n            changed = True\n\n    # Premise 5: Fluminense is a football club.\n    # This premise does not affect the loan status of Ailton Silva.\n\n    return changed\n\ndef run_inference(ilton: Person, braga: Club, nautico: Club, fluminense: Club):\n    while apply_premises(ilton, braga, nautico, fluminense):\n        pass\n\ndef check_conclusion(ilton: Person, braga: Club, nautico: Club, fluminense: Club) -> str:\n    run_inference(ilton, braga, nautico, fluminense)\n    if ilton.is_loan_player is True:\n        return \"True\"\n    elif ilton.is_loan_player is False:\n        return \"False\"\n    else:\n        return \"Uncertain\"\n\ndef func():\n    # Initial conditions\n    ilton = Person(name=\"Ailton Silva\", birth_year=1995)\n    braga = Club(name=\"Braga\")\n    nautico = Club(name=\"N\u00e1utico\")\n    fluminense = Club(name=\"Fluminense\")\n    return check_conclusion(ilton, braga, nautico, fluminense)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: Ailton Silva was loaned out to a football club?\", result)\n```\n```",
        "label": "Uncertain",
        "predict": "Unknown",
        "user_prompt": [
            {
                "role": "user",
                "content": "You are a programming assistant that generates executable Python code for logical inference tasks. Your task is to produce code that:\n\n1. Takes a set of premises and a conclusion as input.\n2. Represents entities and their properties as Python classes.\n3. Implements inference rules in a function (or functions) that update the state of these entities according to the premises.\n4. Handles uncertain information: if a value remains unknown (None) after inference, the result should be reported as \"Uncertain\".\n5. Returns a final result as a string: \"True\", \"False\", or \"Uncertain\", depending on whether the conclusion logically follows from the premises.\n6. The Python Code should be enclosed within <PYTHON> and </PYTHON>.\n7. Only produce Python codes and do not generate any other contents. The code is in str type and can be conducted throuth exec().\n\nWhen generating code, ensure that all premises are fully encoded and the reasoning is expressed in the code without making unwarranted assumptions. The code should be self-contained and executable as a Python script, with a main function (e.g., `func()`) that returns the final result.\n\nExample usage: The script should define a `func()` function that, when executed, runs the inference and prints the conclusion.\n\n\nBelow are three examples that demonstrate the desired style:\n\n<EXAMPLE 1>\n<Premises>\nPeter Parker is either a superhero or a civilian.\nThe Hulk is a destroyer.\nThe Hulk wakes up when he is angry.\nIf the Hulk wakes up, then he will break a bridge.\nThor is a god.\nThor will break a bridge when he is happy.\nA god is not a destroyer.\nPeter Parker wears a uniform when he is a superhero.\nPeter Parker is not a civilian if a destroyer is breaking a bridge.\nIf Thor is happy, the Hulk is angry.\n</Premises>\n<Conclusion>\nIf Thor is happy, then Peter Parker wears a uniform.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass Hulk:\n    def __init__(self, angry: Optional[bool] = None):\n        self.angry = angry  # can be True, False, or None\n\n    @property\n    def is_destroyer(self) -> bool:\n        return True  # Premise: The Hulk is a destroyer.\n\n    @property\n    def wakes_up(self) -> Optional[bool]:\n        # Premise: The Hulk wakes up when he is angry.\n        if self.angry is None:\n            return None\n        return self.angry\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: If the Hulk wakes up, then he will break a bridge.\n        if self.wakes_up is None:\n            return None\n        return self.wakes_up\n\nclass Thor:\n    def __init__(self, happy: Optional[bool] = None):\n        self.happy = happy  # can be True, False, or None\n\n    @property\n    def is_god(self) -> bool:\n        return True  # Premise: Thor is a god.\n\n    @property\n    def is_destroyer(self) -> bool:\n        # Premise: A god is not a destroyer.\n        return False\n\n    @property\n    def breaks_bridge(self) -> Optional[bool]:\n        # Premise: Thor will break a bridge when he is happy.\n        if self.happy is None:\n            return None\n        return self.happy\n\nclass PeterParker:\n    def __init__(self, is_superhero: Optional[bool] = None):\n        self.is_superhero = is_superhero  # True: superhero, False: civilian, None: unknown\n\n    @property\n    def is_civilian(self) -> Optional[bool]:\n        # Premise: Peter Parker is either a superhero or a civilian.\n        if self.is_superhero is None:\n            return None\n        return not self.is_superhero\n\n    @property\n    def wears_uniform(self) -> Optional[bool]:\n        # Premise: Peter Parker wears a uniform when he is a superhero.\n        if self.is_superhero is None:\n            return None\n        return self.is_superhero\n\ndef apply_premises(thor: Thor, hulk: Hulk, peter: PeterParker) -> bool:\n    changed = False\n\n    # Premise 10: If Thor is happy, then the Hulk is angry.\n    if thor.happy is True and hulk.angry is not True:\n        hulk.angry = True\n        changed = True\n\n    # Premise 4 is encoded in Hulk.breaks_bridge.\n    # Premise 9: If a destroyer is breaking a bridge, then Peter Parker is not a civilian,\n    # meaning he must be a superhero.\n    if hulk.is_destroyer and hulk.breaks_bridge is True and peter.is_superhero is not True:\n        peter.is_superhero = True\n        changed = True\n\n    return changed\n\ndef run_inference(thor: Thor, hulk: Hulk, peter: PeterParker):\n    while apply_premises(thor, hulk, peter):\n        pass\n\ndef check_conclusion(thor: Thor, hulk: Hulk, peter: PeterParker) -> str:\n    run_inference(thor, hulk, peter)\n    if thor.happy is True:\n        if peter.wears_uniform is True:\n            return \"True\"\n        elif peter.wears_uniform is False:\n            return \"False\"\n        else:\n            return \"Uncertain\"\n    else:\n        # If Thor is not happy, the implication is vacuously true.\n        return \"True\"\n\ndef func():\n    # Initial conditions:\n    # Peter Parker is either a superhero or a civilian.\n    # Here we assume initially he is a civilian (is_superhero = False).\n    # The Hulk's anger is initially unknown (set to False for determinism).\n    thor = Thor(happy=True)       # Premise: Thor is happy.\n    hulk = Hulk(angry=False)        # Initial state; will be updated by inference.\n    peter = PeterParker(is_superhero=False)  # Initially a civilian.\n    return check_conclusion(thor, hulk, peter)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: If Thor is happy, then Peter Parker wears a uniform?\", result)\n\n</PYTHON>\n</EXAMPLE 1>\n\n<EXAMPLE 2>\n<Premises>\nAll philosophers reason.\nSome sophists reason.\nAll who can reason can distinguish truth from falsehood.\nNobody who can distinguish truth from falsehood is morally perfect.\nThe theistic God is morally perfect.\nThe theistic God is a sophist.\n</Premises>\n<Conclusion>\nThe theistic God is a sophist and a philosopher.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass TheisticGod:\n    def __init__(self,\n                 is_philosopher: Optional[bool] = None,\n                 is_sophist: Optional[bool] = None,\n                 can_reason: Optional[bool] = None,\n                 can_distinguish: Optional[bool] = None,\n                 is_morally_perfect: Optional[bool] = None):\n        self.is_philosopher = is_philosopher       # Unknown initially\n        self.is_sophist = is_sophist               # Given (Premise 6)\n        self.can_reason = can_reason               # Unknown initially\n        self.can_distinguish = can_distinguish     # Unknown initially\n        self.is_morally_perfect = is_morally_perfect # Given (Premise 5)\n\ndef apply_premises(god: TheisticGod) -> bool:\n    changed = False\n\n    # Premise 1: All philosophers reason.\n    if god.is_philosopher is True and god.can_reason is not True:\n        god.can_reason = True\n        changed = True\n\n    # Contrapositive of Premise 1: If one does not reason, then one is not a philosopher.\n    if god.can_reason is False and god.is_philosopher is not False:\n        god.is_philosopher = False\n        changed = True\n\n    # Premise 3: All who can reason can distinguish truth from falsehood.\n    if god.can_reason is True and god.can_distinguish is not True:\n        god.can_distinguish = True\n        changed = True\n\n    # Contrapositive of Premise 3: If one cannot distinguish truth from falsehood, then one cannot reason.\n    if god.can_distinguish is False and god.can_reason is not False:\n        god.can_reason = False\n        changed = True\n\n    # Premise 4: Nobody who can distinguish truth from falsehood is morally perfect.\n    if god.can_distinguish is True and god.is_morally_perfect is not False:\n        god.is_morally_perfect = False\n        changed = True\n\n    # Contrapositive of Premise 4: If one is morally perfect, then one cannot distinguish truth from falsehood.\n    if god.is_morally_perfect is True and god.can_distinguish is not False:\n        god.can_distinguish = False\n        changed = True\n\n    # Premise 2: Some sophists reason.\n    # This only tells us that at least one sophist reasons,\n    # so it does not force that all sophists (including God) must reason.\n    # Premises 5 and 6 are given.\n\n    return changed\n\ndef run_inference(god: TheisticGod):\n    while apply_premises(god):\n        pass\n\ndef check_conclusion(god: TheisticGod) -> str:\n    run_inference(god)\n    # Conclusion: The theistic God is a sophist and a philosopher.\n    # if is_sophist or is_philosopher is None, then Uncertain\n    if god.is_sophist is None or god.is_philosopher is None:\n        return \"Uncertain\"\n    if god.is_sophist is True and god.is_philosopher is True:\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    # Premise 5: God is morally perfect -> True\n    # Premise 6: God is a sophist -> True\n    god = TheisticGod(\n        is_philosopher=None,\n        is_sophist=True,\n        can_reason=None,\n        can_distinguish=None,\n        is_morally_perfect=True\n    )\n    return check_conclusion(god)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: The theistic God is a sophist and a philosopher?\", result)\n\n</PYTHON>\n</EXAMPLE 2>\n\n<EXAMPLE 3>\n<Premises>\nWilliam Dickinson was a British politician who sat in the House of Commons William Dickinson attended Westminster school for high school and then the University of Edinburgh. \nThe University of Edinburgh is a university located in the United Kingdom. \nWilliam Dickinson supported the Portland Whigs. \nPeople who supported the Portland Whigs did not get a seat in the Parliament.\n</Premises>\n<Conclusion>\nWilliam Dickinson went to schools located in the United Kingdom for both high school and university.\n</Conclusion>\n<PYTHON>\nfrom typing import Optional\n\nclass School:\n    def __init__(self, name: str, location: Optional[str] = None):\n        self.name = name\n        self.location = location\n\nclass University(School):\n    pass\n\nclass Person:\n    def __init__(self,\n                 name: str,\n                 is_british: Optional[bool] = None,\n                 high_school: Optional[School] = None,\n                 university: Optional[School] = None,\n                 sat_in_house: Optional[bool] = None,\n                 supported_portland_whigs: Optional[bool] = None):\n        self.name = name\n        self.is_british = is_british\n        self.high_school = high_school\n        self.university = university\n        self.sat_in_house = sat_in_house\n        self.supported_portland_whigs = supported_portland_whigs\n\ndef apply_premises(person: Person) -> bool:\n    changed = False\n\n    # Premise 1: William Dickinson was a British politician who sat in the House of Commons.\n    if person.name == \"William Dickinson\":\n        if person.is_british is None:\n            person.is_british = True\n            changed = True\n        if person.sat_in_house is None:\n            person.sat_in_house = True\n            changed = True\n\n    # Premise 2: William Dickinson attended Westminster School for high school and then the University of Edinburgh.\n    if person.name == \"William Dickinson\":\n        if person.high_school is None:\n            person.high_school = School(\"Westminster School\", location=None)\n            changed = True\n        if person.university is None:\n            person.university = University(\"University of Edinburgh\", location=None)\n            changed = True\n\n    # Premise 3: The University of Edinburgh is a university located in the United Kingdom.\n    if person.university is not None and person.university.name == \"University of Edinburgh\":\n        if person.university.location != \"UK\":\n            person.university.location = \"UK\"\n            changed = True\n\n    # Premise 4: William Dickinson supported the Portland Whigs.\n    if person.name == \"William Dickinson\":\n        if person.supported_portland_whigs is None:\n            person.supported_portland_whigs = True\n            changed = True\n\n    # Premise 5: People who supported the Portland Whigs did not get a seat in the Parliament.\n    # (No update is made here as it does not affect school location.)\n    return changed\n\ndef run_inference(person: Person):\n    while apply_premises(person):\n        pass\n\ndef check_conclusion(person: Person) -> str:\n    run_inference(person)\n    # Conclusion: William Dickinson went to schools located in the UK for both high school and university.\n    if person.high_school is None or person.university is None:\n        return \"Uncertain\"\n    hs_loc = person.high_school.location\n    uni_loc = person.university.location\n    if hs_loc is None or uni_loc is None:\n        return \"Uncertain\"\n    if hs_loc == \"UK\" and uni_loc == \"UK\":\n        return \"True\"\n    else:\n        return \"False\"\n\ndef func():\n    person = Person(\n        name=\"William Dickinson\",\n        is_british=None,\n        high_school=None,\n        university=None,\n        sat_in_house=None,\n        supported_portland_whigs=None\n    )\n    return check_conclusion(person)\n\nif __name__ == '__main__':\n    result = func()\n    print(\"Conclusion: William Dickinson went to schools located in the UK for both high school and university?\", result)\n</PYTHON>\n</EXAMPLE 3>\n\n\n\n\nThe following is the problem you need to solve.\n\n<Premises>\nAilton Silva, born in 1995, is commonly known as Ailton.\nAilton is a football player who was loaned out to Braga.\nAilton Silva is a Brazilian footballer who plays for N\u00e1utico.\nN\u00e1utico is a football club along with Braga.\nFluminense is a football club.\n</Premises>\n<Conclusion>\nAilton Silva was loaned out to a football club.\n</Conclusion>\n<Question>\nIs the following statement true, false, or uncertain? Ailton Silva was loaned out to a football club.\n</Question>\n<Options>\n(A) True\n(B) False\n(C) Uncertain\n</Options>\n<PYTHON>\n"
            }
        ]
    }
]