from z3 import Solver, DeclareSort, Function, ForAll, Exists, Implies, And, Or, Not, BoolSort, Const\n\n# Declare sorts\nPerson = DeclareSort(\"Person\")  # People (Bonnie, students, community members)\nSchool = DeclareSort(\"School\")  # Schools (The school)\nEvent = DeclareSort(\"Event\")  # Events (Talent shows, dances)\nActivity = DeclareSort(\"Activity\")  # Activities (Performing, chaperoning)\n\n# Define predicates\nIsInClub = Function(\"IsInClub\", Person, BoolSort())  # InClub(x)\nPerformsInSchoolTalentShow = Function(\"PerformsInSchoolTalentShow\", Person, BoolSort())  # PerformsInSchoolTalentShow(x)\nAttendsSchool = Function(\"AttendsSchool\", Person, BoolSort())  # AttendsSchool(x)\nIsEngagedWithSchool = Function(\"IsEngagedWithSchool\", Person, BoolSort())  # IsEngagedWithSchool(x)\nIsInactiveAndDisinterested = Function(\"IsInactiveAndDisinterested\", Person, BoolSort())  # IsInactiveAndDisinterested(x)\nChaperonesDance = Function(\"ChaperonesDance\", Person, BoolSort())  # ChaperonesDance(x)\nIsYoungChildOrTeenager = Function(\"IsYoungChildOrTeenager\", Person, BoolSort())  # IsYoungChildOrTeenager(x)\nWishesToFurtherAcademicCareer = Function(\"WishesToFurtherAcademicCareer\", Person, BoolSort())  # WishesToFurtherAcademicCareer(x)\n\n# Declare constants\nBonnie = Const(\"Bonnie\", Person)\nx = Const(\"x\", Person)\ny = Const(\"y\", Person)\n\n# Define solver\nsolver = Solver()\n\n# **Premises**\nsolver.add(Implies(IsInClub(Bonnie), And(Or(PerformsInSchoolTalentShow(Bonnie), Not(PerformsInSchoolTalentShow(Bonnie))))))  # People in this club who perform in school talent shows often attend and are very engaged with school events.\nsolver.add(Or(PerformsInSchoolTalentShow(Bonnie), And(IsInactiveAndDisinterested(Bonnie)))  # People in this club either perform in school talent shows often or are inactive and disinterested community members.\nsolver.add(Not(And(IsInClub(Bonnie), AttendsSchool(Bonnie), ChaperonesDance(Bonnie))))  # People in this club who chaperone high school dances are not students who attend the school.\nsolver.add(ForAll([x], Implies(IsInactiveAndDisinterested(x), ChaperonesDance(x))))  # All people in this club who are inactive and disinterested members of their community chaperone high school dances.\nsolver.add(ForAll([x], Implies(And(IsYoungChildOrTeenager(x), WishesToFurtherAcademicCareer(x), IsInClub(x)), AttendsSchool(x))))  # All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\n\n# **Conclusion to Check**\nconclusion = Implies(Or(And(IsYoungChildOrTeenager(Bonnie), ChaperonesDance(Bonnie), Or(AttendsSchool(Bonnie), IsInactiveAndDisinterested(Bonnie))), Not(And(IsYoungChildOrTeenager(Bonnie), Not(ChaperonesDance(Bonnie)))), Or(AttendsSchool(Bonnie), IsInactiveAndDisinterested(Bonnie)))\n\n# **Check validity**\nsolver.push()\nsolver.add(Not(conclusion))\nresult1 = solver.check()\nsolver.pop()\n\nsolver.push()\nsolver.add(conclusion)\nresult2 = solver.check()\nsolver.pop()\n\n# **Corrected Decision Logic**\nfrom z3 import unsat, sat\n\nif result1 == unsat:\n    print(\"The conclusion is necessarily true: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community. (True)\")\n    result = 'True'\nelif result1 == sat and result2 == unsat:\n    print(\"The conclusion is necessarily false: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community. (False)\")\n    result = 'False'\nelif result1 == sat and result2 == sat:\n    print(\"The conclusion is uncertain: If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community. (Uncertain)\")\n    result = 'Uncertain'\nelse:\n    print(\"Unexpected result, possible logical error.\")\n    result = 'Unknown'\n\nprint(result)
