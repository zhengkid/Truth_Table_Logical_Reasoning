code = '''
from z3 import Solver, DeclareSort, Function, ForAll, Exists, Implies, And, Or, Not, BoolSort, Const\n\n# Declare sorts\nPerson = DeclareSort(\"Person\")  # People (Bonnie, students, community members)\nSchool = DeclareSort(\"School\")  # Schools\nEvent = DeclareSort(\"Event\")  # Events (school talent shows, high school dances)\nActivity = DeclareSort(\"Activity\")  # Activities (performing in school talent shows, chaperoning high school dances)\n\n# Define predicates\nAttends = Function(\"Attends\", Person, School, BoolSort())  # Attends(x, s)\nIs_Engaged = Function(\"Is_Engaged\", Person, School, BoolSort())  # Is_Engaged(x, s)\nIs_Inactive = Function(\"Is_Inactive\", Person, BoolSort())  # Is_Inactive(x)\nIs_Interested = Function(\"Is_Interested\", Person, BoolSort())  # Is_Interested(x)\nChaperones = Function(\"Chaperones\", Person, Event, BoolSort())  # Chaperones(x, e)\nIs_Student = Function(\"Is_Student\", Person, BoolSort())  # Is_Student(x)\nWishes_To_Further = Function(\"Wishes_To_Further\", Person, BoolSort())  # Wishes_To_Further(x)\nPerforms = Function(\"Performs\", Person, Activity, BoolSort())  # Performs(x, a)\n\n# Declare constants\nBonnie = Const(\"Bonnie\", Person)\nSchool_Attended = Const(\"School_Attended\", School)\nEvent_Attended = Const(\"Event_Attended\", Event)\nActivity_Performed = Const(\"Activity_Performed\", Activity)\n\n# Declare variables\nx = Const(\"x\", Person)\ns = Const(\"s\", School)\ne = Const(\"e\", Event)\na = Const(\"a\", Activity)\n\n# Define solver\nsolver = Solver()\n\n# **Premises**\nsolver.add(ForAll([x], Implies(And(Performs(x, Activity_Performed), Attends(x, s)), Is_Engaged(x, s)))  # People in this club who perform in school talent shows often attend and are very engaged with school events.\nsolver.add(Or(ForAll([x], Implies(Performs(x, Activity_Performed), Is_Inactive(x))), Exists([x], And(Is_Inactive(x), Not(Is_Interested(x))))))  # People in this club either perform in school talent shows often or are inactive and disinterested community members.\nsolver.add(ForAll([x], Implies(And(Chaperones(x, e), Not(Is_Student(x))), Not(Attends(x, s))))  # People in this club who chaperone high school dances are not students who attend the school.\nsolver.add(ForAll([x], Implies(And(Is_Inactive(x), Not(Is_Interested(x)), Chaperones(x, e)), True)))  # All people in this club who are inactive and disinterested members of their community chaperone high school dances.\nsolver.add(ForAll([x], Implies(And(Is_Student(x), And(Wishes_To_Further(x), x < 18), Attends(x, s))))  # All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school.\nsolver.add(And(Attends(Bonnie, s), Or(And(Is_Engaged(Bonnie, s), Is_Student(Bonnie)), Not(And(Is_Engaged(Bonnie, s), Is_Student(Bonnie))))))  # Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school.\n\n# **Conclusion to Check**\nconclusion = Performs(Bonnie, Activity_Performed)  # Bonnie performs in school talent shows often.\n\n# **Check validity**\nsolver.push()\nsolver.add(Not(conclusion))  # Negate the conclusion and check for contradiction\nresult1 = solver.check()\nsolver.pop()\n\nsolver.push()\nsolver.add(conclusion)\nresult2 = solver.check()\nsolver.pop()\n\n# **Corrected Decision Logic**\nfrom z3 import unsat, sat\n\nif result1 == unsat:\n    print(\"The conclusion is necessarily true: Bonnie performs in school talent shows often. (True)\")\n    result = 'True'\nelif result1 == sat and result2 == unsat:\n    print(\"The conclusion is necessarily false: Bonnie does not perform in school talent shows often. (False)\")\n    result = 'False'\nelif result1 == sat and result2 == sat:\n    print(\"The conclusion is uncertain: It depends on additional unstated assumptions. (Uncertain)\")\n    result = 'Uncertain'\nelse:\n    print(\"Unexpected result, possible logical error.\")\n    result = 'Unknown'\n\nprint(result)
'''



exec(code)
